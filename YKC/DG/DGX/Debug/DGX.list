
DGX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081e0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800838c  0800838c  0001838c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a4  080083a4  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  080083a4  080083a4  000183a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083ac  080083ac  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083ac  080083ac  000183ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083b0  080083b0  000183b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  080083b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020054  2**0
                  CONTENTS
 10 .bss          000012d0  20000054  20000054  00020054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001324  20001324  00020054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011d24  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002489  00000000  00000000  00031deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001130  00000000  00000000  00034278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d7e  00000000  00000000  000353a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024469  00000000  00000000  00036126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013179  00000000  00000000  0005a58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000de59c  00000000  00000000  0006d708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000049f4  00000000  00000000  0014bca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00150698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000054 	.word	0x20000054
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008374 	.word	0x08008374

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000058 	.word	0x20000058
 80001e8:	08008374 	.word	0x08008374

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__aeabi_d2uiz>:
 8000988:	004a      	lsls	r2, r1, #1
 800098a:	d211      	bcs.n	80009b0 <__aeabi_d2uiz+0x28>
 800098c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000990:	d211      	bcs.n	80009b6 <__aeabi_d2uiz+0x2e>
 8000992:	d50d      	bpl.n	80009b0 <__aeabi_d2uiz+0x28>
 8000994:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000998:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800099c:	d40e      	bmi.n	80009bc <__aeabi_d2uiz+0x34>
 800099e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009aa:	fa23 f002 	lsr.w	r0, r3, r2
 80009ae:	4770      	bx	lr
 80009b0:	f04f 0000 	mov.w	r0, #0
 80009b4:	4770      	bx	lr
 80009b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ba:	d102      	bne.n	80009c2 <__aeabi_d2uiz+0x3a>
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295
 80009c0:	4770      	bx	lr
 80009c2:	f04f 0000 	mov.w	r0, #0
 80009c6:	4770      	bx	lr

080009c8 <__aeabi_uldivmod>:
 80009c8:	b953      	cbnz	r3, 80009e0 <__aeabi_uldivmod+0x18>
 80009ca:	b94a      	cbnz	r2, 80009e0 <__aeabi_uldivmod+0x18>
 80009cc:	2900      	cmp	r1, #0
 80009ce:	bf08      	it	eq
 80009d0:	2800      	cmpeq	r0, #0
 80009d2:	bf1c      	itt	ne
 80009d4:	f04f 31ff 	movne.w	r1, #4294967295
 80009d8:	f04f 30ff 	movne.w	r0, #4294967295
 80009dc:	f000 b970 	b.w	8000cc0 <__aeabi_idiv0>
 80009e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e8:	f000 f806 	bl	80009f8 <__udivmoddi4>
 80009ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f4:	b004      	add	sp, #16
 80009f6:	4770      	bx	lr

080009f8 <__udivmoddi4>:
 80009f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009fc:	9e08      	ldr	r6, [sp, #32]
 80009fe:	460d      	mov	r5, r1
 8000a00:	4604      	mov	r4, r0
 8000a02:	460f      	mov	r7, r1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d14a      	bne.n	8000a9e <__udivmoddi4+0xa6>
 8000a08:	428a      	cmp	r2, r1
 8000a0a:	4694      	mov	ip, r2
 8000a0c:	d965      	bls.n	8000ada <__udivmoddi4+0xe2>
 8000a0e:	fab2 f382 	clz	r3, r2
 8000a12:	b143      	cbz	r3, 8000a26 <__udivmoddi4+0x2e>
 8000a14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a18:	f1c3 0220 	rsb	r2, r3, #32
 8000a1c:	409f      	lsls	r7, r3
 8000a1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000a22:	4317      	orrs	r7, r2
 8000a24:	409c      	lsls	r4, r3
 8000a26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a2a:	fa1f f58c 	uxth.w	r5, ip
 8000a2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a32:	0c22      	lsrs	r2, r4, #16
 8000a34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a3c:	fb01 f005 	mul.w	r0, r1, r5
 8000a40:	4290      	cmp	r0, r2
 8000a42:	d90a      	bls.n	8000a5a <__udivmoddi4+0x62>
 8000a44:	eb1c 0202 	adds.w	r2, ip, r2
 8000a48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a4c:	f080 811c 	bcs.w	8000c88 <__udivmoddi4+0x290>
 8000a50:	4290      	cmp	r0, r2
 8000a52:	f240 8119 	bls.w	8000c88 <__udivmoddi4+0x290>
 8000a56:	3902      	subs	r1, #2
 8000a58:	4462      	add	r2, ip
 8000a5a:	1a12      	subs	r2, r2, r0
 8000a5c:	b2a4      	uxth	r4, r4
 8000a5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a6a:	fb00 f505 	mul.w	r5, r0, r5
 8000a6e:	42a5      	cmp	r5, r4
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x90>
 8000a72:	eb1c 0404 	adds.w	r4, ip, r4
 8000a76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a7a:	f080 8107 	bcs.w	8000c8c <__udivmoddi4+0x294>
 8000a7e:	42a5      	cmp	r5, r4
 8000a80:	f240 8104 	bls.w	8000c8c <__udivmoddi4+0x294>
 8000a84:	4464      	add	r4, ip
 8000a86:	3802      	subs	r0, #2
 8000a88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a8c:	1b64      	subs	r4, r4, r5
 8000a8e:	2100      	movs	r1, #0
 8000a90:	b11e      	cbz	r6, 8000a9a <__udivmoddi4+0xa2>
 8000a92:	40dc      	lsrs	r4, r3
 8000a94:	2300      	movs	r3, #0
 8000a96:	e9c6 4300 	strd	r4, r3, [r6]
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0xbc>
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	f000 80ed 	beq.w	8000c82 <__udivmoddi4+0x28a>
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	e9c6 0500 	strd	r0, r5, [r6]
 8000aae:	4608      	mov	r0, r1
 8000ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab4:	fab3 f183 	clz	r1, r3
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	d149      	bne.n	8000b50 <__udivmoddi4+0x158>
 8000abc:	42ab      	cmp	r3, r5
 8000abe:	d302      	bcc.n	8000ac6 <__udivmoddi4+0xce>
 8000ac0:	4282      	cmp	r2, r0
 8000ac2:	f200 80f8 	bhi.w	8000cb6 <__udivmoddi4+0x2be>
 8000ac6:	1a84      	subs	r4, r0, r2
 8000ac8:	eb65 0203 	sbc.w	r2, r5, r3
 8000acc:	2001      	movs	r0, #1
 8000ace:	4617      	mov	r7, r2
 8000ad0:	2e00      	cmp	r6, #0
 8000ad2:	d0e2      	beq.n	8000a9a <__udivmoddi4+0xa2>
 8000ad4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ad8:	e7df      	b.n	8000a9a <__udivmoddi4+0xa2>
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xe6>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f382 	clz	r3, r2
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f040 8090 	bne.w	8000c08 <__udivmoddi4+0x210>
 8000ae8:	1a8a      	subs	r2, r1, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f fe8c 	uxth.w	lr, ip
 8000af2:	2101      	movs	r1, #1
 8000af4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000af8:	fb07 2015 	mls	r0, r7, r5, r2
 8000afc:	0c22      	lsrs	r2, r4, #16
 8000afe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b02:	fb0e f005 	mul.w	r0, lr, r5
 8000b06:	4290      	cmp	r0, r2
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x124>
 8000b0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x122>
 8000b14:	4290      	cmp	r0, r2
 8000b16:	f200 80cb 	bhi.w	8000cb0 <__udivmoddi4+0x2b8>
 8000b1a:	4645      	mov	r5, r8
 8000b1c:	1a12      	subs	r2, r2, r0
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b24:	fb07 2210 	mls	r2, r7, r0, r2
 8000b28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000b30:	45a6      	cmp	lr, r4
 8000b32:	d908      	bls.n	8000b46 <__udivmoddi4+0x14e>
 8000b34:	eb1c 0404 	adds.w	r4, ip, r4
 8000b38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3c:	d202      	bcs.n	8000b44 <__udivmoddi4+0x14c>
 8000b3e:	45a6      	cmp	lr, r4
 8000b40:	f200 80bb 	bhi.w	8000cba <__udivmoddi4+0x2c2>
 8000b44:	4610      	mov	r0, r2
 8000b46:	eba4 040e 	sub.w	r4, r4, lr
 8000b4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b4e:	e79f      	b.n	8000a90 <__udivmoddi4+0x98>
 8000b50:	f1c1 0720 	rsb	r7, r1, #32
 8000b54:	408b      	lsls	r3, r1
 8000b56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000b62:	fa20 f307 	lsr.w	r3, r0, r7
 8000b66:	40fd      	lsrs	r5, r7
 8000b68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b6c:	4323      	orrs	r3, r4
 8000b6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	fb09 5518 	mls	r5, r9, r8, r5
 8000b7a:	0c1c      	lsrs	r4, r3, #16
 8000b7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b80:	fb08 f50e 	mul.w	r5, r8, lr
 8000b84:	42a5      	cmp	r5, r4
 8000b86:	fa02 f201 	lsl.w	r2, r2, r1
 8000b8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000b8e:	d90b      	bls.n	8000ba8 <__udivmoddi4+0x1b0>
 8000b90:	eb1c 0404 	adds.w	r4, ip, r4
 8000b94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b98:	f080 8088 	bcs.w	8000cac <__udivmoddi4+0x2b4>
 8000b9c:	42a5      	cmp	r5, r4
 8000b9e:	f240 8085 	bls.w	8000cac <__udivmoddi4+0x2b4>
 8000ba2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba6:	4464      	add	r4, ip
 8000ba8:	1b64      	subs	r4, r4, r5
 8000baa:	b29d      	uxth	r5, r3
 8000bac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000bb4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bb8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x1da>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bc8:	d26c      	bcs.n	8000ca4 <__udivmoddi4+0x2ac>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	d96a      	bls.n	8000ca4 <__udivmoddi4+0x2ac>
 8000bce:	3b02      	subs	r3, #2
 8000bd0:	4464      	add	r4, ip
 8000bd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	42ac      	cmp	r4, r5
 8000be0:	46c8      	mov	r8, r9
 8000be2:	46ae      	mov	lr, r5
 8000be4:	d356      	bcc.n	8000c94 <__udivmoddi4+0x29c>
 8000be6:	d053      	beq.n	8000c90 <__udivmoddi4+0x298>
 8000be8:	b156      	cbz	r6, 8000c00 <__udivmoddi4+0x208>
 8000bea:	ebb0 0208 	subs.w	r2, r0, r8
 8000bee:	eb64 040e 	sbc.w	r4, r4, lr
 8000bf2:	fa04 f707 	lsl.w	r7, r4, r7
 8000bf6:	40ca      	lsrs	r2, r1
 8000bf8:	40cc      	lsrs	r4, r1
 8000bfa:	4317      	orrs	r7, r2
 8000bfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000c00:	4618      	mov	r0, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c08:	f1c3 0120 	rsb	r1, r3, #32
 8000c0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c10:	fa20 f201 	lsr.w	r2, r0, r1
 8000c14:	fa25 f101 	lsr.w	r1, r5, r1
 8000c18:	409d      	lsls	r5, r3
 8000c1a:	432a      	orrs	r2, r5
 8000c1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c20:	fa1f fe8c 	uxth.w	lr, ip
 8000c24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c28:	fb07 1510 	mls	r5, r7, r0, r1
 8000c2c:	0c11      	lsrs	r1, r2, #16
 8000c2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c32:	fb00 f50e 	mul.w	r5, r0, lr
 8000c36:	428d      	cmp	r5, r1
 8000c38:	fa04 f403 	lsl.w	r4, r4, r3
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x258>
 8000c3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c46:	d22f      	bcs.n	8000ca8 <__udivmoddi4+0x2b0>
 8000c48:	428d      	cmp	r5, r1
 8000c4a:	d92d      	bls.n	8000ca8 <__udivmoddi4+0x2b0>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4461      	add	r1, ip
 8000c50:	1b49      	subs	r1, r1, r5
 8000c52:	b292      	uxth	r2, r2
 8000c54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c58:	fb07 1115 	mls	r1, r7, r5, r1
 8000c5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c60:	fb05 f10e 	mul.w	r1, r5, lr
 8000c64:	4291      	cmp	r1, r2
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x282>
 8000c68:	eb1c 0202 	adds.w	r2, ip, r2
 8000c6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c70:	d216      	bcs.n	8000ca0 <__udivmoddi4+0x2a8>
 8000c72:	4291      	cmp	r1, r2
 8000c74:	d914      	bls.n	8000ca0 <__udivmoddi4+0x2a8>
 8000c76:	3d02      	subs	r5, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a52      	subs	r2, r2, r1
 8000c7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c80:	e738      	b.n	8000af4 <__udivmoddi4+0xfc>
 8000c82:	4631      	mov	r1, r6
 8000c84:	4630      	mov	r0, r6
 8000c86:	e708      	b.n	8000a9a <__udivmoddi4+0xa2>
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e6e6      	b.n	8000a5a <__udivmoddi4+0x62>
 8000c8c:	4610      	mov	r0, r2
 8000c8e:	e6fb      	b.n	8000a88 <__udivmoddi4+0x90>
 8000c90:	4548      	cmp	r0, r9
 8000c92:	d2a9      	bcs.n	8000be8 <__udivmoddi4+0x1f0>
 8000c94:	ebb9 0802 	subs.w	r8, r9, r2
 8000c98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c9c:	3b01      	subs	r3, #1
 8000c9e:	e7a3      	b.n	8000be8 <__udivmoddi4+0x1f0>
 8000ca0:	4645      	mov	r5, r8
 8000ca2:	e7ea      	b.n	8000c7a <__udivmoddi4+0x282>
 8000ca4:	462b      	mov	r3, r5
 8000ca6:	e794      	b.n	8000bd2 <__udivmoddi4+0x1da>
 8000ca8:	4640      	mov	r0, r8
 8000caa:	e7d1      	b.n	8000c50 <__udivmoddi4+0x258>
 8000cac:	46d0      	mov	r8, sl
 8000cae:	e77b      	b.n	8000ba8 <__udivmoddi4+0x1b0>
 8000cb0:	3d02      	subs	r5, #2
 8000cb2:	4462      	add	r2, ip
 8000cb4:	e732      	b.n	8000b1c <__udivmoddi4+0x124>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e70a      	b.n	8000ad0 <__udivmoddi4+0xd8>
 8000cba:	4464      	add	r4, ip
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	e742      	b.n	8000b46 <__udivmoddi4+0x14e>

08000cc0 <__aeabi_idiv0>:
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <_calcBaudRate>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint16_t _calcBaudRate(uint16_t baud_rate)
{
 8000cc4:	b5b0      	push	{r4, r5, r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
    uint16_t calc;
    float tmp;
    tmp =  UARTI2CSPI_OSCILATOR_FREQ / UARTI2CSPI_PRESCALER_DEF;
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <_calcBaudRate+0x6c>)
 8000cd0:	edd3 6a00 	vldr	s13, [r3]
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <_calcBaudRate+0x70>)
 8000cd6:	ed93 7a00 	vldr	s14, [r3]
 8000cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cde:	edc7 7a03 	vstr	s15, [r7, #12]
    calc = (uint16_t)( tmp / ( (float)baud_rate * 16.0 ) );
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff fbe6 	bl	80004b4 <__aeabi_f2d>
 8000ce8:	4604      	mov	r4, r0
 8000cea:	460d      	mov	r5, r1
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	ee07 3a90 	vmov	s15, r3
 8000cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cf6:	ee17 0a90 	vmov	r0, s15
 8000cfa:	f7ff fbdb 	bl	80004b4 <__aeabi_f2d>
 8000cfe:	f04f 0200 	mov.w	r2, #0
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <_calcBaudRate+0x74>)
 8000d04:	f7ff fc2e 	bl	8000564 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	4629      	mov	r1, r5
 8000d10:	f7ff fd52 	bl	80007b8 <__aeabi_ddiv>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	4610      	mov	r0, r2
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f7ff fe34 	bl	8000988 <__aeabi_d2uiz>
 8000d20:	4603      	mov	r3, r0
 8000d22:	817b      	strh	r3, [r7, #10]

    return calc;
 8000d24:	897b      	ldrh	r3, [r7, #10]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000020 	.word	0x20000020
 8000d34:	20000024 	.word	0x20000024
 8000d38:	40300000 	.word	0x40300000

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d40:	f003 fe0a 	bl	8004958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d44:	f000 f932 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d48:	f000 fb88 	bl	800145c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d4c:	f000 f9b2 	bl	80010b4 <MX_SPI1_Init>
  MX_TIM3_Init();
 8000d50:	f000 f9e6 	bl	8001120 <MX_TIM3_Init>
  MX_UART4_Init();
 8000d54:	f000 fa32 	bl	80011bc <MX_UART4_Init>
  MX_UART5_Init();
 8000d58:	f000 fa5a 	bl	8001210 <MX_UART5_Init>
  MX_UART7_Init();
 8000d5c:	f000 fa82 	bl	8001264 <MX_UART7_Init>
  MX_UART8_Init();
 8000d60:	f000 faaa 	bl	80012b8 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8000d64:	f000 fad2 	bl	800130c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d68:	f000 fafa 	bl	8001360 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000d6c:	f000 fb22 	bl	80013b4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000d70:	f000 fb4a 	bl	8001408 <MX_USART6_UART_Init>
  MX_RNG_Init();
 8000d74:	f000 f98a 	bl	800108c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d7e:	4868      	ldr	r0, [pc, #416]	; (8000f20 <main+0x1e4>)
 8000d80:	f004 f9e8 	bl	8005154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin,   GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2110      	movs	r1, #16
 8000d88:	4865      	ldr	r0, [pc, #404]	; (8000f20 <main+0x1e4>)
 8000d8a:	f004 f9e3 	bl	8005154 <HAL_GPIO_WritePin>

  uarti2cspi_initAdvanced(19200,UARTI2CSPI_UART_8_BIT_DATA,UARTI2CSPI_UART_NOPARITY,UARTI2CSPI_UART_ONE_STOPBIT);
 8000d8e:	2103      	movs	r1, #3
 8000d90:	2200      	movs	r2, #0
 8000d92:	2300      	movs	r3, #0
 8000d94:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
 8000d98:	f002 ff90 	bl	8003cbc <uarti2cspi_initAdvanced>

  HAL_TIM_Base_Start_IT(&htim3);
 8000d9c:	4861      	ldr	r0, [pc, #388]	; (8000f24 <main+0x1e8>)
 8000d9e:	f005 ff15 	bl	8006bcc <HAL_TIM_Base_Start_IT>

  initial_GPIO_LED();
 8000da2:	f000 fc67 	bl	8001674 <initial_GPIO_LED>


  ringbuf_init (&g_uart1_rxringbuf, g_uart1_rxbuf, g_uart1_rxbufsize);
 8000da6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000daa:	461a      	mov	r2, r3
 8000dac:	495e      	ldr	r1, [pc, #376]	; (8000f28 <main+0x1ec>)
 8000dae:	485f      	ldr	r0, [pc, #380]	; (8000f2c <main+0x1f0>)
 8000db0:	f003 f87f 	bl	8003eb2 <ringbuf_init>
  ringbuf_init (&g_uart2_rxringbuf, g_uart2_rxbuf, g_uart2_rxbufsize);
 8000db4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db8:	461a      	mov	r2, r3
 8000dba:	495d      	ldr	r1, [pc, #372]	; (8000f30 <main+0x1f4>)
 8000dbc:	485d      	ldr	r0, [pc, #372]	; (8000f34 <main+0x1f8>)
 8000dbe:	f003 f878 	bl	8003eb2 <ringbuf_init>
  ringbuf_init (&g_uart3_rxringbuf, g_uart3_rxbuf, g_uart3_rxbufsize);
 8000dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	495b      	ldr	r1, [pc, #364]	; (8000f38 <main+0x1fc>)
 8000dca:	485c      	ldr	r0, [pc, #368]	; (8000f3c <main+0x200>)
 8000dcc:	f003 f871 	bl	8003eb2 <ringbuf_init>
  ringbuf_init (&g_uart4_rxringbuf, g_uart4_rxbuf, g_uart4_rxbufsize);
 8000dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	495a      	ldr	r1, [pc, #360]	; (8000f40 <main+0x204>)
 8000dd8:	485a      	ldr	r0, [pc, #360]	; (8000f44 <main+0x208>)
 8000dda:	f003 f86a 	bl	8003eb2 <ringbuf_init>
  ringbuf_init (&g_uart5_rxringbuf, g_uart5_rxbuf, g_uart5_rxbufsize);
 8000dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de2:	461a      	mov	r2, r3
 8000de4:	4958      	ldr	r1, [pc, #352]	; (8000f48 <main+0x20c>)
 8000de6:	4859      	ldr	r0, [pc, #356]	; (8000f4c <main+0x210>)
 8000de8:	f003 f863 	bl	8003eb2 <ringbuf_init>
  ringbuf_init (&g_uart6_rxringbuf, g_uart6_rxbuf, g_uart6_rxbufsize);
 8000dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df0:	461a      	mov	r2, r3
 8000df2:	4957      	ldr	r1, [pc, #348]	; (8000f50 <main+0x214>)
 8000df4:	4857      	ldr	r0, [pc, #348]	; (8000f54 <main+0x218>)
 8000df6:	f003 f85c 	bl	8003eb2 <ringbuf_init>
  ringbuf_init (&g_uart7_rxringbuf, g_uart7_rxbuf, g_uart7_rxbufsize);
 8000dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4955      	ldr	r1, [pc, #340]	; (8000f58 <main+0x21c>)
 8000e02:	4856      	ldr	r0, [pc, #344]	; (8000f5c <main+0x220>)
 8000e04:	f003 f855 	bl	8003eb2 <ringbuf_init>
  ringbuf_init (&g_uart8_rxringbuf, g_uart8_rxbuf, g_uart8_rxbufsize);
 8000e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4954      	ldr	r1, [pc, #336]	; (8000f60 <main+0x224>)
 8000e10:	4854      	ldr	r0, [pc, #336]	; (8000f64 <main+0x228>)
 8000e12:	f003 f84e 	bl	8003eb2 <ringbuf_init>

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000e16:	4b54      	ldr	r3, [pc, #336]	; (8000f68 <main+0x22c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	4b52      	ldr	r3, [pc, #328]	; (8000f68 <main+0x22c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f042 0220 	orr.w	r2, r2, #32
 8000e24:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000e26:	4b51      	ldr	r3, [pc, #324]	; (8000f6c <main+0x230>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	4b4f      	ldr	r3, [pc, #316]	; (8000f6c <main+0x230>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f042 0220 	orr.w	r2, r2, #32
 8000e34:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000e36:	4b4e      	ldr	r3, [pc, #312]	; (8000f70 <main+0x234>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	4b4c      	ldr	r3, [pc, #304]	; (8000f70 <main+0x234>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f042 0220 	orr.w	r2, r2, #32
 8000e44:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_RXNE);
 8000e46:	4b4b      	ldr	r3, [pc, #300]	; (8000f74 <main+0x238>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <main+0x238>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f042 0220 	orr.w	r2, r2, #32
 8000e54:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart5, UART_IT_RXNE);
 8000e56:	4b48      	ldr	r3, [pc, #288]	; (8000f78 <main+0x23c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	4b46      	ldr	r3, [pc, #280]	; (8000f78 <main+0x23c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f042 0220 	orr.w	r2, r2, #32
 8000e64:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8000e66:	4b45      	ldr	r3, [pc, #276]	; (8000f7c <main+0x240>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	4b43      	ldr	r3, [pc, #268]	; (8000f7c <main+0x240>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f042 0220 	orr.w	r2, r2, #32
 8000e74:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart7, UART_IT_RXNE);
 8000e76:	4b42      	ldr	r3, [pc, #264]	; (8000f80 <main+0x244>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	4b40      	ldr	r3, [pc, #256]	; (8000f80 <main+0x244>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f042 0220 	orr.w	r2, r2, #32
 8000e84:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart8, UART_IT_RXNE);
 8000e86:	4b3f      	ldr	r3, [pc, #252]	; (8000f84 <main+0x248>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	4b3d      	ldr	r3, [pc, #244]	; (8000f84 <main+0x248>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f042 0220 	orr.w	r2, r2, #32
 8000e94:	60da      	str	r2, [r3, #12]

  HAL_UART_Receive_IT(&huart1, &COM1_data, 1);
 8000e96:	2201      	movs	r2, #1
 8000e98:	493b      	ldr	r1, [pc, #236]	; (8000f88 <main+0x24c>)
 8000e9a:	4833      	ldr	r0, [pc, #204]	; (8000f68 <main+0x22c>)
 8000e9c:	f006 fb0c 	bl	80074b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &COM2_data, 1);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	493a      	ldr	r1, [pc, #232]	; (8000f8c <main+0x250>)
 8000ea4:	4831      	ldr	r0, [pc, #196]	; (8000f6c <main+0x230>)
 8000ea6:	f006 fb07 	bl	80074b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &COM3_data, 1);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4938      	ldr	r1, [pc, #224]	; (8000f90 <main+0x254>)
 8000eae:	4830      	ldr	r0, [pc, #192]	; (8000f70 <main+0x234>)
 8000eb0:	f006 fb02 	bl	80074b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &COM4_data, 1);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4937      	ldr	r1, [pc, #220]	; (8000f94 <main+0x258>)
 8000eb8:	482e      	ldr	r0, [pc, #184]	; (8000f74 <main+0x238>)
 8000eba:	f006 fafd 	bl	80074b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, &COM5_data, 1);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4935      	ldr	r1, [pc, #212]	; (8000f98 <main+0x25c>)
 8000ec2:	482d      	ldr	r0, [pc, #180]	; (8000f78 <main+0x23c>)
 8000ec4:	f006 faf8 	bl	80074b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &COM6_data, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	4934      	ldr	r1, [pc, #208]	; (8000f9c <main+0x260>)
 8000ecc:	482b      	ldr	r0, [pc, #172]	; (8000f7c <main+0x240>)
 8000ece:	f006 faf3 	bl	80074b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart7, &COM7_data, 1);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4932      	ldr	r1, [pc, #200]	; (8000fa0 <main+0x264>)
 8000ed6:	482a      	ldr	r0, [pc, #168]	; (8000f80 <main+0x244>)
 8000ed8:	f006 faee 	bl	80074b8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart8, &COM8_data, 1);
 8000edc:	2201      	movs	r2, #1
 8000ede:	4931      	ldr	r1, [pc, #196]	; (8000fa4 <main+0x268>)
 8000ee0:	4828      	ldr	r0, [pc, #160]	; (8000f84 <main+0x248>)
 8000ee2:	f006 fae9 	bl	80074b8 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	uartinput1();
 8000ee6:	f000 ffa7 	bl	8001e38 <uartinput1>
	uartinput2();
 8000eea:	f000 ffe7 	bl	8001ebc <uartinput2>
	uartinput3();
 8000eee:	f001 f827 	bl	8001f40 <uartinput3>
	uartinput4();
 8000ef2:	f001 f867 	bl	8001fc4 <uartinput4>
	uartinput5();
 8000ef6:	f001 f8a7 	bl	8002048 <uartinput5>
	uartinput6();
 8000efa:	f001 f8e7 	bl	80020cc <uartinput6>
	uartinput7();
 8000efe:	f001 f927 	bl	8002150 <uartinput7>
	uartinput8();
 8000f02:	f001 f967 	bl	80021d4 <uartinput8>

	transmit_reset();
 8000f06:	f002 fda9 	bl	8003a5c <transmit_reset>

	if(_flag_transmit == CX_TRUE)
 8000f0a:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <main+0x26c>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d1e9      	bne.n	8000ee6 <main+0x1aa>
	{
	  transmit();
 8000f12:	f002 fe3f 	bl	8003b94 <transmit>

	  _flag_transmit = CX_FALSE;
 8000f16:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <main+0x26c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
	uartinput1();
 8000f1c:	e7e3      	b.n	8000ee6 <main+0x1aa>
 8000f1e:	bf00      	nop
 8000f20:	40020000 	.word	0x40020000
 8000f24:	200000d8 	.word	0x200000d8
 8000f28:	20000378 	.word	0x20000378
 8000f2c:	20000364 	.word	0x20000364
 8000f30:	2000048c 	.word	0x2000048c
 8000f34:	20000478 	.word	0x20000478
 8000f38:	200005a0 	.word	0x200005a0
 8000f3c:	2000058c 	.word	0x2000058c
 8000f40:	200006b4 	.word	0x200006b4
 8000f44:	200006a0 	.word	0x200006a0
 8000f48:	200007c8 	.word	0x200007c8
 8000f4c:	200007b4 	.word	0x200007b4
 8000f50:	200008dc 	.word	0x200008dc
 8000f54:	200008c8 	.word	0x200008c8
 8000f58:	200009f0 	.word	0x200009f0
 8000f5c:	200009dc 	.word	0x200009dc
 8000f60:	20000b04 	.word	0x20000b04
 8000f64:	20000af0 	.word	0x20000af0
 8000f68:	20000240 	.word	0x20000240
 8000f6c:	20000288 	.word	0x20000288
 8000f70:	200002d0 	.word	0x200002d0
 8000f74:	20000120 	.word	0x20000120
 8000f78:	20000168 	.word	0x20000168
 8000f7c:	20000318 	.word	0x20000318
 8000f80:	200001b0 	.word	0x200001b0
 8000f84:	200001f8 	.word	0x200001f8
 8000f88:	20000c04 	.word	0x20000c04
 8000f8c:	20000c05 	.word	0x20000c05
 8000f90:	20000c06 	.word	0x20000c06
 8000f94:	20000c07 	.word	0x20000c07
 8000f98:	20000c08 	.word	0x20000c08
 8000f9c:	20000c09 	.word	0x20000c09
 8000fa0:	20000c0a 	.word	0x20000c0a
 8000fa4:	20000c0b 	.word	0x20000c0b
 8000fa8:	20000360 	.word	0x20000360

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	; 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	2230      	movs	r2, #48	; 0x30
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f007 f9a0 	bl	8008300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <SystemClock_Config+0xd8>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	4a2a      	ldr	r2, [pc, #168]	; (8001084 <SystemClock_Config+0xd8>)
 8000fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fde:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe0:	4b28      	ldr	r3, [pc, #160]	; (8001084 <SystemClock_Config+0xd8>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	4b25      	ldr	r3, [pc, #148]	; (8001088 <SystemClock_Config+0xdc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a24      	ldr	r2, [pc, #144]	; (8001088 <SystemClock_Config+0xdc>)
 8000ff6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <SystemClock_Config+0xdc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001008:	2301      	movs	r3, #1
 800100a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800100c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001012:	2302      	movs	r3, #2
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001016:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800101a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800101c:	2304      	movs	r3, #4
 800101e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001020:	23b4      	movs	r3, #180	; 0xb4
 8001022:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001024:	2302      	movs	r3, #2
 8001026:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001028:	2308      	movs	r3, #8
 800102a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	f107 0320 	add.w	r3, r7, #32
 8001030:	4618      	mov	r0, r3
 8001032:	f004 f913 	bl	800525c <HAL_RCC_OscConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800103c:	f002 ff34 	bl	8003ea8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001040:	f004 f8bc 	bl	80051bc <HAL_PWREx_EnableOverDrive>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800104a:	f002 ff2d 	bl	8003ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104e:	230f      	movs	r3, #15
 8001050:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001052:	2302      	movs	r3, #2
 8001054:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800105a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800105e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001064:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	2105      	movs	r1, #5
 800106c:	4618      	mov	r0, r3
 800106e:	f004 fb6d 	bl	800574c <HAL_RCC_ClockConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001078:	f002 ff16 	bl	8003ea8 <Error_Handler>
  }
}
 800107c:	bf00      	nop
 800107e:	3750      	adds	r7, #80	; 0x50
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40023800 	.word	0x40023800
 8001088:	40007000 	.word	0x40007000

0800108c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_RNG_Init+0x20>)
 8001092:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <MX_RNG_Init+0x24>)
 8001094:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_RNG_Init+0x20>)
 8001098:	f004 fd78 	bl	8005b8c <HAL_RNG_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80010a2:	f002 ff01 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000070 	.word	0x20000070
 80010b0:	50060800 	.word	0x50060800

080010b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <MX_SPI1_Init+0x64>)
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <MX_SPI1_Init+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_SPI1_Init+0x64>)
 80010c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_SPI1_Init+0x64>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MX_SPI1_Init+0x64>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_SPI1_Init+0x64>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_SPI1_Init+0x64>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_SPI1_Init+0x64>)
 80010e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_SPI1_Init+0x64>)
 80010e8:	2208      	movs	r2, #8
 80010ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <MX_SPI1_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_SPI1_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <MX_SPI1_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_SPI1_Init+0x64>)
 8001100:	220a      	movs	r2, #10
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_SPI1_Init+0x64>)
 8001106:	f004 fdd6 	bl	8005cb6 <HAL_SPI_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001110:	f002 feca 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000080 	.word	0x20000080
 800111c:	40013000 	.word	0x40013000

08001120 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_TIM3_Init+0x94>)
 800113e:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <MX_TIM3_Init+0x98>)
 8001140:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5000;
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <MX_TIM3_Init+0x94>)
 8001144:	f241 3288 	movw	r2, #5000	; 0x1388
 8001148:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_TIM3_Init+0x94>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 18;
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_TIM3_Init+0x94>)
 8001152:	2212      	movs	r2, #18
 8001154:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <MX_TIM3_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_TIM3_Init+0x94>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001162:	4814      	ldr	r0, [pc, #80]	; (80011b4 <MX_TIM3_Init+0x94>)
 8001164:	f005 fce2 	bl	8006b2c <HAL_TIM_Base_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800116e:	f002 fe9b 	bl	8003ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001176:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	4619      	mov	r1, r3
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <MX_TIM3_Init+0x94>)
 8001180:	f005 fe84 	bl	8006e8c <HAL_TIM_ConfigClockSource>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800118a:	f002 fe8d 	bl	8003ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <MX_TIM3_Init+0x94>)
 800119c:	f006 f8ac 	bl	80072f8 <HAL_TIMEx_MasterConfigSynchronization>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011a6:	f002 fe7f 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200000d8 	.word	0x200000d8
 80011b8:	40000400 	.word	0x40000400

080011bc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_UART4_Init+0x4c>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <MX_UART4_Init+0x50>)
 80011c4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_UART4_Init+0x4c>)
 80011c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011cc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_UART4_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_UART4_Init+0x4c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_UART4_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_UART4_Init+0x4c>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_UART4_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_UART4_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_UART4_Init+0x4c>)
 80011f4:	f006 f910 	bl	8007418 <HAL_UART_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80011fe:	f002 fe53 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000120 	.word	0x20000120
 800120c:	40004c00 	.word	0x40004c00

08001210 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_UART5_Init+0x4c>)
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <MX_UART5_Init+0x50>)
 8001218:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <MX_UART5_Init+0x4c>)
 800121c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001220:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_UART5_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_UART5_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_UART5_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_UART5_Init+0x4c>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_UART5_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_UART5_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_UART5_Init+0x4c>)
 8001248:	f006 f8e6 	bl	8007418 <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001252:	f002 fe29 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000168 	.word	0x20000168
 8001260:	40005000 	.word	0x40005000

08001264 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_UART7_Init+0x4c>)
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <MX_UART7_Init+0x50>)
 800126c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <MX_UART7_Init+0x4c>)
 8001270:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001274:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_UART7_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_UART7_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <MX_UART7_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_UART7_Init+0x4c>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <MX_UART7_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_UART7_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_UART7_Init+0x4c>)
 800129c:	f006 f8bc 	bl	8007418 <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_UART7_Init+0x46>
  {
    Error_Handler();
 80012a6:	f002 fdff 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200001b0 	.word	0x200001b0
 80012b4:	40007800 	.word	0x40007800

080012b8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_UART8_Init+0x4c>)
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <MX_UART8_Init+0x50>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_UART8_Init+0x4c>)
 80012c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012c8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_UART8_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_UART8_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <MX_UART8_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_UART8_Init+0x4c>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <MX_UART8_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_UART8_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MX_UART8_Init+0x4c>)
 80012f0:	f006 f892 	bl	8007418 <HAL_UART_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80012fa:	f002 fdd5 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200001f8 	.word	0x200001f8
 8001308:	40007c00 	.word	0x40007c00

0800130c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <MX_USART1_UART_Init+0x50>)
 8001314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001318:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800131c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_USART1_UART_Init+0x4c>)
 8001344:	f006 f868 	bl	8007418 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800134e:	f002 fdab 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000240 	.word	0x20000240
 800135c:	40011000 	.word	0x40011000

08001360 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <MX_USART2_UART_Init+0x50>)
 8001368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 800136c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_USART2_UART_Init+0x4c>)
 8001398:	f006 f83e 	bl	8007418 <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013a2:	f002 fd81 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000288 	.word	0x20000288
 80013b0:	40004400 	.word	0x40004400

080013b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_USART3_UART_Init+0x4c>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <MX_USART3_UART_Init+0x50>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <MX_USART3_UART_Init+0x4c>)
 80013c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_USART3_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_USART3_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_USART3_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_USART3_UART_Init+0x4c>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_USART3_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_USART3_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_USART3_UART_Init+0x4c>)
 80013ec:	f006 f814 	bl	8007418 <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013f6:	f002 fd57 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002d0 	.word	0x200002d0
 8001404:	40004800 	.word	0x40004800

08001408 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <MX_USART6_UART_Init+0x50>)
 8001410:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 8001414:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001418:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 800142e:	220c      	movs	r2, #12
 8001430:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_USART6_UART_Init+0x4c>)
 8001440:	f005 ffea 	bl	8007418 <HAL_UART_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800144a:	f002 fd2d 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000318 	.word	0x20000318
 8001458:	40011400 	.word	0x40011400

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08e      	sub	sp, #56	; 0x38
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
 8001476:	4b79      	ldr	r3, [pc, #484]	; (800165c <MX_GPIO_Init+0x200>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a78      	ldr	r2, [pc, #480]	; (800165c <MX_GPIO_Init+0x200>)
 800147c:	f043 0310 	orr.w	r3, r3, #16
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b76      	ldr	r3, [pc, #472]	; (800165c <MX_GPIO_Init+0x200>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	623b      	str	r3, [r7, #32]
 800148c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
 8001492:	4b72      	ldr	r3, [pc, #456]	; (800165c <MX_GPIO_Init+0x200>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a71      	ldr	r2, [pc, #452]	; (800165c <MX_GPIO_Init+0x200>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b6f      	ldr	r3, [pc, #444]	; (800165c <MX_GPIO_Init+0x200>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	4b6b      	ldr	r3, [pc, #428]	; (800165c <MX_GPIO_Init+0x200>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a6a      	ldr	r2, [pc, #424]	; (800165c <MX_GPIO_Init+0x200>)
 80014b4:	f043 0320 	orr.w	r3, r3, #32
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b68      	ldr	r3, [pc, #416]	; (800165c <MX_GPIO_Init+0x200>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0320 	and.w	r3, r3, #32
 80014c2:	61bb      	str	r3, [r7, #24]
 80014c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	4b64      	ldr	r3, [pc, #400]	; (800165c <MX_GPIO_Init+0x200>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a63      	ldr	r2, [pc, #396]	; (800165c <MX_GPIO_Init+0x200>)
 80014d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b61      	ldr	r3, [pc, #388]	; (800165c <MX_GPIO_Init+0x200>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b5d      	ldr	r3, [pc, #372]	; (800165c <MX_GPIO_Init+0x200>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a5c      	ldr	r2, [pc, #368]	; (800165c <MX_GPIO_Init+0x200>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b5a      	ldr	r3, [pc, #360]	; (800165c <MX_GPIO_Init+0x200>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b56      	ldr	r3, [pc, #344]	; (800165c <MX_GPIO_Init+0x200>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a55      	ldr	r2, [pc, #340]	; (800165c <MX_GPIO_Init+0x200>)
 8001508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b53      	ldr	r3, [pc, #332]	; (800165c <MX_GPIO_Init+0x200>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b4f      	ldr	r3, [pc, #316]	; (800165c <MX_GPIO_Init+0x200>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a4e      	ldr	r2, [pc, #312]	; (800165c <MX_GPIO_Init+0x200>)
 8001524:	f043 0308 	orr.w	r3, r3, #8
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b4c      	ldr	r3, [pc, #304]	; (800165c <MX_GPIO_Init+0x200>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4b48      	ldr	r3, [pc, #288]	; (800165c <MX_GPIO_Init+0x200>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a47      	ldr	r2, [pc, #284]	; (800165c <MX_GPIO_Init+0x200>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b45      	ldr	r3, [pc, #276]	; (800165c <MX_GPIO_Init+0x200>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Watchdog_OUTPUT_GPIO_Port, Watchdog_OUTPUT_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2110      	movs	r1, #16
 8001556:	4842      	ldr	r0, [pc, #264]	; (8001660 <MX_GPIO_Init+0x204>)
 8001558:	f003 fdfc 	bl	8005154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI_UART_RX_LED_Pin|SPI_UART_TX_LED_Pin, GPIO_PIN_RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001562:	4840      	ldr	r0, [pc, #256]	; (8001664 <MX_GPIO_Init+0x208>)
 8001564:	f003 fdf6 	bl	8005154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|SPI_RST_Pin, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 6101 	mov.w	r1, #2064	; 0x810
 800156e:	483e      	ldr	r0, [pc, #248]	; (8001668 <MX_GPIO_Init+0x20c>)
 8001570:	f003 fdf0 	bl	8005154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, RX_1_RX_LED_Pin|RX_1_TX_LED_Pin|RX_2_RX_LED_Pin|RX_2_TX_LED_Pin
 8001574:	2200      	movs	r2, #0
 8001576:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800157a:	483c      	ldr	r0, [pc, #240]	; (800166c <MX_GPIO_Init+0x210>)
 800157c:	f003 fdea 	bl	8005154 <HAL_GPIO_WritePin>
                          |RX_3_RX_LED_Pin|RX_3_TX_LED_Pin|RX_4_RX_LED_Pin|RX_4_TX_LED_Pin
                          |RX_5_RX_LED_Pin|RX_5_TX_LED_Pin|RX_6_RX_LED_Pin|RX_6_TX_LED_Pin
                          |RX_7_RX_LED_Pin|RX_7_TX_LED_Pin|RX_8_RX_LED_Pin|RX_8_TX_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_Status_1_Pin|MCU_Status_2_Pin|MCU_Status_3_Pin|MCU_Status_4_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001586:	483a      	ldr	r0, [pc, #232]	; (8001670 <MX_GPIO_Init+0x214>)
 8001588:	f003 fde4 	bl	8005154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Watchdog_INPUT_Pin */
  GPIO_InitStruct.Pin = Watchdog_INPUT_Pin;
 800158c:	2308      	movs	r3, #8
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Watchdog_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	4619      	mov	r1, r3
 800159e:	4830      	ldr	r0, [pc, #192]	; (8001660 <MX_GPIO_Init+0x204>)
 80015a0:	f003 fc14 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : Watchdog_OUTPUT_Pin */
  GPIO_InitStruct.Pin = Watchdog_OUTPUT_Pin;
 80015a4:	2310      	movs	r3, #16
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Watchdog_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	4829      	ldr	r0, [pc, #164]	; (8001660 <MX_GPIO_Init+0x204>)
 80015bc:	f003 fc06 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_UART_RX_LED_Pin SPI_UART_TX_LED_Pin */
  GPIO_InitStruct.Pin = SPI_UART_RX_LED_Pin|SPI_UART_TX_LED_Pin;
 80015c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	4822      	ldr	r0, [pc, #136]	; (8001664 <MX_GPIO_Init+0x208>)
 80015da:	f003 fbf7 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin SPI_RST_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|SPI_RST_Pin;
 80015de:	f44f 6301 	mov.w	r3, #2064	; 0x810
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	481c      	ldr	r0, [pc, #112]	; (8001668 <MX_GPIO_Init+0x20c>)
 80015f8:	f003 fbe8 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_1_RX_LED_Pin RX_1_TX_LED_Pin RX_2_RX_LED_Pin RX_2_TX_LED_Pin
                           RX_3_RX_LED_Pin RX_3_TX_LED_Pin RX_4_RX_LED_Pin RX_4_TX_LED_Pin
                           RX_5_RX_LED_Pin RX_5_TX_LED_Pin RX_6_RX_LED_Pin RX_6_TX_LED_Pin
                           RX_7_RX_LED_Pin RX_7_TX_LED_Pin RX_8_RX_LED_Pin RX_8_TX_LED_Pin */
  GPIO_InitStruct.Pin = RX_1_RX_LED_Pin|RX_1_TX_LED_Pin|RX_2_RX_LED_Pin|RX_2_TX_LED_Pin
 80015fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
                          |RX_3_RX_LED_Pin|RX_3_TX_LED_Pin|RX_4_RX_LED_Pin|RX_4_TX_LED_Pin
                          |RX_5_RX_LED_Pin|RX_5_TX_LED_Pin|RX_6_RX_LED_Pin|RX_6_TX_LED_Pin
                          |RX_7_RX_LED_Pin|RX_7_TX_LED_Pin|RX_8_RX_LED_Pin|RX_8_TX_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800160e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001612:	4619      	mov	r1, r3
 8001614:	4815      	ldr	r0, [pc, #84]	; (800166c <MX_GPIO_Init+0x210>)
 8001616:	f003 fbd9 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI_IRQ_Pin;
 800161a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001620:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI_IRQ_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162e:	4619      	mov	r1, r3
 8001630:	480d      	ldr	r0, [pc, #52]	; (8001668 <MX_GPIO_Init+0x20c>)
 8001632:	f003 fbcb 	bl	8004dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_Status_1_Pin MCU_Status_2_Pin MCU_Status_3_Pin MCU_Status_4_Pin */
  GPIO_InitStruct.Pin = MCU_Status_1_Pin|MCU_Status_2_Pin|MCU_Status_3_Pin|MCU_Status_4_Pin;
 8001636:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164c:	4619      	mov	r1, r3
 800164e:	4808      	ldr	r0, [pc, #32]	; (8001670 <MX_GPIO_Init+0x214>)
 8001650:	f003 fbbc 	bl	8004dcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001654:	bf00      	nop
 8001656:	3738      	adds	r7, #56	; 0x38
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40023800 	.word	0x40023800
 8001660:	40021000 	.word	0x40021000
 8001664:	40021400 	.word	0x40021400
 8001668:	40020000 	.word	0x40020000
 800166c:	40021800 	.word	0x40021800
 8001670:	40020400 	.word	0x40020400

08001674 <initial_GPIO_LED>:

//////////LED 초기?��//////////////////////////////////////////////////////////


void initial_GPIO_LED(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RX_1_RX_LED_GPIO_Port, RX_1_RX_LED_Pin, SET);
 8001678:	2201      	movs	r2, #1
 800167a:	2101      	movs	r1, #1
 800167c:	4833      	ldr	r0, [pc, #204]	; (800174c <initial_GPIO_LED+0xd8>)
 800167e:	f003 fd69 	bl	8005154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RX_2_RX_LED_GPIO_Port, RX_2_RX_LED_Pin, SET);
 8001682:	2201      	movs	r2, #1
 8001684:	2104      	movs	r1, #4
 8001686:	4831      	ldr	r0, [pc, #196]	; (800174c <initial_GPIO_LED+0xd8>)
 8001688:	f003 fd64 	bl	8005154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RX_3_RX_LED_GPIO_Port, RX_3_RX_LED_Pin, SET);
 800168c:	2201      	movs	r2, #1
 800168e:	2110      	movs	r1, #16
 8001690:	482e      	ldr	r0, [pc, #184]	; (800174c <initial_GPIO_LED+0xd8>)
 8001692:	f003 fd5f 	bl	8005154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RX_4_RX_LED_GPIO_Port, RX_4_RX_LED_Pin, SET);
 8001696:	2201      	movs	r2, #1
 8001698:	2140      	movs	r1, #64	; 0x40
 800169a:	482c      	ldr	r0, [pc, #176]	; (800174c <initial_GPIO_LED+0xd8>)
 800169c:	f003 fd5a 	bl	8005154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RX_5_RX_LED_GPIO_Port, RX_5_RX_LED_Pin, SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a6:	4829      	ldr	r0, [pc, #164]	; (800174c <initial_GPIO_LED+0xd8>)
 80016a8:	f003 fd54 	bl	8005154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RX_6_RX_LED_GPIO_Port, RX_6_RX_LED_Pin, SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b2:	4826      	ldr	r0, [pc, #152]	; (800174c <initial_GPIO_LED+0xd8>)
 80016b4:	f003 fd4e 	bl	8005154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RX_7_RX_LED_GPIO_Port, RX_7_RX_LED_Pin, SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016be:	4823      	ldr	r0, [pc, #140]	; (800174c <initial_GPIO_LED+0xd8>)
 80016c0:	f003 fd48 	bl	8005154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RX_8_RX_LED_GPIO_Port, RX_8_RX_LED_Pin, SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016ca:	4820      	ldr	r0, [pc, #128]	; (800174c <initial_GPIO_LED+0xd8>)
 80016cc:	f003 fd42 	bl	8005154 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RX_1_TX_LED_GPIO_Port, RX_1_TX_LED_Pin, SET);
 80016d0:	2201      	movs	r2, #1
 80016d2:	2102      	movs	r1, #2
 80016d4:	481d      	ldr	r0, [pc, #116]	; (800174c <initial_GPIO_LED+0xd8>)
 80016d6:	f003 fd3d 	bl	8005154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RX_2_TX_LED_GPIO_Port, RX_2_TX_LED_Pin, SET);
 80016da:	2201      	movs	r2, #1
 80016dc:	2108      	movs	r1, #8
 80016de:	481b      	ldr	r0, [pc, #108]	; (800174c <initial_GPIO_LED+0xd8>)
 80016e0:	f003 fd38 	bl	8005154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RX_3_TX_LED_GPIO_Port, RX_3_TX_LED_Pin, SET);
 80016e4:	2201      	movs	r2, #1
 80016e6:	2120      	movs	r1, #32
 80016e8:	4818      	ldr	r0, [pc, #96]	; (800174c <initial_GPIO_LED+0xd8>)
 80016ea:	f003 fd33 	bl	8005154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RX_4_TX_LED_GPIO_Port, RX_4_TX_LED_Pin, SET);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	4816      	ldr	r0, [pc, #88]	; (800174c <initial_GPIO_LED+0xd8>)
 80016f4:	f003 fd2e 	bl	8005154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RX_5_TX_LED_GPIO_Port, RX_5_TX_LED_Pin, SET);
 80016f8:	2201      	movs	r2, #1
 80016fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fe:	4813      	ldr	r0, [pc, #76]	; (800174c <initial_GPIO_LED+0xd8>)
 8001700:	f003 fd28 	bl	8005154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RX_6_TX_LED_GPIO_Port, RX_6_TX_LED_Pin, SET);
 8001704:	2201      	movs	r2, #1
 8001706:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800170a:	4810      	ldr	r0, [pc, #64]	; (800174c <initial_GPIO_LED+0xd8>)
 800170c:	f003 fd22 	bl	8005154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RX_7_TX_LED_GPIO_Port, RX_7_TX_LED_Pin, SET);
 8001710:	2201      	movs	r2, #1
 8001712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001716:	480d      	ldr	r0, [pc, #52]	; (800174c <initial_GPIO_LED+0xd8>)
 8001718:	f003 fd1c 	bl	8005154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RX_8_TX_LED_GPIO_Port, RX_8_TX_LED_Pin, SET);
 800171c:	2201      	movs	r2, #1
 800171e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001722:	480a      	ldr	r0, [pc, #40]	; (800174c <initial_GPIO_LED+0xd8>)
 8001724:	f003 fd16 	bl	8005154 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(SPI_UART_RX_LED_GPIO_Port, SPI_UART_RX_LED_Pin, SET);
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800172e:	4808      	ldr	r0, [pc, #32]	; (8001750 <initial_GPIO_LED+0xdc>)
 8001730:	f003 fd10 	bl	8005154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_UART_TX_LED_GPIO_Port, SPI_UART_TX_LED_Pin, SET);
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <initial_GPIO_LED+0xdc>)
 800173c:	f003 fd0a 	bl	8005154 <HAL_GPIO_WritePin>

	HAL_Delay(30);
 8001740:	201e      	movs	r0, #30
 8001742:	f003 f97b 	bl	8004a3c <HAL_Delay>

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40021800 	.word	0x40021800
 8001750:	40021400 	.word	0x40021400

08001754 <HAL_TIM_PeriodElapsedCallback>:


////////////////////////////???���??////////////////////////////////////

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

		if(htim->Instance == TIM3)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a59      	ldr	r2, [pc, #356]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001762:	4293      	cmp	r3, r2
 8001764:	f040 80ac 	bne.w	80018c0 <HAL_TIM_PeriodElapsedCallback+0x16c>
		{
        ////////////SPI ?��?�� ???���??/////////////
			_timer_count_0020_msec++;
 8001768:	4b58      	ldr	r3, [pc, #352]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x178>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	4a57      	ldr	r2, [pc, #348]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001770:	6013      	str	r3, [r2, #0]
        ///////////////////////////////////
			_COM1_rx_timeout_count++;
 8001772:	4b57      	ldr	r3, [pc, #348]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	4a55      	ldr	r2, [pc, #340]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800177a:	6013      	str	r3, [r2, #0]
			_COM2_rx_timeout_count++;
 800177c:	4b55      	ldr	r3, [pc, #340]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	4a54      	ldr	r2, [pc, #336]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001784:	6013      	str	r3, [r2, #0]
			_COM3_rx_timeout_count++;
 8001786:	4b54      	ldr	r3, [pc, #336]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	3301      	adds	r3, #1
 800178c:	4a52      	ldr	r2, [pc, #328]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800178e:	6013      	str	r3, [r2, #0]
			_COM4_rx_timeout_count++;
 8001790:	4b52      	ldr	r3, [pc, #328]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	4a51      	ldr	r2, [pc, #324]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001798:	6013      	str	r3, [r2, #0]
			_COM5_rx_timeout_count++;
 800179a:	4b51      	ldr	r3, [pc, #324]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	4a4f      	ldr	r2, [pc, #316]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80017a2:	6013      	str	r3, [r2, #0]
			_COM6_rx_timeout_count++;
 80017a4:	4b4f      	ldr	r3, [pc, #316]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	4a4e      	ldr	r2, [pc, #312]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80017ac:	6013      	str	r3, [r2, #0]
			_COM7_rx_timeout_count++;
 80017ae:	4b4e      	ldr	r3, [pc, #312]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3301      	adds	r3, #1
 80017b4:	4a4c      	ldr	r2, [pc, #304]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80017b6:	6013      	str	r3, [r2, #0]
			_COM8_rx_timeout_count++;
 80017b8:	4b4c      	ldr	r3, [pc, #304]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x198>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	4a4b      	ldr	r2, [pc, #300]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x198>)
 80017c0:	6013      	str	r3, [r2, #0]

			_COM1_tx_timeout_count++;
 80017c2:	4b4b      	ldr	r3, [pc, #300]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	4a49      	ldr	r2, [pc, #292]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80017ca:	6013      	str	r3, [r2, #0]
			_COM2_tx_timeout_count++;
 80017cc:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80017d4:	6013      	str	r3, [r2, #0]
			_COM3_tx_timeout_count++;
 80017d6:	4b48      	ldr	r3, [pc, #288]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	3301      	adds	r3, #1
 80017dc:	4a46      	ldr	r2, [pc, #280]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80017de:	6013      	str	r3, [r2, #0]
			_COM4_tx_timeout_count++;
 80017e0:	4b46      	ldr	r3, [pc, #280]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	4a45      	ldr	r2, [pc, #276]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80017e8:	6013      	str	r3, [r2, #0]
			_COM5_tx_timeout_count++;
 80017ea:	4b45      	ldr	r3, [pc, #276]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3301      	adds	r3, #1
 80017f0:	4a43      	ldr	r2, [pc, #268]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80017f2:	6013      	str	r3, [r2, #0]
			_COM6_tx_timeout_count++;
 80017f4:	4b43      	ldr	r3, [pc, #268]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	4a42      	ldr	r2, [pc, #264]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80017fc:	6013      	str	r3, [r2, #0]
			_COM7_tx_timeout_count++;
 80017fe:	4b42      	ldr	r3, [pc, #264]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	3301      	adds	r3, #1
 8001804:	4a40      	ldr	r2, [pc, #256]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001806:	6013      	str	r3, [r2, #0]
			_COM8_tx_timeout_count++;
 8001808:	4b40      	ldr	r3, [pc, #256]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	4a3f      	ldr	r2, [pc, #252]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001810:	6013      	str	r3, [r2, #0]


			if(_COM1_rx_timeout_count>5)
 8001812:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b05      	cmp	r3, #5
 8001818:	d904      	bls.n	8001824 <HAL_TIM_PeriodElapsedCallback+0xd0>
			{
				HAL_GPIO_WritePin(RX_1_RX_LED_GPIO_Port, RX_1_RX_LED_Pin,SET);
 800181a:	2201      	movs	r2, #1
 800181c:	2101      	movs	r1, #1
 800181e:	483c      	ldr	r0, [pc, #240]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001820:	f003 fc98 	bl	8005154 <HAL_GPIO_WritePin>

			}
			if(_COM2_rx_timeout_count>5)
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b05      	cmp	r3, #5
 800182a:	d904      	bls.n	8001836 <HAL_TIM_PeriodElapsedCallback+0xe2>
			{
				HAL_GPIO_WritePin(RX_2_RX_LED_GPIO_Port, RX_2_RX_LED_Pin,SET);
 800182c:	2201      	movs	r2, #1
 800182e:	2104      	movs	r1, #4
 8001830:	4837      	ldr	r0, [pc, #220]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001832:	f003 fc8f 	bl	8005154 <HAL_GPIO_WritePin>

			}
			if(_COM3_rx_timeout_count>5)
 8001836:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d904      	bls.n	8001848 <HAL_TIM_PeriodElapsedCallback+0xf4>
			{
				HAL_GPIO_WritePin(RX_3_RX_LED_GPIO_Port, RX_3_RX_LED_Pin,SET);
 800183e:	2201      	movs	r2, #1
 8001840:	2110      	movs	r1, #16
 8001842:	4833      	ldr	r0, [pc, #204]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001844:	f003 fc86 	bl	8005154 <HAL_GPIO_WritePin>
			}
			if(_COM4_rx_timeout_count>5)
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x188>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b05      	cmp	r3, #5
 800184e:	d904      	bls.n	800185a <HAL_TIM_PeriodElapsedCallback+0x106>
			{
				HAL_GPIO_WritePin(RX_4_RX_LED_GPIO_Port, RX_4_RX_LED_Pin,SET);
 8001850:	2201      	movs	r2, #1
 8001852:	2140      	movs	r1, #64	; 0x40
 8001854:	482e      	ldr	r0, [pc, #184]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001856:	f003 fc7d 	bl	8005154 <HAL_GPIO_WritePin>

			}
			if(_COM5_rx_timeout_count>5)
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b05      	cmp	r3, #5
 8001860:	d905      	bls.n	800186e <HAL_TIM_PeriodElapsedCallback+0x11a>
			{
				HAL_GPIO_WritePin(RX_5_RX_LED_GPIO_Port, RX_5_RX_LED_Pin,SET);
 8001862:	2201      	movs	r2, #1
 8001864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001868:	4829      	ldr	r0, [pc, #164]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800186a:	f003 fc73 	bl	8005154 <HAL_GPIO_WritePin>

			}
			if(_COM6_rx_timeout_count>5)
 800186e:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b05      	cmp	r3, #5
 8001874:	d905      	bls.n	8001882 <HAL_TIM_PeriodElapsedCallback+0x12e>
			{
				HAL_GPIO_WritePin(RX_6_RX_LED_GPIO_Port, RX_6_RX_LED_Pin,SET);
 8001876:	2201      	movs	r2, #1
 8001878:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800187c:	4824      	ldr	r0, [pc, #144]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800187e:	f003 fc69 	bl	8005154 <HAL_GPIO_WritePin>

			}
			if(_COM7_rx_timeout_count>5)
 8001882:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b05      	cmp	r3, #5
 8001888:	d905      	bls.n	8001896 <HAL_TIM_PeriodElapsedCallback+0x142>
			{
				HAL_GPIO_WritePin(RX_7_RX_LED_GPIO_Port, RX_7_RX_LED_Pin,SET);
 800188a:	2201      	movs	r2, #1
 800188c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001890:	481f      	ldr	r0, [pc, #124]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001892:	f003 fc5f 	bl	8005154 <HAL_GPIO_WritePin>

			}
			if(_COM8_rx_timeout_count>5)
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b05      	cmp	r3, #5
 800189c:	d905      	bls.n	80018aa <HAL_TIM_PeriodElapsedCallback+0x156>
			{
				HAL_GPIO_WritePin(RX_8_RX_LED_GPIO_Port, RX_8_RX_LED_Pin,SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a4:	481a      	ldr	r0, [pc, #104]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80018a6:	f003 fc55 	bl	8005154 <HAL_GPIO_WritePin>

			}



			if(_timer_count_0020_msec > 1000)
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x178>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018b2:	d905      	bls.n	80018c0 <HAL_TIM_PeriodElapsedCallback+0x16c>
			{
				_flag_transmit = CX_TRUE;
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
				_timer_count_0020_msec=0;
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x178>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]


		}


}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40000400 	.word	0x40000400
 80018cc:	20000d1c 	.word	0x20000d1c
 80018d0:	20000d20 	.word	0x20000d20
 80018d4:	20000d24 	.word	0x20000d24
 80018d8:	20000d28 	.word	0x20000d28
 80018dc:	20000d2c 	.word	0x20000d2c
 80018e0:	20000d30 	.word	0x20000d30
 80018e4:	20000d34 	.word	0x20000d34
 80018e8:	20000d38 	.word	0x20000d38
 80018ec:	20000d3c 	.word	0x20000d3c
 80018f0:	20000d40 	.word	0x20000d40
 80018f4:	20000d44 	.word	0x20000d44
 80018f8:	20000d48 	.word	0x20000d48
 80018fc:	20000d4c 	.word	0x20000d4c
 8001900:	20000d50 	.word	0x20000d50
 8001904:	20000d54 	.word	0x20000d54
 8001908:	20000d58 	.word	0x20000d58
 800190c:	20000d5c 	.word	0x20000d5c
 8001910:	40021800 	.word	0x40021800
 8001914:	20000360 	.word	0x20000360

08001918 <HAL_UART_RxCpltCallback>:


////////////////////////?��?�� ?��?��?��?��///////////////////////////////////////////////////////

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a6a      	ldr	r2, [pc, #424]	; (8001ad0 <HAL_UART_RxCpltCallback+0x1b8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d114      	bne.n	8001954 <HAL_UART_RxCpltCallback+0x3c>
	{
		_COM1_rx_timeout_count = 0;
 800192a:	4b6a      	ldr	r3, [pc, #424]	; (8001ad4 <HAL_UART_RxCpltCallback+0x1bc>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
		_COM1_tx_timeout_count =0;
 8001930:	4b69      	ldr	r3, [pc, #420]	; (8001ad8 <HAL_UART_RxCpltCallback+0x1c0>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(RX_1_RX_LED_GPIO_Port, RX_1_RX_LED_Pin,RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	2101      	movs	r1, #1
 800193a:	4868      	ldr	r0, [pc, #416]	; (8001adc <HAL_UART_RxCpltCallback+0x1c4>)
 800193c:	f003 fc0a 	bl	8005154 <HAL_GPIO_WritePin>

		OnUart1_Recv(COM1_data);
 8001940:	4b67      	ldr	r3, [pc, #412]	; (8001ae0 <HAL_UART_RxCpltCallback+0x1c8>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f000 f915 	bl	8001b74 <OnUart1_Recv>
		HAL_UART_Receive_IT(&huart1, &COM1_data, 1);
 800194a:	2201      	movs	r2, #1
 800194c:	4964      	ldr	r1, [pc, #400]	; (8001ae0 <HAL_UART_RxCpltCallback+0x1c8>)
 800194e:	4865      	ldr	r0, [pc, #404]	; (8001ae4 <HAL_UART_RxCpltCallback+0x1cc>)
 8001950:	f005 fdb2 	bl	80074b8 <HAL_UART_Receive_IT>

	}

	if(huart->Instance == USART2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a63      	ldr	r2, [pc, #396]	; (8001ae8 <HAL_UART_RxCpltCallback+0x1d0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d114      	bne.n	8001988 <HAL_UART_RxCpltCallback+0x70>
	{
		_COM2_rx_timeout_count = 0;
 800195e:	4b63      	ldr	r3, [pc, #396]	; (8001aec <HAL_UART_RxCpltCallback+0x1d4>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
		_COM2_tx_timeout_count =0;
 8001964:	4b62      	ldr	r3, [pc, #392]	; (8001af0 <HAL_UART_RxCpltCallback+0x1d8>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(RX_2_RX_LED_GPIO_Port, RX_2_RX_LED_Pin,RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2104      	movs	r1, #4
 800196e:	485b      	ldr	r0, [pc, #364]	; (8001adc <HAL_UART_RxCpltCallback+0x1c4>)
 8001970:	f003 fbf0 	bl	8005154 <HAL_GPIO_WritePin>

		OnUart2_Recv(COM2_data);
 8001974:	4b5f      	ldr	r3, [pc, #380]	; (8001af4 <HAL_UART_RxCpltCallback+0x1dc>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f000 f90d 	bl	8001b98 <OnUart2_Recv>
		HAL_UART_Receive_IT(&huart2, &COM2_data, 1);
 800197e:	2201      	movs	r2, #1
 8001980:	495c      	ldr	r1, [pc, #368]	; (8001af4 <HAL_UART_RxCpltCallback+0x1dc>)
 8001982:	485d      	ldr	r0, [pc, #372]	; (8001af8 <HAL_UART_RxCpltCallback+0x1e0>)
 8001984:	f005 fd98 	bl	80074b8 <HAL_UART_Receive_IT>


	}

	if(huart->Instance == USART3)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a5b      	ldr	r2, [pc, #364]	; (8001afc <HAL_UART_RxCpltCallback+0x1e4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d114      	bne.n	80019bc <HAL_UART_RxCpltCallback+0xa4>
	{
		_COM3_rx_timeout_count = 0;
 8001992:	4b5b      	ldr	r3, [pc, #364]	; (8001b00 <HAL_UART_RxCpltCallback+0x1e8>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
		_COM3_tx_timeout_count =0;
 8001998:	4b5a      	ldr	r3, [pc, #360]	; (8001b04 <HAL_UART_RxCpltCallback+0x1ec>)
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(RX_3_RX_LED_GPIO_Port, RX_3_RX_LED_Pin,RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	2110      	movs	r1, #16
 80019a2:	484e      	ldr	r0, [pc, #312]	; (8001adc <HAL_UART_RxCpltCallback+0x1c4>)
 80019a4:	f003 fbd6 	bl	8005154 <HAL_GPIO_WritePin>

		OnUart3_Recv(COM3_data);
 80019a8:	4b57      	ldr	r3, [pc, #348]	; (8001b08 <HAL_UART_RxCpltCallback+0x1f0>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f905 	bl	8001bbc <OnUart3_Recv>
		HAL_UART_Receive_IT(&huart3, &COM3_data, 1);
 80019b2:	2201      	movs	r2, #1
 80019b4:	4954      	ldr	r1, [pc, #336]	; (8001b08 <HAL_UART_RxCpltCallback+0x1f0>)
 80019b6:	4855      	ldr	r0, [pc, #340]	; (8001b0c <HAL_UART_RxCpltCallback+0x1f4>)
 80019b8:	f005 fd7e 	bl	80074b8 <HAL_UART_Receive_IT>

	}

	if(huart->Instance == UART4)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a53      	ldr	r2, [pc, #332]	; (8001b10 <HAL_UART_RxCpltCallback+0x1f8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d114      	bne.n	80019f0 <HAL_UART_RxCpltCallback+0xd8>
	{
		_COM4_rx_timeout_count = 0;
 80019c6:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <HAL_UART_RxCpltCallback+0x1fc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
		_COM4_tx_timeout_count =0;
 80019cc:	4b52      	ldr	r3, [pc, #328]	; (8001b18 <HAL_UART_RxCpltCallback+0x200>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(RX_4_RX_LED_GPIO_Port, RX_4_RX_LED_Pin,RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2140      	movs	r1, #64	; 0x40
 80019d6:	4841      	ldr	r0, [pc, #260]	; (8001adc <HAL_UART_RxCpltCallback+0x1c4>)
 80019d8:	f003 fbbc 	bl	8005154 <HAL_GPIO_WritePin>

		OnUart4_Recv(COM4_data);
 80019dc:	4b4f      	ldr	r3, [pc, #316]	; (8001b1c <HAL_UART_RxCpltCallback+0x204>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 f8fd 	bl	8001be0 <OnUart4_Recv>
		HAL_UART_Receive_IT(&huart4, &COM4_data, 1);
 80019e6:	2201      	movs	r2, #1
 80019e8:	494c      	ldr	r1, [pc, #304]	; (8001b1c <HAL_UART_RxCpltCallback+0x204>)
 80019ea:	484d      	ldr	r0, [pc, #308]	; (8001b20 <HAL_UART_RxCpltCallback+0x208>)
 80019ec:	f005 fd64 	bl	80074b8 <HAL_UART_Receive_IT>

	}

	if(huart->Instance == UART5)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a4b      	ldr	r2, [pc, #300]	; (8001b24 <HAL_UART_RxCpltCallback+0x20c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d115      	bne.n	8001a26 <HAL_UART_RxCpltCallback+0x10e>
	{
		_COM5_rx_timeout_count = 0;
 80019fa:	4b4b      	ldr	r3, [pc, #300]	; (8001b28 <HAL_UART_RxCpltCallback+0x210>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
		_COM5_tx_timeout_count =0;
 8001a00:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <HAL_UART_RxCpltCallback+0x214>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(RX_5_RX_LED_GPIO_Port, RX_5_RX_LED_Pin,RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a0c:	4833      	ldr	r0, [pc, #204]	; (8001adc <HAL_UART_RxCpltCallback+0x1c4>)
 8001a0e:	f003 fba1 	bl	8005154 <HAL_GPIO_WritePin>

		OnUart5_Recv(COM5_data);
 8001a12:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_UART_RxCpltCallback+0x218>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f8f4 	bl	8001c04 <OnUart5_Recv>
		HAL_UART_Receive_IT(&huart5, &COM5_data, 1);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4944      	ldr	r1, [pc, #272]	; (8001b30 <HAL_UART_RxCpltCallback+0x218>)
 8001a20:	4844      	ldr	r0, [pc, #272]	; (8001b34 <HAL_UART_RxCpltCallback+0x21c>)
 8001a22:	f005 fd49 	bl	80074b8 <HAL_UART_Receive_IT>

	}

	if(huart->Instance == USART6)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a43      	ldr	r2, [pc, #268]	; (8001b38 <HAL_UART_RxCpltCallback+0x220>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d115      	bne.n	8001a5c <HAL_UART_RxCpltCallback+0x144>
	{

		_COM6_rx_timeout_count = 0;
 8001a30:	4b42      	ldr	r3, [pc, #264]	; (8001b3c <HAL_UART_RxCpltCallback+0x224>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
		_COM6_tx_timeout_count =0;
 8001a36:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <HAL_UART_RxCpltCallback+0x228>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(RX_6_RX_LED_GPIO_Port, RX_6_RX_LED_Pin,RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a42:	4826      	ldr	r0, [pc, #152]	; (8001adc <HAL_UART_RxCpltCallback+0x1c4>)
 8001a44:	f003 fb86 	bl	8005154 <HAL_GPIO_WritePin>

		OnUart6_Recv(COM6_data);
 8001a48:	4b3e      	ldr	r3, [pc, #248]	; (8001b44 <HAL_UART_RxCpltCallback+0x22c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 f8eb 	bl	8001c28 <OnUart6_Recv>
		HAL_UART_Receive_IT(&huart6, &COM6_data, 1);
 8001a52:	2201      	movs	r2, #1
 8001a54:	493b      	ldr	r1, [pc, #236]	; (8001b44 <HAL_UART_RxCpltCallback+0x22c>)
 8001a56:	483c      	ldr	r0, [pc, #240]	; (8001b48 <HAL_UART_RxCpltCallback+0x230>)
 8001a58:	f005 fd2e 	bl	80074b8 <HAL_UART_Receive_IT>

	}

	if(huart->Instance == UART7)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a3a      	ldr	r2, [pc, #232]	; (8001b4c <HAL_UART_RxCpltCallback+0x234>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d115      	bne.n	8001a92 <HAL_UART_RxCpltCallback+0x17a>
	{
		_COM7_rx_timeout_count = 0;
 8001a66:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <HAL_UART_RxCpltCallback+0x238>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
		_COM7_tx_timeout_count =0;
 8001a6c:	4b39      	ldr	r3, [pc, #228]	; (8001b54 <HAL_UART_RxCpltCallback+0x23c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(RX_7_RX_LED_GPIO_Port, RX_7_RX_LED_Pin,RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a78:	4818      	ldr	r0, [pc, #96]	; (8001adc <HAL_UART_RxCpltCallback+0x1c4>)
 8001a7a:	f003 fb6b 	bl	8005154 <HAL_GPIO_WritePin>

		OnUart7_Recv(COM7_data);
 8001a7e:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <HAL_UART_RxCpltCallback+0x240>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f8e2 	bl	8001c4c <OnUart7_Recv>
		HAL_UART_Receive_IT(&huart7, &COM7_data, 1);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4933      	ldr	r1, [pc, #204]	; (8001b58 <HAL_UART_RxCpltCallback+0x240>)
 8001a8c:	4833      	ldr	r0, [pc, #204]	; (8001b5c <HAL_UART_RxCpltCallback+0x244>)
 8001a8e:	f005 fd13 	bl	80074b8 <HAL_UART_Receive_IT>


	}

	if(huart->Instance == UART8)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a32      	ldr	r2, [pc, #200]	; (8001b60 <HAL_UART_RxCpltCallback+0x248>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d115      	bne.n	8001ac8 <HAL_UART_RxCpltCallback+0x1b0>
	{
		_COM8_rx_timeout_count = 0;
 8001a9c:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_UART_RxCpltCallback+0x24c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
		_COM8_tx_timeout_count =0;
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <HAL_UART_RxCpltCallback+0x250>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(RX_8_RX_LED_GPIO_Port, RX_8_RX_LED_Pin,RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aae:	480b      	ldr	r0, [pc, #44]	; (8001adc <HAL_UART_RxCpltCallback+0x1c4>)
 8001ab0:	f003 fb50 	bl	8005154 <HAL_GPIO_WritePin>

		OnUart8_Recv(COM8_data);
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <HAL_UART_RxCpltCallback+0x254>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f000 f8d9 	bl	8001c70 <OnUart8_Recv>
		HAL_UART_Receive_IT(&huart8, &COM8_data, 1);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	492a      	ldr	r1, [pc, #168]	; (8001b6c <HAL_UART_RxCpltCallback+0x254>)
 8001ac2:	482b      	ldr	r0, [pc, #172]	; (8001b70 <HAL_UART_RxCpltCallback+0x258>)
 8001ac4:	f005 fcf8 	bl	80074b8 <HAL_UART_Receive_IT>

	}



}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40011000 	.word	0x40011000
 8001ad4:	20000d20 	.word	0x20000d20
 8001ad8:	20000d40 	.word	0x20000d40
 8001adc:	40021800 	.word	0x40021800
 8001ae0:	20000c04 	.word	0x20000c04
 8001ae4:	20000240 	.word	0x20000240
 8001ae8:	40004400 	.word	0x40004400
 8001aec:	20000d24 	.word	0x20000d24
 8001af0:	20000d44 	.word	0x20000d44
 8001af4:	20000c05 	.word	0x20000c05
 8001af8:	20000288 	.word	0x20000288
 8001afc:	40004800 	.word	0x40004800
 8001b00:	20000d28 	.word	0x20000d28
 8001b04:	20000d48 	.word	0x20000d48
 8001b08:	20000c06 	.word	0x20000c06
 8001b0c:	200002d0 	.word	0x200002d0
 8001b10:	40004c00 	.word	0x40004c00
 8001b14:	20000d2c 	.word	0x20000d2c
 8001b18:	20000d4c 	.word	0x20000d4c
 8001b1c:	20000c07 	.word	0x20000c07
 8001b20:	20000120 	.word	0x20000120
 8001b24:	40005000 	.word	0x40005000
 8001b28:	20000d30 	.word	0x20000d30
 8001b2c:	20000d50 	.word	0x20000d50
 8001b30:	20000c08 	.word	0x20000c08
 8001b34:	20000168 	.word	0x20000168
 8001b38:	40011400 	.word	0x40011400
 8001b3c:	20000d34 	.word	0x20000d34
 8001b40:	20000d54 	.word	0x20000d54
 8001b44:	20000c09 	.word	0x20000c09
 8001b48:	20000318 	.word	0x20000318
 8001b4c:	40007800 	.word	0x40007800
 8001b50:	20000d38 	.word	0x20000d38
 8001b54:	20000d58 	.word	0x20000d58
 8001b58:	20000c0a 	.word	0x20000c0a
 8001b5c:	200001b0 	.word	0x200001b0
 8001b60:	40007c00 	.word	0x40007c00
 8001b64:	20000d3c 	.word	0x20000d3c
 8001b68:	20000d5c 	.word	0x20000d5c
 8001b6c:	20000c0b 	.word	0x20000c0b
 8001b70:	200001f8 	.word	0x200001f8

08001b74 <OnUart1_Recv>:
//////////////////////////////////UART circular buf write///////////////////////////////////////////



void OnUart1_Recv (cx_uint8_t ch)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
	ringbuf_write (&g_uart1_rxringbuf, &ch, 1);
 8001b7e:	1dfb      	adds	r3, r7, #7
 8001b80:	2201      	movs	r2, #1
 8001b82:	4619      	mov	r1, r3
 8001b84:	4803      	ldr	r0, [pc, #12]	; (8001b94 <OnUart1_Recv+0x20>)
 8001b86:	f002 fad2 	bl	800412e <ringbuf_write>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000364 	.word	0x20000364

08001b98 <OnUart2_Recv>:
void OnUart2_Recv (cx_uint8_t ch)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
	ringbuf_write (&g_uart2_rxringbuf, &ch, 1);
 8001ba2:	1dfb      	adds	r3, r7, #7
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <OnUart2_Recv+0x20>)
 8001baa:	f002 fac0 	bl	800412e <ringbuf_write>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000478 	.word	0x20000478

08001bbc <OnUart3_Recv>:
void OnUart3_Recv (cx_uint8_t ch)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
	ringbuf_write (&g_uart3_rxringbuf, &ch, 1);
 8001bc6:	1dfb      	adds	r3, r7, #7
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4803      	ldr	r0, [pc, #12]	; (8001bdc <OnUart3_Recv+0x20>)
 8001bce:	f002 faae 	bl	800412e <ringbuf_write>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2000058c 	.word	0x2000058c

08001be0 <OnUart4_Recv>:
void OnUart4_Recv (cx_uint8_t ch)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
	ringbuf_write (&g_uart4_rxringbuf, &ch, 1);
 8001bea:	1dfb      	adds	r3, r7, #7
 8001bec:	2201      	movs	r2, #1
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <OnUart4_Recv+0x20>)
 8001bf2:	f002 fa9c 	bl	800412e <ringbuf_write>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200006a0 	.word	0x200006a0

08001c04 <OnUart5_Recv>:
void OnUart5_Recv (cx_uint8_t ch)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
	ringbuf_write (&g_uart5_rxringbuf, &ch, 1);
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	2201      	movs	r2, #1
 8001c12:	4619      	mov	r1, r3
 8001c14:	4803      	ldr	r0, [pc, #12]	; (8001c24 <OnUart5_Recv+0x20>)
 8001c16:	f002 fa8a 	bl	800412e <ringbuf_write>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200007b4 	.word	0x200007b4

08001c28 <OnUart6_Recv>:
void OnUart6_Recv (cx_uint8_t ch)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
	ringbuf_write (&g_uart6_rxringbuf, &ch, 1);
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	2201      	movs	r2, #1
 8001c36:	4619      	mov	r1, r3
 8001c38:	4803      	ldr	r0, [pc, #12]	; (8001c48 <OnUart6_Recv+0x20>)
 8001c3a:	f002 fa78 	bl	800412e <ringbuf_write>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200008c8 	.word	0x200008c8

08001c4c <OnUart7_Recv>:
void OnUart7_Recv (cx_uint8_t ch)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
	ringbuf_write (&g_uart7_rxringbuf, &ch, 1);
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4803      	ldr	r0, [pc, #12]	; (8001c6c <OnUart7_Recv+0x20>)
 8001c5e:	f002 fa66 	bl	800412e <ringbuf_write>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200009dc 	.word	0x200009dc

08001c70 <OnUart8_Recv>:
void OnUart8_Recv (cx_uint8_t ch)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
	ringbuf_write (&g_uart8_rxringbuf, &ch, 1);
 8001c7a:	1dfb      	adds	r3, r7, #7
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4803      	ldr	r0, [pc, #12]	; (8001c90 <OnUart8_Recv+0x20>)
 8001c82:	f002 fa54 	bl	800412e <ringbuf_write>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000af0 	.word	0x20000af0

08001c94 <fcs_rx>:

//////////////////////////////////Receive packet verify//////////////////////////////////////////////////////////////////////////////////////
cx_uint8_t fcs_rx(uint8_t* data, cx_uint16_t len)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	807b      	strh	r3, [r7, #2]
	cx_uint16_t i;
	cx_uint8_t ch;


	ch = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < len; i++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	81fb      	strh	r3, [r7, #14]
 8001ca8:	e009      	b.n	8001cbe <fcs_rx+0x2a>
	{

		ch += data[i];
 8001caa:	89fb      	ldrh	r3, [r7, #14]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	7b7b      	ldrb	r3, [r7, #13]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	737b      	strb	r3, [r7, #13]
	for (i = 0; i < len; i++)
 8001cb8:	89fb      	ldrh	r3, [r7, #14]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	81fb      	strh	r3, [r7, #14]
 8001cbe:	89fa      	ldrh	r2, [r7, #14]
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d3f1      	bcc.n	8001caa <fcs_rx+0x16>
	}

	ch += 0x20;
 8001cc6:	7b7b      	ldrb	r3, [r7, #13]
 8001cc8:	3320      	adds	r3, #32
 8001cca:	737b      	strb	r3, [r7, #13]

	return ch;
 8001ccc:	7b7b      	ldrb	r3, [r7, #13]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <fcs_conv>:

cx_uint8_t fcs_conv(uint8_t data)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	uint8_t ch;

	ch = data&0x0F;
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	73bb      	strb	r3, [r7, #14]
	//value = data;
	if(data>9)
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	2b09      	cmp	r3, #9
 8001cf2:	d90d      	bls.n	8001d10 <fcs_conv+0x34>
	{
		value = 'A'+(ch%10);
 8001cf4:	7bba      	ldrb	r2, [r7, #14]
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <fcs_conv+0x48>)
 8001cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8001cfc:	08d9      	lsrs	r1, r3, #3
 8001cfe:	460b      	mov	r3, r1
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	3341      	adds	r3, #65	; 0x41
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	e002      	b.n	8001d16 <fcs_conv+0x3a>
	}
	else
	{
		value = '0'+ch;
 8001d10:	7bbb      	ldrb	r3, [r7, #14]
 8001d12:	3330      	adds	r3, #48	; 0x30
 8001d14:	73fb      	strb	r3, [r7, #15]
	}


	return value;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	cccccccd 	.word	0xcccccccd

08001d28 <Packet_Verify>:

cx_uint32_t Packet_Verify(cx_uint8_t* bufptr, cx_uint32_t bufsize, cx_uint32_t max, cx_uint32_t* packetsize)
{
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	603b      	str	r3, [r7, #0]

		cx_uint8_t etx;
		cx_uint8_t stx;
		cx_uint8_t chk;

		offset = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
		result = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]




		if (bufsize>max)
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d84c      	bhi.n	8001de0 <Packet_Verify+0xb8>
		{
			goto cleanup;
		}

		etx = bufptr[bufsize-1];
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	75fb      	strb	r3, [r7, #23]

		stx = bufptr[offset];
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	4413      	add	r3, r2
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	75bb      	strb	r3, [r7, #22]
		if (stx!=0x02)
 8001d5c:	7dbb      	ldrb	r3, [r7, #22]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d003      	beq.n	8001d6a <Packet_Verify+0x42>
		{
			offset+=1;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3301      	adds	r3, #1
 8001d66:	61fb      	str	r3, [r7, #28]
			goto cleanup;
 8001d68:	e03b      	b.n	8001de2 <Packet_Verify+0xba>
		}

		if (etx!=0x0A)
 8001d6a:	7dfb      	ldrb	r3, [r7, #23]
 8001d6c:	2b0a      	cmp	r3, #10
 8001d6e:	d003      	beq.n	8001d78 <Packet_Verify+0x50>
		{
			offset+=1;
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	3301      	adds	r3, #1
 8001d74:	61fb      	str	r3, [r7, #28]
			goto cleanup;
 8001d76:	e034      	b.n	8001de2 <Packet_Verify+0xba>
		}

		chk = fcs_rx(&bufptr[bufsize-45], 40);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3b2d      	subs	r3, #45	; 0x2d
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	2128      	movs	r1, #40	; 0x28
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ff86 	bl	8001c94 <fcs_rx>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	757b      	strb	r3, [r7, #21]

		if (bufptr[bufsize-5]!=fcs_conv(chk>>4))
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	3b05      	subs	r3, #5
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	781c      	ldrb	r4, [r3, #0]
 8001d96:	7d7b      	ldrb	r3, [r7, #21]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff9d 	bl	8001cdc <fcs_conv>
 8001da2:	4603      	mov	r3, r0
 8001da4:	429c      	cmp	r4, r3
 8001da6:	d003      	beq.n	8001db0 <Packet_Verify+0x88>
		{
			offset+=1;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	3301      	adds	r3, #1
 8001dac:	61fb      	str	r3, [r7, #28]
			goto cleanup;
 8001dae:	e018      	b.n	8001de2 <Packet_Verify+0xba>
		}

		if (bufptr[bufsize-4]!=fcs_conv(chk&0x0f))
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	3b04      	subs	r3, #4
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4413      	add	r3, r2
 8001db8:	781c      	ldrb	r4, [r3, #0]
 8001dba:	7d7b      	ldrb	r3, [r7, #21]
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff8a 	bl	8001cdc <fcs_conv>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	429c      	cmp	r4, r3
 8001dcc:	d003      	beq.n	8001dd6 <Packet_Verify+0xae>
		{
			offset+=1;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	61fb      	str	r3, [r7, #28]
			goto cleanup;
 8001dd4:	e005      	b.n	8001de2 <Packet_Verify+0xba>
		}


		offset = bufsize;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	61fb      	str	r3, [r7, #28]
		result = 1;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	e000      	b.n	8001de2 <Packet_Verify+0xba>
			goto cleanup;
 8001de0:	bf00      	nop

cleanup:
	if (packetsize)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <Packet_Verify+0xc6>
	{
	*packetsize = offset;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	601a      	str	r2, [r3, #0]
	}

		return result;
 8001dee:	69bb      	ldr	r3, [r7, #24]



}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3724      	adds	r7, #36	; 0x24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd90      	pop	{r4, r7, pc}

08001df8 <POW>:

cx_uint16_t POW(cx_uint16_t a, cx_uint16_t b)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	460a      	mov	r2, r1
 8001e02:	80fb      	strh	r3, [r7, #6]
 8001e04:	4613      	mov	r3, r2
 8001e06:	80bb      	strh	r3, [r7, #4]
	cx_uint16_t i, pow = 1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < b; i++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	81fb      	strh	r3, [r7, #14]
 8001e10:	e007      	b.n	8001e22 <POW+0x2a>

	pow *= a;
 8001e12:	89ba      	ldrh	r2, [r7, #12]
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	fb12 f303 	smulbb	r3, r2, r3
 8001e1a:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < b; i++)
 8001e1c:	89fb      	ldrh	r3, [r7, #14]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	81fb      	strh	r3, [r7, #14]
 8001e22:	89fa      	ldrh	r2, [r7, #14]
 8001e24:	88bb      	ldrh	r3, [r7, #4]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3f3      	bcc.n	8001e12 <POW+0x1a>
	return pow;
 8001e2a:	89bb      	ldrh	r3, [r7, #12]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <uartinput1>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////UART input process////////////////////////////////////////////////////////

void uartinput1(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	static cx_uint8_t buf[46];
	static cx_uint8_t size =0;
	static cx_uint_t  max  = 46;
	static cx_uint32_t  offset =0;

	while (ringbuf_get_readable_space(&g_uart1_rxringbuf) >= 46)
 8001e3c:	e029      	b.n	8001e92 <uartinput1+0x5a>
	{
		size = ringbuf_peek(&g_uart1_rxringbuf, buf, max);
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <uartinput1+0x70>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	4919      	ldr	r1, [pc, #100]	; (8001eac <uartinput1+0x74>)
 8001e46:	481a      	ldr	r0, [pc, #104]	; (8001eb0 <uartinput1+0x78>)
 8001e48:	f002 f8ae 	bl	8003fa8 <ringbuf_peek>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <uartinput1+0x7c>)
 8001e52:	701a      	strb	r2, [r3, #0]

		if(Packet_Verify(buf, size, max, &offset))
 8001e54:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <uartinput1+0x7c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <uartinput1+0x70>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <uartinput1+0x80>)
 8001e60:	4812      	ldr	r0, [pc, #72]	; (8001eac <uartinput1+0x74>)
 8001e62:	f7ff ff61 	bl	8001d28 <Packet_Verify>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <uartinput1+0x44>
		{
			COM_Input_Parse1(buf, max, 1);
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <uartinput1+0x70>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4619      	mov	r1, r3
 8001e74:	480d      	ldr	r0, [pc, #52]	; (8001eac <uartinput1+0x74>)
 8001e76:	f000 f9ef 	bl	8002258 <COM_Input_Parse1>
 8001e7a:	e003      	b.n	8001e84 <uartinput1+0x4c>
		}

		else
		{
			if (0==offset)
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <uartinput1+0x80>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00d      	beq.n	8001ea0 <uartinput1+0x68>
			{
				break;
			}
		}
		ringbuf_read (&g_uart1_rxringbuf, buf, offset);
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <uartinput1+0x80>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4908      	ldr	r1, [pc, #32]	; (8001eac <uartinput1+0x74>)
 8001e8c:	4808      	ldr	r0, [pc, #32]	; (8001eb0 <uartinput1+0x78>)
 8001e8e:	f002 f8eb 	bl	8004068 <ringbuf_read>
	while (ringbuf_get_readable_space(&g_uart1_rxringbuf) >= 46)
 8001e92:	4807      	ldr	r0, [pc, #28]	; (8001eb0 <uartinput1+0x78>)
 8001e94:	f002 f83c 	bl	8003f10 <ringbuf_get_readable_space>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b2d      	cmp	r3, #45	; 0x2d
 8001e9c:	d8cf      	bhi.n	8001e3e <uartinput1+0x6>


	}
}
 8001e9e:	e000      	b.n	8001ea2 <uartinput1+0x6a>
				break;
 8001ea0:	bf00      	nop
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000028 	.word	0x20000028
 8001eac:	20000d60 	.word	0x20000d60
 8001eb0:	20000364 	.word	0x20000364
 8001eb4:	20000d8e 	.word	0x20000d8e
 8001eb8:	20000d90 	.word	0x20000d90

08001ebc <uartinput2>:
void uartinput2(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	static cx_uint8_t buf[46];
	static cx_uint8_t size   = 0;
	static cx_uint_t  max    = 46;
	static cx_uint32_t  offset =0;

	while (ringbuf_get_readable_space(&g_uart2_rxringbuf) >= 46)
 8001ec0:	e029      	b.n	8001f16 <uartinput2+0x5a>
	{
		size = ringbuf_peek(&g_uart2_rxringbuf, buf, max);
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <uartinput2+0x70>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4919      	ldr	r1, [pc, #100]	; (8001f30 <uartinput2+0x74>)
 8001eca:	481a      	ldr	r0, [pc, #104]	; (8001f34 <uartinput2+0x78>)
 8001ecc:	f002 f86c 	bl	8003fa8 <ringbuf_peek>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <uartinput2+0x7c>)
 8001ed6:	701a      	strb	r2, [r3, #0]

		if(Packet_Verify(buf, size, max, &offset))
 8001ed8:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <uartinput2+0x7c>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4619      	mov	r1, r3
 8001ede:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <uartinput2+0x70>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <uartinput2+0x80>)
 8001ee4:	4812      	ldr	r0, [pc, #72]	; (8001f30 <uartinput2+0x74>)
 8001ee6:	f7ff ff1f 	bl	8001d28 <Packet_Verify>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d007      	beq.n	8001f00 <uartinput2+0x44>
		{
			COM_Input_Parse2(buf, max, 2);
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <uartinput2+0x70>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480d      	ldr	r0, [pc, #52]	; (8001f30 <uartinput2+0x74>)
 8001efa:	f000 fafd 	bl	80024f8 <COM_Input_Parse2>
 8001efe:	e003      	b.n	8001f08 <uartinput2+0x4c>
		}

		else
		{
			if (0==offset)
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <uartinput2+0x80>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00d      	beq.n	8001f24 <uartinput2+0x68>
			{
				break;
			}
		}
		ringbuf_read (&g_uart2_rxringbuf, buf, offset);
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <uartinput2+0x80>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4908      	ldr	r1, [pc, #32]	; (8001f30 <uartinput2+0x74>)
 8001f10:	4808      	ldr	r0, [pc, #32]	; (8001f34 <uartinput2+0x78>)
 8001f12:	f002 f8a9 	bl	8004068 <ringbuf_read>
	while (ringbuf_get_readable_space(&g_uart2_rxringbuf) >= 46)
 8001f16:	4807      	ldr	r0, [pc, #28]	; (8001f34 <uartinput2+0x78>)
 8001f18:	f001 fffa 	bl	8003f10 <ringbuf_get_readable_space>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b2d      	cmp	r3, #45	; 0x2d
 8001f20:	d8cf      	bhi.n	8001ec2 <uartinput2+0x6>


	}
}
 8001f22:	e000      	b.n	8001f26 <uartinput2+0x6a>
				break;
 8001f24:	bf00      	nop
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000002c 	.word	0x2000002c
 8001f30:	20000d94 	.word	0x20000d94
 8001f34:	20000478 	.word	0x20000478
 8001f38:	20000dc2 	.word	0x20000dc2
 8001f3c:	20000dc4 	.word	0x20000dc4

08001f40 <uartinput3>:

void uartinput3(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	static cx_uint8_t size =0;
	static cx_uint_t  max  = 46;
	static cx_uint32_t  offset =0;


	while (ringbuf_get_readable_space(&g_uart3_rxringbuf) >= 46)
 8001f44:	e029      	b.n	8001f9a <uartinput3+0x5a>
	{
		size = ringbuf_peek(&g_uart3_rxringbuf, buf, max);
 8001f46:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <uartinput3+0x70>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4919      	ldr	r1, [pc, #100]	; (8001fb4 <uartinput3+0x74>)
 8001f4e:	481a      	ldr	r0, [pc, #104]	; (8001fb8 <uartinput3+0x78>)
 8001f50:	f002 f82a 	bl	8003fa8 <ringbuf_peek>
 8001f54:	4603      	mov	r3, r0
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <uartinput3+0x7c>)
 8001f5a:	701a      	strb	r2, [r3, #0]

		if(Packet_Verify(buf, size, max, &offset))
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <uartinput3+0x7c>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <uartinput3+0x70>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <uartinput3+0x80>)
 8001f68:	4812      	ldr	r0, [pc, #72]	; (8001fb4 <uartinput3+0x74>)
 8001f6a:	f7ff fedd 	bl	8001d28 <Packet_Verify>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <uartinput3+0x44>
		{
			COM_Input_Parse3(buf, max, 3);
 8001f74:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <uartinput3+0x70>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2203      	movs	r2, #3
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <uartinput3+0x74>)
 8001f7e:	f000 fc0b 	bl	8002798 <COM_Input_Parse3>
 8001f82:	e003      	b.n	8001f8c <uartinput3+0x4c>
		}

		else
		{
			if (0==offset)
 8001f84:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <uartinput3+0x80>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00d      	beq.n	8001fa8 <uartinput3+0x68>
			{
				break;
			}
		}
		ringbuf_read (&g_uart3_rxringbuf, buf, offset);
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <uartinput3+0x80>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4908      	ldr	r1, [pc, #32]	; (8001fb4 <uartinput3+0x74>)
 8001f94:	4808      	ldr	r0, [pc, #32]	; (8001fb8 <uartinput3+0x78>)
 8001f96:	f002 f867 	bl	8004068 <ringbuf_read>
	while (ringbuf_get_readable_space(&g_uart3_rxringbuf) >= 46)
 8001f9a:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <uartinput3+0x78>)
 8001f9c:	f001 ffb8 	bl	8003f10 <ringbuf_get_readable_space>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b2d      	cmp	r3, #45	; 0x2d
 8001fa4:	d8cf      	bhi.n	8001f46 <uartinput3+0x6>


	}
}
 8001fa6:	e000      	b.n	8001faa <uartinput3+0x6a>
				break;
 8001fa8:	bf00      	nop
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000030 	.word	0x20000030
 8001fb4:	20000dc8 	.word	0x20000dc8
 8001fb8:	2000058c 	.word	0x2000058c
 8001fbc:	20000df6 	.word	0x20000df6
 8001fc0:	20000df8 	.word	0x20000df8

08001fc4 <uartinput4>:

void uartinput4(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	static cx_uint_t  max  = 46;
	static cx_uint32_t  offset =0;



	while (ringbuf_get_readable_space(&g_uart4_rxringbuf) >= 46)
 8001fc8:	e029      	b.n	800201e <uartinput4+0x5a>
	{
		size = ringbuf_peek(&g_uart4_rxringbuf, buf, max);
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <uartinput4+0x70>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4919      	ldr	r1, [pc, #100]	; (8002038 <uartinput4+0x74>)
 8001fd2:	481a      	ldr	r0, [pc, #104]	; (800203c <uartinput4+0x78>)
 8001fd4:	f001 ffe8 	bl	8003fa8 <ringbuf_peek>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b18      	ldr	r3, [pc, #96]	; (8002040 <uartinput4+0x7c>)
 8001fde:	701a      	strb	r2, [r3, #0]

		if(Packet_Verify(buf, size, max, &offset))
 8001fe0:	4b17      	ldr	r3, [pc, #92]	; (8002040 <uartinput4+0x7c>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <uartinput4+0x70>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <uartinput4+0x80>)
 8001fec:	4812      	ldr	r0, [pc, #72]	; (8002038 <uartinput4+0x74>)
 8001fee:	f7ff fe9b 	bl	8001d28 <Packet_Verify>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d007      	beq.n	8002008 <uartinput4+0x44>
		{
			COM_Input_Parse4(buf, max, 4);
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <uartinput4+0x70>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	480d      	ldr	r0, [pc, #52]	; (8002038 <uartinput4+0x74>)
 8002002:	f000 fd19 	bl	8002a38 <COM_Input_Parse4>
 8002006:	e003      	b.n	8002010 <uartinput4+0x4c>
		}

		else
		{
			if (0==offset)
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <uartinput4+0x80>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00d      	beq.n	800202c <uartinput4+0x68>
			{
				break;
			}
		}
		ringbuf_read (&g_uart4_rxringbuf, buf, offset);
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <uartinput4+0x80>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4908      	ldr	r1, [pc, #32]	; (8002038 <uartinput4+0x74>)
 8002018:	4808      	ldr	r0, [pc, #32]	; (800203c <uartinput4+0x78>)
 800201a:	f002 f825 	bl	8004068 <ringbuf_read>
	while (ringbuf_get_readable_space(&g_uart4_rxringbuf) >= 46)
 800201e:	4807      	ldr	r0, [pc, #28]	; (800203c <uartinput4+0x78>)
 8002020:	f001 ff76 	bl	8003f10 <ringbuf_get_readable_space>
 8002024:	4603      	mov	r3, r0
 8002026:	2b2d      	cmp	r3, #45	; 0x2d
 8002028:	d8cf      	bhi.n	8001fca <uartinput4+0x6>


	}
}
 800202a:	e000      	b.n	800202e <uartinput4+0x6a>
				break;
 800202c:	bf00      	nop
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000034 	.word	0x20000034
 8002038:	20000dfc 	.word	0x20000dfc
 800203c:	200006a0 	.word	0x200006a0
 8002040:	20000e2a 	.word	0x20000e2a
 8002044:	20000e2c 	.word	0x20000e2c

08002048 <uartinput5>:


void uartinput5(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	static cx_uint8_t buf[46];
	static cx_uint8_t size =0;
	static cx_uint_t  max  = 46;
	static cx_uint32_t  offset =0;

	while (ringbuf_get_readable_space(&g_uart5_rxringbuf) >= 46)
 800204c:	e029      	b.n	80020a2 <uartinput5+0x5a>
	{
		size = ringbuf_peek(&g_uart5_rxringbuf, buf, max);
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <uartinput5+0x70>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	4919      	ldr	r1, [pc, #100]	; (80020bc <uartinput5+0x74>)
 8002056:	481a      	ldr	r0, [pc, #104]	; (80020c0 <uartinput5+0x78>)
 8002058:	f001 ffa6 	bl	8003fa8 <ringbuf_peek>
 800205c:	4603      	mov	r3, r0
 800205e:	b2da      	uxtb	r2, r3
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <uartinput5+0x7c>)
 8002062:	701a      	strb	r2, [r3, #0]

		if(Packet_Verify(buf, size, max, &offset))
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <uartinput5+0x7c>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <uartinput5+0x70>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <uartinput5+0x80>)
 8002070:	4812      	ldr	r0, [pc, #72]	; (80020bc <uartinput5+0x74>)
 8002072:	f7ff fe59 	bl	8001d28 <Packet_Verify>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <uartinput5+0x44>
		{
			COM_Input_Parse5(buf, max, 5);
 800207c:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <uartinput5+0x70>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2205      	movs	r2, #5
 8002082:	4619      	mov	r1, r3
 8002084:	480d      	ldr	r0, [pc, #52]	; (80020bc <uartinput5+0x74>)
 8002086:	f000 fe27 	bl	8002cd8 <COM_Input_Parse5>
 800208a:	e003      	b.n	8002094 <uartinput5+0x4c>
		}

		else
		{
			if (0==offset)
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <uartinput5+0x80>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00d      	beq.n	80020b0 <uartinput5+0x68>
			{
				break;
			}
		}
		ringbuf_read (&g_uart5_rxringbuf, buf, offset);
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <uartinput5+0x80>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	4908      	ldr	r1, [pc, #32]	; (80020bc <uartinput5+0x74>)
 800209c:	4808      	ldr	r0, [pc, #32]	; (80020c0 <uartinput5+0x78>)
 800209e:	f001 ffe3 	bl	8004068 <ringbuf_read>
	while (ringbuf_get_readable_space(&g_uart5_rxringbuf) >= 46)
 80020a2:	4807      	ldr	r0, [pc, #28]	; (80020c0 <uartinput5+0x78>)
 80020a4:	f001 ff34 	bl	8003f10 <ringbuf_get_readable_space>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b2d      	cmp	r3, #45	; 0x2d
 80020ac:	d8cf      	bhi.n	800204e <uartinput5+0x6>


	}
}
 80020ae:	e000      	b.n	80020b2 <uartinput5+0x6a>
				break;
 80020b0:	bf00      	nop
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000038 	.word	0x20000038
 80020bc:	20000e30 	.word	0x20000e30
 80020c0:	200007b4 	.word	0x200007b4
 80020c4:	20000e5e 	.word	0x20000e5e
 80020c8:	20000e60 	.word	0x20000e60

080020cc <uartinput6>:
void uartinput6(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	static cx_uint8_t buf[46];
	static cx_uint8_t size =0;
	static cx_uint_t  max  = 46;
	static cx_uint32_t  offset =0;

	while (ringbuf_get_readable_space(&g_uart6_rxringbuf) >= 46)
 80020d0:	e029      	b.n	8002126 <uartinput6+0x5a>
	{
		size = ringbuf_peek(&g_uart6_rxringbuf, buf, max);
 80020d2:	4b1a      	ldr	r3, [pc, #104]	; (800213c <uartinput6+0x70>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	4919      	ldr	r1, [pc, #100]	; (8002140 <uartinput6+0x74>)
 80020da:	481a      	ldr	r0, [pc, #104]	; (8002144 <uartinput6+0x78>)
 80020dc:	f001 ff64 	bl	8003fa8 <ringbuf_peek>
 80020e0:	4603      	mov	r3, r0
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <uartinput6+0x7c>)
 80020e6:	701a      	strb	r2, [r3, #0]

		if(Packet_Verify(buf, size, max, &offset))
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <uartinput6+0x7c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	4b13      	ldr	r3, [pc, #76]	; (800213c <uartinput6+0x70>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b16      	ldr	r3, [pc, #88]	; (800214c <uartinput6+0x80>)
 80020f4:	4812      	ldr	r0, [pc, #72]	; (8002140 <uartinput6+0x74>)
 80020f6:	f7ff fe17 	bl	8001d28 <Packet_Verify>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d007      	beq.n	8002110 <uartinput6+0x44>
		{
			COM_Input_Parse6(buf, max, 6);
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <uartinput6+0x70>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2206      	movs	r2, #6
 8002106:	4619      	mov	r1, r3
 8002108:	480d      	ldr	r0, [pc, #52]	; (8002140 <uartinput6+0x74>)
 800210a:	f000 ff35 	bl	8002f78 <COM_Input_Parse6>
 800210e:	e003      	b.n	8002118 <uartinput6+0x4c>
		}

		else
		{
			if (0==offset)
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <uartinput6+0x80>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00d      	beq.n	8002134 <uartinput6+0x68>
			{
				break;
			}
		}
		ringbuf_read (&g_uart6_rxringbuf, buf, offset);
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <uartinput6+0x80>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4908      	ldr	r1, [pc, #32]	; (8002140 <uartinput6+0x74>)
 8002120:	4808      	ldr	r0, [pc, #32]	; (8002144 <uartinput6+0x78>)
 8002122:	f001 ffa1 	bl	8004068 <ringbuf_read>
	while (ringbuf_get_readable_space(&g_uart6_rxringbuf) >= 46)
 8002126:	4807      	ldr	r0, [pc, #28]	; (8002144 <uartinput6+0x78>)
 8002128:	f001 fef2 	bl	8003f10 <ringbuf_get_readable_space>
 800212c:	4603      	mov	r3, r0
 800212e:	2b2d      	cmp	r3, #45	; 0x2d
 8002130:	d8cf      	bhi.n	80020d2 <uartinput6+0x6>


	}
}
 8002132:	e000      	b.n	8002136 <uartinput6+0x6a>
				break;
 8002134:	bf00      	nop
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	2000003c 	.word	0x2000003c
 8002140:	20000e64 	.word	0x20000e64
 8002144:	200008c8 	.word	0x200008c8
 8002148:	20000e92 	.word	0x20000e92
 800214c:	20000e94 	.word	0x20000e94

08002150 <uartinput7>:

void uartinput7(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	static cx_uint8_t buf[46];
	static cx_uint8_t size =0;
	static cx_uint_t  max  = 46;
	static cx_uint32_t  offset =0;

	while (ringbuf_get_readable_space(&g_uart7_rxringbuf) >= 46)
 8002154:	e029      	b.n	80021aa <uartinput7+0x5a>
	{
		size = ringbuf_peek(&g_uart7_rxringbuf, buf, max);
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <uartinput7+0x70>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	4919      	ldr	r1, [pc, #100]	; (80021c4 <uartinput7+0x74>)
 800215e:	481a      	ldr	r0, [pc, #104]	; (80021c8 <uartinput7+0x78>)
 8002160:	f001 ff22 	bl	8003fa8 <ringbuf_peek>
 8002164:	4603      	mov	r3, r0
 8002166:	b2da      	uxtb	r2, r3
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <uartinput7+0x7c>)
 800216a:	701a      	strb	r2, [r3, #0]

		if(Packet_Verify(buf, size, max, &offset))
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <uartinput7+0x7c>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4619      	mov	r1, r3
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <uartinput7+0x70>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <uartinput7+0x80>)
 8002178:	4812      	ldr	r0, [pc, #72]	; (80021c4 <uartinput7+0x74>)
 800217a:	f7ff fdd5 	bl	8001d28 <Packet_Verify>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d007      	beq.n	8002194 <uartinput7+0x44>
		{
			COM_Input_Parse7(buf, max, 7);
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <uartinput7+0x70>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2207      	movs	r2, #7
 800218a:	4619      	mov	r1, r3
 800218c:	480d      	ldr	r0, [pc, #52]	; (80021c4 <uartinput7+0x74>)
 800218e:	f001 f843 	bl	8003218 <COM_Input_Parse7>
 8002192:	e003      	b.n	800219c <uartinput7+0x4c>
		}

		else
		{
			if (0==offset)
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <uartinput7+0x80>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00d      	beq.n	80021b8 <uartinput7+0x68>
			{
				break;
			}
		}
		ringbuf_read (&g_uart7_rxringbuf, buf, offset);
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <uartinput7+0x80>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	; (80021c4 <uartinput7+0x74>)
 80021a4:	4808      	ldr	r0, [pc, #32]	; (80021c8 <uartinput7+0x78>)
 80021a6:	f001 ff5f 	bl	8004068 <ringbuf_read>
	while (ringbuf_get_readable_space(&g_uart7_rxringbuf) >= 46)
 80021aa:	4807      	ldr	r0, [pc, #28]	; (80021c8 <uartinput7+0x78>)
 80021ac:	f001 feb0 	bl	8003f10 <ringbuf_get_readable_space>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b2d      	cmp	r3, #45	; 0x2d
 80021b4:	d8cf      	bhi.n	8002156 <uartinput7+0x6>


	}
}
 80021b6:	e000      	b.n	80021ba <uartinput7+0x6a>
				break;
 80021b8:	bf00      	nop
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000040 	.word	0x20000040
 80021c4:	20000e98 	.word	0x20000e98
 80021c8:	200009dc 	.word	0x200009dc
 80021cc:	20000ec6 	.word	0x20000ec6
 80021d0:	20000ec8 	.word	0x20000ec8

080021d4 <uartinput8>:

void uartinput8(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	static cx_uint8_t buf[46];
	static cx_uint8_t size =0;
	static cx_uint_t  max  = 46;
	static cx_uint32_t  offset =0;

	while (ringbuf_get_readable_space(&g_uart8_rxringbuf) >= 46)
 80021d8:	e029      	b.n	800222e <uartinput8+0x5a>
	{
		size = ringbuf_peek(&g_uart8_rxringbuf, buf, max);
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <uartinput8+0x70>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	4919      	ldr	r1, [pc, #100]	; (8002248 <uartinput8+0x74>)
 80021e2:	481a      	ldr	r0, [pc, #104]	; (800224c <uartinput8+0x78>)
 80021e4:	f001 fee0 	bl	8003fa8 <ringbuf_peek>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b18      	ldr	r3, [pc, #96]	; (8002250 <uartinput8+0x7c>)
 80021ee:	701a      	strb	r2, [r3, #0]

		if(Packet_Verify(buf, size, max, &offset))
 80021f0:	4b17      	ldr	r3, [pc, #92]	; (8002250 <uartinput8+0x7c>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	4619      	mov	r1, r3
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <uartinput8+0x70>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <uartinput8+0x80>)
 80021fc:	4812      	ldr	r0, [pc, #72]	; (8002248 <uartinput8+0x74>)
 80021fe:	f7ff fd93 	bl	8001d28 <Packet_Verify>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <uartinput8+0x44>
		{
			COM_Input_Parse8(buf, max, 8);
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <uartinput8+0x70>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2208      	movs	r2, #8
 800220e:	4619      	mov	r1, r3
 8002210:	480d      	ldr	r0, [pc, #52]	; (8002248 <uartinput8+0x74>)
 8002212:	f001 f951 	bl	80034b8 <COM_Input_Parse8>
 8002216:	e003      	b.n	8002220 <uartinput8+0x4c>
		}

		else
		{
			if (0==offset)
 8002218:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <uartinput8+0x80>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00d      	beq.n	800223c <uartinput8+0x68>
			{
				break;
			}
		}
		ringbuf_read (&g_uart8_rxringbuf, buf, offset);
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <uartinput8+0x80>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4908      	ldr	r1, [pc, #32]	; (8002248 <uartinput8+0x74>)
 8002228:	4808      	ldr	r0, [pc, #32]	; (800224c <uartinput8+0x78>)
 800222a:	f001 ff1d 	bl	8004068 <ringbuf_read>
	while (ringbuf_get_readable_space(&g_uart8_rxringbuf) >= 46)
 800222e:	4807      	ldr	r0, [pc, #28]	; (800224c <uartinput8+0x78>)
 8002230:	f001 fe6e 	bl	8003f10 <ringbuf_get_readable_space>
 8002234:	4603      	mov	r3, r0
 8002236:	2b2d      	cmp	r3, #45	; 0x2d
 8002238:	d8cf      	bhi.n	80021da <uartinput8+0x6>


	}
}
 800223a:	e000      	b.n	800223e <uartinput8+0x6a>
				break;
 800223c:	bf00      	nop
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000044 	.word	0x20000044
 8002248:	20000ecc 	.word	0x20000ecc
 800224c:	20000af0 	.word	0x20000af0
 8002250:	20000efa 	.word	0x20000efa
 8002254:	20000efc 	.word	0x20000efc

08002258 <COM_Input_Parse1>:


//////////////////////////////////////UARTbuffer to SPIbuffer//////////////////////////////////////////////////////////////////

void COM_Input_Parse1(cx_uint8_t* bufptr, cx_uint_t len, cx_uint_t com_port)
{
 8002258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
    cx_uint32_t m_val;

    // 변환할 값
    cx_uint16_t main_pulse_value;
    cx_uint16_t sub_pulse_value;
    cx_uint8_t inpuls_state = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	77fb      	strb	r3, [r7, #31]
    static cx_uint8_t prev_parsebuf[46] = {0, };
    // 정상 데이터 수신 확인 flag
    static cx_bool_t  bootup_flag = 0;

    // 랜덤 값 생성
    m_val = HAL_RNG_GetRandomNumber(&hrng);
 8002268:	4898      	ldr	r0, [pc, #608]	; (80024cc <COM_Input_Parse1+0x274>)
 800226a:	f003 fd0f 	bl	8005c8c <HAL_RNG_GetRandomNumber>
 800226e:	61b8      	str	r0, [r7, #24]

    static cx_uint8_t parsebuf[46];
    static cx_uint8_t val_savebuf[26];
    static cx_uint8_t hax_val_savebuf[2];
    static cx_uint8_t chk;
    chk =0;
 8002270:	4b97      	ldr	r3, [pc, #604]	; (80024d0 <COM_Input_Parse1+0x278>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]

    if (com_port == 1)  // COM1 처리
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b01      	cmp	r3, #1
 800227a:	f040 8122 	bne.w	80024c2 <COM_Input_Parse1+0x26a>
    {

        memcpy(parsebuf, bufptr, 46);
 800227e:	4a95      	ldr	r2, [pc, #596]	; (80024d4 <COM_Input_Parse1+0x27c>)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	461c      	mov	r4, r3
 8002284:	4616      	mov	r6, r2
 8002286:	f104 0c20 	add.w	ip, r4, #32
 800228a:	4635      	mov	r5, r6
 800228c:	4623      	mov	r3, r4
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	6859      	ldr	r1, [r3, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002298:	3410      	adds	r4, #16
 800229a:	3610      	adds	r6, #16
 800229c:	4564      	cmp	r4, ip
 800229e:	d1f4      	bne.n	800228a <COM_Input_Parse1+0x32>
 80022a0:	4633      	mov	r3, r6
 80022a2:	6820      	ldr	r0, [r4, #0]
 80022a4:	6861      	ldr	r1, [r4, #4]
 80022a6:	68a2      	ldr	r2, [r4, #8]
 80022a8:	c307      	stmia	r3!, {r0, r1, r2}
 80022aa:	89a2      	ldrh	r2, [r4, #12]
 80022ac:	801a      	strh	r2, [r3, #0]
        inpuls_state = parsebuf[3];
 80022ae:	4b89      	ldr	r3, [pc, #548]	; (80024d4 <COM_Input_Parse1+0x27c>)
 80022b0:	78db      	ldrb	r3, [r3, #3]
 80022b2:	77fb      	strb	r3, [r7, #31]

        if(inpuls_state != 0x34)
 80022b4:	7ffb      	ldrb	r3, [r7, #31]
 80022b6:	2b34      	cmp	r3, #52	; 0x34
 80022b8:	f000 8093 	beq.w	80023e2 <COM_Input_Parse1+0x18a>
        {
            if(parsebuf[4] == 0x30)
 80022bc:	4b85      	ldr	r3, [pc, #532]	; (80024d4 <COM_Input_Parse1+0x27c>)
 80022be:	791b      	ldrb	r3, [r3, #4]
 80022c0:	2b30      	cmp	r3, #48	; 0x30
 80022c2:	f040 8086 	bne.w	80023d2 <COM_Input_Parse1+0x17a>
            {

                if (bootup_flag < 10) // 4번 수신까지 순차적으로 감소
 80022c6:	4b84      	ldr	r3, [pc, #528]	; (80024d8 <COM_Input_Parse1+0x280>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b09      	cmp	r3, #9
 80022cc:	f200 8089 	bhi.w	80023e2 <COM_Input_Parse1+0x18a>
                {
                    memcpy(&parsebuf[0], &prev_parsebuf[0], 46); //기존 정상 데이터 호출
 80022d0:	222e      	movs	r2, #46	; 0x2e
 80022d2:	4982      	ldr	r1, [pc, #520]	; (80024dc <COM_Input_Parse1+0x284>)
 80022d4:	487f      	ldr	r0, [pc, #508]	; (80024d4 <COM_Input_Parse1+0x27c>)
 80022d6:	f006 f83f 	bl	8008358 <memcpy>
                    bootup_flag++;
 80022da:	4b7f      	ldr	r3, [pc, #508]	; (80024d8 <COM_Input_Parse1+0x280>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b7d      	ldr	r3, [pc, #500]	; (80024d8 <COM_Input_Parse1+0x280>)
 80022e4:	701a      	strb	r2, [r3, #0]

                    //변환이 필요한 정펄스값, 부펄스값 버퍼에 Overwrite
                    main_pulse_value = 380 - (10 + m_val)%30 - 15; // 기본 380 ~ 350 +- 15
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	f103 010a 	add.w	r1, r3, #10
 80022ec:	4b7c      	ldr	r3, [pc, #496]	; (80024e0 <COM_Input_Parse1+0x288>)
 80022ee:	fba3 2301 	umull	r2, r3, r3, r1
 80022f2:	091a      	lsrs	r2, r3, #4
 80022f4:	4613      	mov	r3, r2
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	1aca      	subs	r2, r1, r3
 80022fe:	b293      	uxth	r3, r2
 8002300:	f5c3 73b6 	rsb	r3, r3, #364	; 0x16c
 8002304:	3301      	adds	r3, #1
 8002306:	82fb      	strh	r3, [r7, #22]
                    sub_pulse_value = 80 - (20+ m_val)%30 - 15; // 기본 80 ~ 20 +- 15
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	f103 0114 	add.w	r1, r3, #20
 800230e:	4b74      	ldr	r3, [pc, #464]	; (80024e0 <COM_Input_Parse1+0x288>)
 8002310:	fba3 2301 	umull	r2, r3, r3, r1
 8002314:	091a      	lsrs	r2, r3, #4
 8002316:	4613      	mov	r3, r2
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	1aca      	subs	r2, r1, r3
 8002320:	b293      	uxth	r3, r2
 8002322:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8002326:	82bb      	strh	r3, [r7, #20]
                    //변환이 필요한 특정 바이트 값 오버라이트

                    for(i=0; i<3; i++)
 8002328:	4b6e      	ldr	r3, [pc, #440]	; (80024e4 <COM_Input_Parse1+0x28c>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
 800232e:	e021      	b.n	8002374 <COM_Input_Parse1+0x11c>
                    {
                        parsebuf[22+i]= main_pulse_value/POW(10,2)%10+'0';
 8002330:	2102      	movs	r1, #2
 8002332:	200a      	movs	r0, #10
 8002334:	f7ff fd60 	bl	8001df8 <POW>
 8002338:	4603      	mov	r3, r0
 800233a:	461a      	mov	r2, r3
 800233c:	8afb      	ldrh	r3, [r7, #22]
 800233e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b68      	ldr	r3, [pc, #416]	; (80024e8 <COM_Input_Parse1+0x290>)
 8002346:	fba3 1302 	umull	r1, r3, r3, r2
 800234a:	08d9      	lsrs	r1, r3, #3
 800234c:	460b      	mov	r3, r1
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	b29b      	uxth	r3, r3
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4b62      	ldr	r3, [pc, #392]	; (80024e4 <COM_Input_Parse1+0x28c>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	3316      	adds	r3, #22
 8002360:	3230      	adds	r2, #48	; 0x30
 8002362:	b2d1      	uxtb	r1, r2
 8002364:	4a5b      	ldr	r2, [pc, #364]	; (80024d4 <COM_Input_Parse1+0x27c>)
 8002366:	54d1      	strb	r1, [r2, r3]
                    for(i=0; i<3; i++)
 8002368:	4b5e      	ldr	r3, [pc, #376]	; (80024e4 <COM_Input_Parse1+0x28c>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	b2da      	uxtb	r2, r3
 8002370:	4b5c      	ldr	r3, [pc, #368]	; (80024e4 <COM_Input_Parse1+0x28c>)
 8002372:	701a      	strb	r2, [r3, #0]
 8002374:	4b5b      	ldr	r3, [pc, #364]	; (80024e4 <COM_Input_Parse1+0x28c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d9d9      	bls.n	8002330 <COM_Input_Parse1+0xd8>
                    }
                    for(i=0; i<3; i++)
 800237c:	4b59      	ldr	r3, [pc, #356]	; (80024e4 <COM_Input_Parse1+0x28c>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	e021      	b.n	80023c8 <COM_Input_Parse1+0x170>
                    {
                        parsebuf[25+i]= sub_pulse_value/POW(10,2)%10+'0';
 8002384:	2102      	movs	r1, #2
 8002386:	200a      	movs	r0, #10
 8002388:	f7ff fd36 	bl	8001df8 <POW>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	8abb      	ldrh	r3, [r7, #20]
 8002392:	fbb3 f3f2 	udiv	r3, r3, r2
 8002396:	b29a      	uxth	r2, r3
 8002398:	4b53      	ldr	r3, [pc, #332]	; (80024e8 <COM_Input_Parse1+0x290>)
 800239a:	fba3 1302 	umull	r1, r3, r3, r2
 800239e:	08d9      	lsrs	r1, r3, #3
 80023a0:	460b      	mov	r3, r1
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b4d      	ldr	r3, [pc, #308]	; (80024e4 <COM_Input_Parse1+0x28c>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	3319      	adds	r3, #25
 80023b4:	3230      	adds	r2, #48	; 0x30
 80023b6:	b2d1      	uxtb	r1, r2
 80023b8:	4a46      	ldr	r2, [pc, #280]	; (80024d4 <COM_Input_Parse1+0x27c>)
 80023ba:	54d1      	strb	r1, [r2, r3]
                    for(i=0; i<3; i++)
 80023bc:	4b49      	ldr	r3, [pc, #292]	; (80024e4 <COM_Input_Parse1+0x28c>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	3301      	adds	r3, #1
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <COM_Input_Parse1+0x28c>)
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	4b46      	ldr	r3, [pc, #280]	; (80024e4 <COM_Input_Parse1+0x28c>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d9d9      	bls.n	8002384 <COM_Input_Parse1+0x12c>
 80023d0:	e007      	b.n	80023e2 <COM_Input_Parse1+0x18a>
                    }
                }
            }
            else
            {
                bootup_flag = 0; // 플래그 초기화
 80023d2:	4b41      	ldr	r3, [pc, #260]	; (80024d8 <COM_Input_Parse1+0x280>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
                memcpy(&prev_parsebuf[0], &parsebuf[0], 46); // 정상 데이터를 저장
 80023d8:	222e      	movs	r2, #46	; 0x2e
 80023da:	493e      	ldr	r1, [pc, #248]	; (80024d4 <COM_Input_Parse1+0x27c>)
 80023dc:	483f      	ldr	r0, [pc, #252]	; (80024dc <COM_Input_Parse1+0x284>)
 80023de:	f005 ffbb 	bl	8008358 <memcpy>
            }
        }

        parsebuf[31]=parsebuf[32];
 80023e2:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <COM_Input_Parse1+0x27c>)
 80023e4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80023e8:	4b3a      	ldr	r3, [pc, #232]	; (80024d4 <COM_Input_Parse1+0x27c>)
 80023ea:	77da      	strb	r2, [r3, #31]
        parsebuf[32]=parsebuf[33];
 80023ec:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <COM_Input_Parse1+0x27c>)
 80023ee:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80023f2:	4b38      	ldr	r3, [pc, #224]	; (80024d4 <COM_Input_Parse1+0x27c>)
 80023f4:	f883 2020 	strb.w	r2, [r3, #32]
        parsebuf[33]=0x30;
 80023f8:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <COM_Input_Parse1+0x27c>)
 80023fa:	2230      	movs	r2, #48	; 0x30
 80023fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        ascii_to_bcd(&parsebuf[len-43], val_savebuf, 38);
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	3b2b      	subs	r3, #43	; 0x2b
 8002404:	4a33      	ldr	r2, [pc, #204]	; (80024d4 <COM_Input_Parse1+0x27c>)
 8002406:	4413      	add	r3, r2
 8002408:	2226      	movs	r2, #38	; 0x26
 800240a:	4938      	ldr	r1, [pc, #224]	; (80024ec <COM_Input_Parse1+0x294>)
 800240c:	4618      	mov	r0, r3
 800240e:	f001 fa45 	bl	800389c <ascii_to_bcd>
        ascii_convert_to_hex(&parsebuf[len-45], hax_val_savebuf, 2);
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	3b2d      	subs	r3, #45	; 0x2d
 8002416:	4a2f      	ldr	r2, [pc, #188]	; (80024d4 <COM_Input_Parse1+0x27c>)
 8002418:	4413      	add	r3, r2
 800241a:	2202      	movs	r2, #2
 800241c:	4934      	ldr	r1, [pc, #208]	; (80024f0 <COM_Input_Parse1+0x298>)
 800241e:	4618      	mov	r0, r3
 8002420:	f001 f99a 	bl	8003758 <ascii_convert_to_hex>
        parsebuf[len-45] = 0x01;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	3b2d      	subs	r3, #45	; 0x2d
 8002428:	4a2a      	ldr	r2, [pc, #168]	; (80024d4 <COM_Input_Parse1+0x27c>)
 800242a:	2101      	movs	r1, #1
 800242c:	54d1      	strb	r1, [r2, r3]

        memcpy(&parsebuf[len-44],hax_val_savebuf, 1);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3b2c      	subs	r3, #44	; 0x2c
 8002432:	4a28      	ldr	r2, [pc, #160]	; (80024d4 <COM_Input_Parse1+0x27c>)
 8002434:	4413      	add	r3, r2
 8002436:	4a2e      	ldr	r2, [pc, #184]	; (80024f0 <COM_Input_Parse1+0x298>)
 8002438:	7812      	ldrb	r2, [r2, #0]
 800243a:	701a      	strb	r2, [r3, #0]
        memcpy(&parsebuf[len-43],val_savebuf, 19);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	3b2b      	subs	r3, #43	; 0x2b
 8002440:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <COM_Input_Parse1+0x27c>)
 8002442:	4413      	add	r3, r2
 8002444:	2213      	movs	r2, #19
 8002446:	4929      	ldr	r1, [pc, #164]	; (80024ec <COM_Input_Parse1+0x294>)
 8002448:	4618      	mov	r0, r3
 800244a:	f005 ff85 	bl	8008358 <memcpy>



        chk = Transmit_checksum(&parsebuf[len-46], 22);
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	3b2e      	subs	r3, #46	; 0x2e
 8002452:	4a20      	ldr	r2, [pc, #128]	; (80024d4 <COM_Input_Parse1+0x27c>)
 8002454:	4413      	add	r3, r2
 8002456:	2116      	movs	r1, #22
 8002458:	4618      	mov	r0, r3
 800245a:	f001 fa8f 	bl	800397c <Transmit_checksum>
 800245e:	4603      	mov	r3, r0
 8002460:	461a      	mov	r2, r3
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <COM_Input_Parse1+0x278>)
 8002464:	701a      	strb	r2, [r3, #0]

        parsebuf[len-24] = chk;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	3b18      	subs	r3, #24
 800246a:	4a19      	ldr	r2, [pc, #100]	; (80024d0 <COM_Input_Parse1+0x278>)
 800246c:	7811      	ldrb	r1, [r2, #0]
 800246e:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <COM_Input_Parse1+0x27c>)
 8002470:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-23] = 0x03;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	3b17      	subs	r3, #23
 8002476:	4a17      	ldr	r2, [pc, #92]	; (80024d4 <COM_Input_Parse1+0x27c>)
 8002478:	2103      	movs	r1, #3
 800247a:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-22] = 0x0d;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	3b16      	subs	r3, #22
 8002480:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <COM_Input_Parse1+0x27c>)
 8002482:	210d      	movs	r1, #13
 8002484:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-21] = 0x0a;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	3b15      	subs	r3, #21
 800248a:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <COM_Input_Parse1+0x27c>)
 800248c:	210a      	movs	r1, #10
 800248e:	54d1      	strb	r1, [r2, r3]

        memcpy(&_DG_tx_buf[com_port][0],&parsebuf[len-46], 26);
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4a16      	ldr	r2, [pc, #88]	; (80024f4 <COM_Input_Parse1+0x29c>)
 800249c:	1898      	adds	r0, r3, r2
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	3b2e      	subs	r3, #46	; 0x2e
 80024a2:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <COM_Input_Parse1+0x27c>)
 80024a4:	4413      	add	r3, r2
 80024a6:	221a      	movs	r2, #26
 80024a8:	4619      	mov	r1, r3
 80024aa:	f005 ff55 	bl	8008358 <memcpy>

        memset(parsebuf, 0x00, 46);
 80024ae:	222e      	movs	r2, #46	; 0x2e
 80024b0:	2100      	movs	r1, #0
 80024b2:	4808      	ldr	r0, [pc, #32]	; (80024d4 <COM_Input_Parse1+0x27c>)
 80024b4:	f005 ff24 	bl	8008300 <memset>
        memset(val_savebuf, 0x00, 26);
 80024b8:	221a      	movs	r2, #26
 80024ba:	2100      	movs	r1, #0
 80024bc:	480b      	ldr	r0, [pc, #44]	; (80024ec <COM_Input_Parse1+0x294>)
 80024be:	f005 ff1f 	bl	8008300 <memset>


    }

}
 80024c2:	bf00      	nop
 80024c4:	3724      	adds	r7, #36	; 0x24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000070 	.word	0x20000070
 80024d0:	20000f00 	.word	0x20000f00
 80024d4:	20000f04 	.word	0x20000f04
 80024d8:	20000f32 	.word	0x20000f32
 80024dc:	20000f34 	.word	0x20000f34
 80024e0:	88888889 	.word	0x88888889
 80024e4:	20000f62 	.word	0x20000f62
 80024e8:	cccccccd 	.word	0xcccccccd
 80024ec:	20000f64 	.word	0x20000f64
 80024f0:	20000f80 	.word	0x20000f80
 80024f4:	20000c0c 	.word	0x20000c0c

080024f8 <COM_Input_Parse2>:
void COM_Input_Parse2(cx_uint8_t* bufptr, cx_uint_t len, cx_uint_t com_port)
{
 80024f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
    cx_uint32_t m_val;

    // 변환할 값
    cx_uint16_t main_pulse_value;
    cx_uint16_t sub_pulse_value;
    cx_uint8_t inpuls_state = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	77fb      	strb	r3, [r7, #31]
    static cx_uint8_t prev_parsebuf[46] = {0, };
    // 정상 데이터 수신 확인 flag
    static cx_bool_t  bootup_flag = 0;

    // 랜덤 값 생성
    m_val = HAL_RNG_GetRandomNumber(&hrng);
 8002508:	4898      	ldr	r0, [pc, #608]	; (800276c <COM_Input_Parse2+0x274>)
 800250a:	f003 fbbf 	bl	8005c8c <HAL_RNG_GetRandomNumber>
 800250e:	61b8      	str	r0, [r7, #24]

    static cx_uint8_t parsebuf[46];
    static cx_uint8_t val_savebuf[26];
    static cx_uint8_t hax_val_savebuf[2];
    static cx_uint8_t chk;
    chk =0;
 8002510:	4b97      	ldr	r3, [pc, #604]	; (8002770 <COM_Input_Parse2+0x278>)
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]

    if (com_port == 2)  // COM1 처리
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b02      	cmp	r3, #2
 800251a:	f040 8122 	bne.w	8002762 <COM_Input_Parse2+0x26a>
    {

        memcpy(parsebuf, bufptr, 46);
 800251e:	4a95      	ldr	r2, [pc, #596]	; (8002774 <COM_Input_Parse2+0x27c>)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	461c      	mov	r4, r3
 8002524:	4616      	mov	r6, r2
 8002526:	f104 0c20 	add.w	ip, r4, #32
 800252a:	4635      	mov	r5, r6
 800252c:	4623      	mov	r3, r4
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002538:	3410      	adds	r4, #16
 800253a:	3610      	adds	r6, #16
 800253c:	4564      	cmp	r4, ip
 800253e:	d1f4      	bne.n	800252a <COM_Input_Parse2+0x32>
 8002540:	4633      	mov	r3, r6
 8002542:	6820      	ldr	r0, [r4, #0]
 8002544:	6861      	ldr	r1, [r4, #4]
 8002546:	68a2      	ldr	r2, [r4, #8]
 8002548:	c307      	stmia	r3!, {r0, r1, r2}
 800254a:	89a2      	ldrh	r2, [r4, #12]
 800254c:	801a      	strh	r2, [r3, #0]
        inpuls_state = parsebuf[3];
 800254e:	4b89      	ldr	r3, [pc, #548]	; (8002774 <COM_Input_Parse2+0x27c>)
 8002550:	78db      	ldrb	r3, [r3, #3]
 8002552:	77fb      	strb	r3, [r7, #31]

        if(inpuls_state != 0x34)
 8002554:	7ffb      	ldrb	r3, [r7, #31]
 8002556:	2b34      	cmp	r3, #52	; 0x34
 8002558:	f000 8093 	beq.w	8002682 <COM_Input_Parse2+0x18a>
		{
			if(parsebuf[4] == 0x30)
 800255c:	4b85      	ldr	r3, [pc, #532]	; (8002774 <COM_Input_Parse2+0x27c>)
 800255e:	791b      	ldrb	r3, [r3, #4]
 8002560:	2b30      	cmp	r3, #48	; 0x30
 8002562:	f040 8086 	bne.w	8002672 <COM_Input_Parse2+0x17a>
			{

				if (bootup_flag < 10) // 4번 수신까지 순차적으로 감소
 8002566:	4b84      	ldr	r3, [pc, #528]	; (8002778 <COM_Input_Parse2+0x280>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b09      	cmp	r3, #9
 800256c:	f200 8089 	bhi.w	8002682 <COM_Input_Parse2+0x18a>
				{
					memcpy(&parsebuf[0], &prev_parsebuf[0], 46); //기존 정상 데이터 호출
 8002570:	222e      	movs	r2, #46	; 0x2e
 8002572:	4982      	ldr	r1, [pc, #520]	; (800277c <COM_Input_Parse2+0x284>)
 8002574:	487f      	ldr	r0, [pc, #508]	; (8002774 <COM_Input_Parse2+0x27c>)
 8002576:	f005 feef 	bl	8008358 <memcpy>
					bootup_flag++;
 800257a:	4b7f      	ldr	r3, [pc, #508]	; (8002778 <COM_Input_Parse2+0x280>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	3301      	adds	r3, #1
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b7d      	ldr	r3, [pc, #500]	; (8002778 <COM_Input_Parse2+0x280>)
 8002584:	701a      	strb	r2, [r3, #0]

					//변환이 필요한 정펄스값, 부펄스값 버퍼에 Overwrite
					main_pulse_value = 380 - (10 + m_val)%30 - 15; // 기본 380 ~ 350 +- 15
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	f103 010a 	add.w	r1, r3, #10
 800258c:	4b7c      	ldr	r3, [pc, #496]	; (8002780 <COM_Input_Parse2+0x288>)
 800258e:	fba3 2301 	umull	r2, r3, r3, r1
 8002592:	091a      	lsrs	r2, r3, #4
 8002594:	4613      	mov	r3, r2
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	1aca      	subs	r2, r1, r3
 800259e:	b293      	uxth	r3, r2
 80025a0:	f5c3 73b6 	rsb	r3, r3, #364	; 0x16c
 80025a4:	3301      	adds	r3, #1
 80025a6:	82fb      	strh	r3, [r7, #22]
					sub_pulse_value = 80 - (20+ m_val)%30 - 15; // 기본 80 ~ 20 +- 15
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	f103 0114 	add.w	r1, r3, #20
 80025ae:	4b74      	ldr	r3, [pc, #464]	; (8002780 <COM_Input_Parse2+0x288>)
 80025b0:	fba3 2301 	umull	r2, r3, r3, r1
 80025b4:	091a      	lsrs	r2, r3, #4
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	1aca      	subs	r2, r1, r3
 80025c0:	b293      	uxth	r3, r2
 80025c2:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 80025c6:	82bb      	strh	r3, [r7, #20]
					//변환이 필요한 특정 바이트 값 오버라이트

					for(i=0; i<3; i++)
 80025c8:	4b6e      	ldr	r3, [pc, #440]	; (8002784 <COM_Input_Parse2+0x28c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	e021      	b.n	8002614 <COM_Input_Parse2+0x11c>
					{
						parsebuf[22+i]= main_pulse_value/POW(10,2)%10+'0';
 80025d0:	2102      	movs	r1, #2
 80025d2:	200a      	movs	r0, #10
 80025d4:	f7ff fc10 	bl	8001df8 <POW>
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	8afb      	ldrh	r3, [r7, #22]
 80025de:	fbb3 f3f2 	udiv	r3, r3, r2
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	4b68      	ldr	r3, [pc, #416]	; (8002788 <COM_Input_Parse2+0x290>)
 80025e6:	fba3 1302 	umull	r1, r3, r3, r2
 80025ea:	08d9      	lsrs	r1, r3, #3
 80025ec:	460b      	mov	r3, r1
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4b62      	ldr	r3, [pc, #392]	; (8002784 <COM_Input_Parse2+0x28c>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	3316      	adds	r3, #22
 8002600:	3230      	adds	r2, #48	; 0x30
 8002602:	b2d1      	uxtb	r1, r2
 8002604:	4a5b      	ldr	r2, [pc, #364]	; (8002774 <COM_Input_Parse2+0x27c>)
 8002606:	54d1      	strb	r1, [r2, r3]
					for(i=0; i<3; i++)
 8002608:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <COM_Input_Parse2+0x28c>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	b2da      	uxtb	r2, r3
 8002610:	4b5c      	ldr	r3, [pc, #368]	; (8002784 <COM_Input_Parse2+0x28c>)
 8002612:	701a      	strb	r2, [r3, #0]
 8002614:	4b5b      	ldr	r3, [pc, #364]	; (8002784 <COM_Input_Parse2+0x28c>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d9d9      	bls.n	80025d0 <COM_Input_Parse2+0xd8>
					}
					for(i=0; i<3; i++)
 800261c:	4b59      	ldr	r3, [pc, #356]	; (8002784 <COM_Input_Parse2+0x28c>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
 8002622:	e021      	b.n	8002668 <COM_Input_Parse2+0x170>
					{
						parsebuf[25+i]= sub_pulse_value/POW(10,2)%10+'0';
 8002624:	2102      	movs	r1, #2
 8002626:	200a      	movs	r0, #10
 8002628:	f7ff fbe6 	bl	8001df8 <POW>
 800262c:	4603      	mov	r3, r0
 800262e:	461a      	mov	r2, r3
 8002630:	8abb      	ldrh	r3, [r7, #20]
 8002632:	fbb3 f3f2 	udiv	r3, r3, r2
 8002636:	b29a      	uxth	r2, r3
 8002638:	4b53      	ldr	r3, [pc, #332]	; (8002788 <COM_Input_Parse2+0x290>)
 800263a:	fba3 1302 	umull	r1, r3, r3, r2
 800263e:	08d9      	lsrs	r1, r3, #3
 8002640:	460b      	mov	r3, r1
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	b29b      	uxth	r3, r3
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b4d      	ldr	r3, [pc, #308]	; (8002784 <COM_Input_Parse2+0x28c>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	3319      	adds	r3, #25
 8002654:	3230      	adds	r2, #48	; 0x30
 8002656:	b2d1      	uxtb	r1, r2
 8002658:	4a46      	ldr	r2, [pc, #280]	; (8002774 <COM_Input_Parse2+0x27c>)
 800265a:	54d1      	strb	r1, [r2, r3]
					for(i=0; i<3; i++)
 800265c:	4b49      	ldr	r3, [pc, #292]	; (8002784 <COM_Input_Parse2+0x28c>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	3301      	adds	r3, #1
 8002662:	b2da      	uxtb	r2, r3
 8002664:	4b47      	ldr	r3, [pc, #284]	; (8002784 <COM_Input_Parse2+0x28c>)
 8002666:	701a      	strb	r2, [r3, #0]
 8002668:	4b46      	ldr	r3, [pc, #280]	; (8002784 <COM_Input_Parse2+0x28c>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d9d9      	bls.n	8002624 <COM_Input_Parse2+0x12c>
 8002670:	e007      	b.n	8002682 <COM_Input_Parse2+0x18a>
					}
				}
			}
            else
            {
                bootup_flag = 0; // 플래그 초기화
 8002672:	4b41      	ldr	r3, [pc, #260]	; (8002778 <COM_Input_Parse2+0x280>)
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
                memcpy(&prev_parsebuf[0], &parsebuf[0], 46); // 정상 데이터를 저장
 8002678:	222e      	movs	r2, #46	; 0x2e
 800267a:	493e      	ldr	r1, [pc, #248]	; (8002774 <COM_Input_Parse2+0x27c>)
 800267c:	483f      	ldr	r0, [pc, #252]	; (800277c <COM_Input_Parse2+0x284>)
 800267e:	f005 fe6b 	bl	8008358 <memcpy>
            }
        }

        parsebuf[31]=parsebuf[32];
 8002682:	4b3c      	ldr	r3, [pc, #240]	; (8002774 <COM_Input_Parse2+0x27c>)
 8002684:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002688:	4b3a      	ldr	r3, [pc, #232]	; (8002774 <COM_Input_Parse2+0x27c>)
 800268a:	77da      	strb	r2, [r3, #31]
        parsebuf[32]=parsebuf[33];
 800268c:	4b39      	ldr	r3, [pc, #228]	; (8002774 <COM_Input_Parse2+0x27c>)
 800268e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8002692:	4b38      	ldr	r3, [pc, #224]	; (8002774 <COM_Input_Parse2+0x27c>)
 8002694:	f883 2020 	strb.w	r2, [r3, #32]
        parsebuf[33]=0x30;
 8002698:	4b36      	ldr	r3, [pc, #216]	; (8002774 <COM_Input_Parse2+0x27c>)
 800269a:	2230      	movs	r2, #48	; 0x30
 800269c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        ascii_to_bcd(&parsebuf[len-43], val_savebuf, 38);
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	3b2b      	subs	r3, #43	; 0x2b
 80026a4:	4a33      	ldr	r2, [pc, #204]	; (8002774 <COM_Input_Parse2+0x27c>)
 80026a6:	4413      	add	r3, r2
 80026a8:	2226      	movs	r2, #38	; 0x26
 80026aa:	4938      	ldr	r1, [pc, #224]	; (800278c <COM_Input_Parse2+0x294>)
 80026ac:	4618      	mov	r0, r3
 80026ae:	f001 f8f5 	bl	800389c <ascii_to_bcd>
        ascii_convert_to_hex(&parsebuf[len-45], hax_val_savebuf, 2);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	3b2d      	subs	r3, #45	; 0x2d
 80026b6:	4a2f      	ldr	r2, [pc, #188]	; (8002774 <COM_Input_Parse2+0x27c>)
 80026b8:	4413      	add	r3, r2
 80026ba:	2202      	movs	r2, #2
 80026bc:	4934      	ldr	r1, [pc, #208]	; (8002790 <COM_Input_Parse2+0x298>)
 80026be:	4618      	mov	r0, r3
 80026c0:	f001 f84a 	bl	8003758 <ascii_convert_to_hex>
        parsebuf[len-45] = 0x02;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	3b2d      	subs	r3, #45	; 0x2d
 80026c8:	4a2a      	ldr	r2, [pc, #168]	; (8002774 <COM_Input_Parse2+0x27c>)
 80026ca:	2102      	movs	r1, #2
 80026cc:	54d1      	strb	r1, [r2, r3]

        memcpy(&parsebuf[len-44],hax_val_savebuf, 1);
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	3b2c      	subs	r3, #44	; 0x2c
 80026d2:	4a28      	ldr	r2, [pc, #160]	; (8002774 <COM_Input_Parse2+0x27c>)
 80026d4:	4413      	add	r3, r2
 80026d6:	4a2e      	ldr	r2, [pc, #184]	; (8002790 <COM_Input_Parse2+0x298>)
 80026d8:	7812      	ldrb	r2, [r2, #0]
 80026da:	701a      	strb	r2, [r3, #0]
        memcpy(&parsebuf[len-43],val_savebuf, 19);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	3b2b      	subs	r3, #43	; 0x2b
 80026e0:	4a24      	ldr	r2, [pc, #144]	; (8002774 <COM_Input_Parse2+0x27c>)
 80026e2:	4413      	add	r3, r2
 80026e4:	2213      	movs	r2, #19
 80026e6:	4929      	ldr	r1, [pc, #164]	; (800278c <COM_Input_Parse2+0x294>)
 80026e8:	4618      	mov	r0, r3
 80026ea:	f005 fe35 	bl	8008358 <memcpy>



        chk = Transmit_checksum(&parsebuf[len-46], 22);
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	3b2e      	subs	r3, #46	; 0x2e
 80026f2:	4a20      	ldr	r2, [pc, #128]	; (8002774 <COM_Input_Parse2+0x27c>)
 80026f4:	4413      	add	r3, r2
 80026f6:	2116      	movs	r1, #22
 80026f8:	4618      	mov	r0, r3
 80026fa:	f001 f93f 	bl	800397c <Transmit_checksum>
 80026fe:	4603      	mov	r3, r0
 8002700:	461a      	mov	r2, r3
 8002702:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <COM_Input_Parse2+0x278>)
 8002704:	701a      	strb	r2, [r3, #0]

        parsebuf[len-24] = chk;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	3b18      	subs	r3, #24
 800270a:	4a19      	ldr	r2, [pc, #100]	; (8002770 <COM_Input_Parse2+0x278>)
 800270c:	7811      	ldrb	r1, [r2, #0]
 800270e:	4a19      	ldr	r2, [pc, #100]	; (8002774 <COM_Input_Parse2+0x27c>)
 8002710:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-23] = 0x03;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	3b17      	subs	r3, #23
 8002716:	4a17      	ldr	r2, [pc, #92]	; (8002774 <COM_Input_Parse2+0x27c>)
 8002718:	2103      	movs	r1, #3
 800271a:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-22] = 0x0d;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	3b16      	subs	r3, #22
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <COM_Input_Parse2+0x27c>)
 8002722:	210d      	movs	r1, #13
 8002724:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-21] = 0x0a;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	3b15      	subs	r3, #21
 800272a:	4a12      	ldr	r2, [pc, #72]	; (8002774 <COM_Input_Parse2+0x27c>)
 800272c:	210a      	movs	r1, #10
 800272e:	54d1      	strb	r1, [r2, r3]

        memcpy(&_DG_tx_buf[com_port][0],&parsebuf[len-46], 26);
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4a16      	ldr	r2, [pc, #88]	; (8002794 <COM_Input_Parse2+0x29c>)
 800273c:	1898      	adds	r0, r3, r2
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	3b2e      	subs	r3, #46	; 0x2e
 8002742:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <COM_Input_Parse2+0x27c>)
 8002744:	4413      	add	r3, r2
 8002746:	221a      	movs	r2, #26
 8002748:	4619      	mov	r1, r3
 800274a:	f005 fe05 	bl	8008358 <memcpy>

        memset(parsebuf, 0x00, 46);
 800274e:	222e      	movs	r2, #46	; 0x2e
 8002750:	2100      	movs	r1, #0
 8002752:	4808      	ldr	r0, [pc, #32]	; (8002774 <COM_Input_Parse2+0x27c>)
 8002754:	f005 fdd4 	bl	8008300 <memset>
        memset(val_savebuf, 0x00, 26);
 8002758:	221a      	movs	r2, #26
 800275a:	2100      	movs	r1, #0
 800275c:	480b      	ldr	r0, [pc, #44]	; (800278c <COM_Input_Parse2+0x294>)
 800275e:	f005 fdcf 	bl	8008300 <memset>


    }

}
 8002762:	bf00      	nop
 8002764:	3724      	adds	r7, #36	; 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800276a:	bf00      	nop
 800276c:	20000070 	.word	0x20000070
 8002770:	20000f82 	.word	0x20000f82
 8002774:	20000f84 	.word	0x20000f84
 8002778:	20000fb2 	.word	0x20000fb2
 800277c:	20000fb4 	.word	0x20000fb4
 8002780:	88888889 	.word	0x88888889
 8002784:	20000fe2 	.word	0x20000fe2
 8002788:	cccccccd 	.word	0xcccccccd
 800278c:	20000fe4 	.word	0x20000fe4
 8002790:	20001000 	.word	0x20001000
 8002794:	20000c0c 	.word	0x20000c0c

08002798 <COM_Input_Parse3>:

void COM_Input_Parse3(cx_uint8_t* bufptr, cx_uint_t len, cx_uint_t com_port)
{
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
    cx_uint32_t m_val;

    // 변환할 값
    cx_uint16_t main_pulse_value;
    cx_uint16_t sub_pulse_value;
    cx_uint8_t inpuls_state = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	77fb      	strb	r3, [r7, #31]
    static cx_uint8_t prev_parsebuf[46] = {0, };
    // 정상 데이터 수신 확인 flag
    static cx_bool_t  bootup_flag = 0;

    // 랜덤 값 생성
    m_val = HAL_RNG_GetRandomNumber(&hrng);
 80027a8:	4898      	ldr	r0, [pc, #608]	; (8002a0c <COM_Input_Parse3+0x274>)
 80027aa:	f003 fa6f 	bl	8005c8c <HAL_RNG_GetRandomNumber>
 80027ae:	61b8      	str	r0, [r7, #24]

    static cx_uint8_t parsebuf[46];
    static cx_uint8_t val_savebuf[26];
    static cx_uint8_t hax_val_savebuf[2];
    static cx_uint8_t chk;
    chk =0;
 80027b0:	4b97      	ldr	r3, [pc, #604]	; (8002a10 <COM_Input_Parse3+0x278>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]

    if (com_port == 3)  // COM1 처리
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	f040 8122 	bne.w	8002a02 <COM_Input_Parse3+0x26a>
    {

        memcpy(parsebuf, bufptr, 46);
 80027be:	4a95      	ldr	r2, [pc, #596]	; (8002a14 <COM_Input_Parse3+0x27c>)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	461c      	mov	r4, r3
 80027c4:	4616      	mov	r6, r2
 80027c6:	f104 0c20 	add.w	ip, r4, #32
 80027ca:	4635      	mov	r5, r6
 80027cc:	4623      	mov	r3, r4
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d8:	3410      	adds	r4, #16
 80027da:	3610      	adds	r6, #16
 80027dc:	4564      	cmp	r4, ip
 80027de:	d1f4      	bne.n	80027ca <COM_Input_Parse3+0x32>
 80027e0:	4633      	mov	r3, r6
 80027e2:	6820      	ldr	r0, [r4, #0]
 80027e4:	6861      	ldr	r1, [r4, #4]
 80027e6:	68a2      	ldr	r2, [r4, #8]
 80027e8:	c307      	stmia	r3!, {r0, r1, r2}
 80027ea:	89a2      	ldrh	r2, [r4, #12]
 80027ec:	801a      	strh	r2, [r3, #0]
        inpuls_state = parsebuf[3];
 80027ee:	4b89      	ldr	r3, [pc, #548]	; (8002a14 <COM_Input_Parse3+0x27c>)
 80027f0:	78db      	ldrb	r3, [r3, #3]
 80027f2:	77fb      	strb	r3, [r7, #31]

        if(inpuls_state != 0x34)
 80027f4:	7ffb      	ldrb	r3, [r7, #31]
 80027f6:	2b34      	cmp	r3, #52	; 0x34
 80027f8:	f000 8093 	beq.w	8002922 <COM_Input_Parse3+0x18a>
		{
			if(parsebuf[4] == 0x30)
 80027fc:	4b85      	ldr	r3, [pc, #532]	; (8002a14 <COM_Input_Parse3+0x27c>)
 80027fe:	791b      	ldrb	r3, [r3, #4]
 8002800:	2b30      	cmp	r3, #48	; 0x30
 8002802:	f040 8086 	bne.w	8002912 <COM_Input_Parse3+0x17a>
			{

				if (bootup_flag < 10) // 4번 수신까지 순차적으로 감소
 8002806:	4b84      	ldr	r3, [pc, #528]	; (8002a18 <COM_Input_Parse3+0x280>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b09      	cmp	r3, #9
 800280c:	f200 8089 	bhi.w	8002922 <COM_Input_Parse3+0x18a>
				{
					memcpy(&parsebuf[0], &prev_parsebuf[0], 46); //기존 정상 데이터 호출
 8002810:	222e      	movs	r2, #46	; 0x2e
 8002812:	4982      	ldr	r1, [pc, #520]	; (8002a1c <COM_Input_Parse3+0x284>)
 8002814:	487f      	ldr	r0, [pc, #508]	; (8002a14 <COM_Input_Parse3+0x27c>)
 8002816:	f005 fd9f 	bl	8008358 <memcpy>
					bootup_flag++;
 800281a:	4b7f      	ldr	r3, [pc, #508]	; (8002a18 <COM_Input_Parse3+0x280>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	3301      	adds	r3, #1
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4b7d      	ldr	r3, [pc, #500]	; (8002a18 <COM_Input_Parse3+0x280>)
 8002824:	701a      	strb	r2, [r3, #0]

					//변환이 필요한 정펄스값, 부펄스값 버퍼에 Overwrite
					main_pulse_value = 380 - (10 + m_val)%30 - 15; // 기본 380 ~ 350 +- 15
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f103 010a 	add.w	r1, r3, #10
 800282c:	4b7c      	ldr	r3, [pc, #496]	; (8002a20 <COM_Input_Parse3+0x288>)
 800282e:	fba3 2301 	umull	r2, r3, r3, r1
 8002832:	091a      	lsrs	r2, r3, #4
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	1aca      	subs	r2, r1, r3
 800283e:	b293      	uxth	r3, r2
 8002840:	f5c3 73b6 	rsb	r3, r3, #364	; 0x16c
 8002844:	3301      	adds	r3, #1
 8002846:	82fb      	strh	r3, [r7, #22]
					sub_pulse_value = 80 - (20+ m_val)%30 - 15; // 기본 80 ~ 20 +- 15
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	f103 0114 	add.w	r1, r3, #20
 800284e:	4b74      	ldr	r3, [pc, #464]	; (8002a20 <COM_Input_Parse3+0x288>)
 8002850:	fba3 2301 	umull	r2, r3, r3, r1
 8002854:	091a      	lsrs	r2, r3, #4
 8002856:	4613      	mov	r3, r2
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	1aca      	subs	r2, r1, r3
 8002860:	b293      	uxth	r3, r2
 8002862:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8002866:	82bb      	strh	r3, [r7, #20]
					//변환이 필요한 특정 바이트 값 오버라이트

					for(i=0; i<3; i++)
 8002868:	4b6e      	ldr	r3, [pc, #440]	; (8002a24 <COM_Input_Parse3+0x28c>)
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	e021      	b.n	80028b4 <COM_Input_Parse3+0x11c>
					{
						parsebuf[22+i]= main_pulse_value/POW(10,2)%10+'0';
 8002870:	2102      	movs	r1, #2
 8002872:	200a      	movs	r0, #10
 8002874:	f7ff fac0 	bl	8001df8 <POW>
 8002878:	4603      	mov	r3, r0
 800287a:	461a      	mov	r2, r3
 800287c:	8afb      	ldrh	r3, [r7, #22]
 800287e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002882:	b29a      	uxth	r2, r3
 8002884:	4b68      	ldr	r3, [pc, #416]	; (8002a28 <COM_Input_Parse3+0x290>)
 8002886:	fba3 1302 	umull	r1, r3, r3, r2
 800288a:	08d9      	lsrs	r1, r3, #3
 800288c:	460b      	mov	r3, r1
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	b29b      	uxth	r3, r3
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4b62      	ldr	r3, [pc, #392]	; (8002a24 <COM_Input_Parse3+0x28c>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	3316      	adds	r3, #22
 80028a0:	3230      	adds	r2, #48	; 0x30
 80028a2:	b2d1      	uxtb	r1, r2
 80028a4:	4a5b      	ldr	r2, [pc, #364]	; (8002a14 <COM_Input_Parse3+0x27c>)
 80028a6:	54d1      	strb	r1, [r2, r3]
					for(i=0; i<3; i++)
 80028a8:	4b5e      	ldr	r3, [pc, #376]	; (8002a24 <COM_Input_Parse3+0x28c>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	4b5c      	ldr	r3, [pc, #368]	; (8002a24 <COM_Input_Parse3+0x28c>)
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	4b5b      	ldr	r3, [pc, #364]	; (8002a24 <COM_Input_Parse3+0x28c>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d9d9      	bls.n	8002870 <COM_Input_Parse3+0xd8>
					}
					for(i=0; i<3; i++)
 80028bc:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <COM_Input_Parse3+0x28c>)
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	e021      	b.n	8002908 <COM_Input_Parse3+0x170>
					{
						parsebuf[25+i]= sub_pulse_value/POW(10,2)%10+'0';
 80028c4:	2102      	movs	r1, #2
 80028c6:	200a      	movs	r0, #10
 80028c8:	f7ff fa96 	bl	8001df8 <POW>
 80028cc:	4603      	mov	r3, r0
 80028ce:	461a      	mov	r2, r3
 80028d0:	8abb      	ldrh	r3, [r7, #20]
 80028d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	4b53      	ldr	r3, [pc, #332]	; (8002a28 <COM_Input_Parse3+0x290>)
 80028da:	fba3 1302 	umull	r1, r3, r3, r2
 80028de:	08d9      	lsrs	r1, r3, #3
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4b4d      	ldr	r3, [pc, #308]	; (8002a24 <COM_Input_Parse3+0x28c>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	3319      	adds	r3, #25
 80028f4:	3230      	adds	r2, #48	; 0x30
 80028f6:	b2d1      	uxtb	r1, r2
 80028f8:	4a46      	ldr	r2, [pc, #280]	; (8002a14 <COM_Input_Parse3+0x27c>)
 80028fa:	54d1      	strb	r1, [r2, r3]
					for(i=0; i<3; i++)
 80028fc:	4b49      	ldr	r3, [pc, #292]	; (8002a24 <COM_Input_Parse3+0x28c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	3301      	adds	r3, #1
 8002902:	b2da      	uxtb	r2, r3
 8002904:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <COM_Input_Parse3+0x28c>)
 8002906:	701a      	strb	r2, [r3, #0]
 8002908:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <COM_Input_Parse3+0x28c>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d9d9      	bls.n	80028c4 <COM_Input_Parse3+0x12c>
 8002910:	e007      	b.n	8002922 <COM_Input_Parse3+0x18a>
					}
				}
			}
            else
            {
                bootup_flag = 0; // 플래그 초기화
 8002912:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <COM_Input_Parse3+0x280>)
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
                memcpy(&prev_parsebuf[0], &parsebuf[0], 46); // 정상 데이터를 저장
 8002918:	222e      	movs	r2, #46	; 0x2e
 800291a:	493e      	ldr	r1, [pc, #248]	; (8002a14 <COM_Input_Parse3+0x27c>)
 800291c:	483f      	ldr	r0, [pc, #252]	; (8002a1c <COM_Input_Parse3+0x284>)
 800291e:	f005 fd1b 	bl	8008358 <memcpy>
            }
        }

        parsebuf[31]=parsebuf[32];
 8002922:	4b3c      	ldr	r3, [pc, #240]	; (8002a14 <COM_Input_Parse3+0x27c>)
 8002924:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002928:	4b3a      	ldr	r3, [pc, #232]	; (8002a14 <COM_Input_Parse3+0x27c>)
 800292a:	77da      	strb	r2, [r3, #31]
        parsebuf[32]=parsebuf[33];
 800292c:	4b39      	ldr	r3, [pc, #228]	; (8002a14 <COM_Input_Parse3+0x27c>)
 800292e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8002932:	4b38      	ldr	r3, [pc, #224]	; (8002a14 <COM_Input_Parse3+0x27c>)
 8002934:	f883 2020 	strb.w	r2, [r3, #32]
        parsebuf[33]=0x30;
 8002938:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <COM_Input_Parse3+0x27c>)
 800293a:	2230      	movs	r2, #48	; 0x30
 800293c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        ascii_to_bcd(&parsebuf[len-43], val_savebuf, 38);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	3b2b      	subs	r3, #43	; 0x2b
 8002944:	4a33      	ldr	r2, [pc, #204]	; (8002a14 <COM_Input_Parse3+0x27c>)
 8002946:	4413      	add	r3, r2
 8002948:	2226      	movs	r2, #38	; 0x26
 800294a:	4938      	ldr	r1, [pc, #224]	; (8002a2c <COM_Input_Parse3+0x294>)
 800294c:	4618      	mov	r0, r3
 800294e:	f000 ffa5 	bl	800389c <ascii_to_bcd>
        ascii_convert_to_hex(&parsebuf[len-45], hax_val_savebuf, 2);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	3b2d      	subs	r3, #45	; 0x2d
 8002956:	4a2f      	ldr	r2, [pc, #188]	; (8002a14 <COM_Input_Parse3+0x27c>)
 8002958:	4413      	add	r3, r2
 800295a:	2202      	movs	r2, #2
 800295c:	4934      	ldr	r1, [pc, #208]	; (8002a30 <COM_Input_Parse3+0x298>)
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fefa 	bl	8003758 <ascii_convert_to_hex>
        parsebuf[len-45] = 0x03;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	3b2d      	subs	r3, #45	; 0x2d
 8002968:	4a2a      	ldr	r2, [pc, #168]	; (8002a14 <COM_Input_Parse3+0x27c>)
 800296a:	2103      	movs	r1, #3
 800296c:	54d1      	strb	r1, [r2, r3]

        memcpy(&parsebuf[len-44],hax_val_savebuf, 1);
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3b2c      	subs	r3, #44	; 0x2c
 8002972:	4a28      	ldr	r2, [pc, #160]	; (8002a14 <COM_Input_Parse3+0x27c>)
 8002974:	4413      	add	r3, r2
 8002976:	4a2e      	ldr	r2, [pc, #184]	; (8002a30 <COM_Input_Parse3+0x298>)
 8002978:	7812      	ldrb	r2, [r2, #0]
 800297a:	701a      	strb	r2, [r3, #0]
        memcpy(&parsebuf[len-43],val_savebuf, 19);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	3b2b      	subs	r3, #43	; 0x2b
 8002980:	4a24      	ldr	r2, [pc, #144]	; (8002a14 <COM_Input_Parse3+0x27c>)
 8002982:	4413      	add	r3, r2
 8002984:	2213      	movs	r2, #19
 8002986:	4929      	ldr	r1, [pc, #164]	; (8002a2c <COM_Input_Parse3+0x294>)
 8002988:	4618      	mov	r0, r3
 800298a:	f005 fce5 	bl	8008358 <memcpy>



        chk = Transmit_checksum(&parsebuf[len-46], 22);
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	3b2e      	subs	r3, #46	; 0x2e
 8002992:	4a20      	ldr	r2, [pc, #128]	; (8002a14 <COM_Input_Parse3+0x27c>)
 8002994:	4413      	add	r3, r2
 8002996:	2116      	movs	r1, #22
 8002998:	4618      	mov	r0, r3
 800299a:	f000 ffef 	bl	800397c <Transmit_checksum>
 800299e:	4603      	mov	r3, r0
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <COM_Input_Parse3+0x278>)
 80029a4:	701a      	strb	r2, [r3, #0]

        parsebuf[len-24] = chk;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3b18      	subs	r3, #24
 80029aa:	4a19      	ldr	r2, [pc, #100]	; (8002a10 <COM_Input_Parse3+0x278>)
 80029ac:	7811      	ldrb	r1, [r2, #0]
 80029ae:	4a19      	ldr	r2, [pc, #100]	; (8002a14 <COM_Input_Parse3+0x27c>)
 80029b0:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-23] = 0x03;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	3b17      	subs	r3, #23
 80029b6:	4a17      	ldr	r2, [pc, #92]	; (8002a14 <COM_Input_Parse3+0x27c>)
 80029b8:	2103      	movs	r1, #3
 80029ba:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-22] = 0x0d;
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	3b16      	subs	r3, #22
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <COM_Input_Parse3+0x27c>)
 80029c2:	210d      	movs	r1, #13
 80029c4:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-21] = 0x0a;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	3b15      	subs	r3, #21
 80029ca:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <COM_Input_Parse3+0x27c>)
 80029cc:	210a      	movs	r1, #10
 80029ce:	54d1      	strb	r1, [r2, r3]

        memcpy(&_DG_tx_buf[com_port][0],&parsebuf[len-46], 26);
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	4a16      	ldr	r2, [pc, #88]	; (8002a34 <COM_Input_Parse3+0x29c>)
 80029dc:	1898      	adds	r0, r3, r2
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	3b2e      	subs	r3, #46	; 0x2e
 80029e2:	4a0c      	ldr	r2, [pc, #48]	; (8002a14 <COM_Input_Parse3+0x27c>)
 80029e4:	4413      	add	r3, r2
 80029e6:	221a      	movs	r2, #26
 80029e8:	4619      	mov	r1, r3
 80029ea:	f005 fcb5 	bl	8008358 <memcpy>

        memset(parsebuf, 0x00, 46);
 80029ee:	222e      	movs	r2, #46	; 0x2e
 80029f0:	2100      	movs	r1, #0
 80029f2:	4808      	ldr	r0, [pc, #32]	; (8002a14 <COM_Input_Parse3+0x27c>)
 80029f4:	f005 fc84 	bl	8008300 <memset>
        memset(val_savebuf, 0x00, 26);
 80029f8:	221a      	movs	r2, #26
 80029fa:	2100      	movs	r1, #0
 80029fc:	480b      	ldr	r0, [pc, #44]	; (8002a2c <COM_Input_Parse3+0x294>)
 80029fe:	f005 fc7f 	bl	8008300 <memset>


    }

}
 8002a02:	bf00      	nop
 8002a04:	3724      	adds	r7, #36	; 0x24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000070 	.word	0x20000070
 8002a10:	20001002 	.word	0x20001002
 8002a14:	20001004 	.word	0x20001004
 8002a18:	20001032 	.word	0x20001032
 8002a1c:	20001034 	.word	0x20001034
 8002a20:	88888889 	.word	0x88888889
 8002a24:	20001062 	.word	0x20001062
 8002a28:	cccccccd 	.word	0xcccccccd
 8002a2c:	20001064 	.word	0x20001064
 8002a30:	20001080 	.word	0x20001080
 8002a34:	20000c0c 	.word	0x20000c0c

08002a38 <COM_Input_Parse4>:

void COM_Input_Parse4(cx_uint8_t* bufptr, cx_uint_t len, cx_uint_t com_port)
{
 8002a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3a:	b089      	sub	sp, #36	; 0x24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
    cx_uint32_t m_val;

    // 변환할 값
    cx_uint16_t main_pulse_value;
    cx_uint16_t sub_pulse_value;
    cx_uint8_t inpuls_state = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	77fb      	strb	r3, [r7, #31]
    static cx_uint8_t prev_parsebuf[46] = {0, };
    // 정상 데이터 수신 확인 flag
    static cx_bool_t  bootup_flag = 0;

    // 랜덤 값 생성
    m_val = HAL_RNG_GetRandomNumber(&hrng);
 8002a48:	4898      	ldr	r0, [pc, #608]	; (8002cac <COM_Input_Parse4+0x274>)
 8002a4a:	f003 f91f 	bl	8005c8c <HAL_RNG_GetRandomNumber>
 8002a4e:	61b8      	str	r0, [r7, #24]

    static cx_uint8_t parsebuf[46];
    static cx_uint8_t val_savebuf[26];
    static cx_uint8_t hax_val_savebuf[2];
    static cx_uint8_t chk;
    chk =0;
 8002a50:	4b97      	ldr	r3, [pc, #604]	; (8002cb0 <COM_Input_Parse4+0x278>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]

    if (com_port == 4)  // COM1 처리
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	f040 8122 	bne.w	8002ca2 <COM_Input_Parse4+0x26a>
    {

        memcpy(parsebuf, bufptr, 46);
 8002a5e:	4a95      	ldr	r2, [pc, #596]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	461c      	mov	r4, r3
 8002a64:	4616      	mov	r6, r2
 8002a66:	f104 0c20 	add.w	ip, r4, #32
 8002a6a:	4635      	mov	r5, r6
 8002a6c:	4623      	mov	r3, r4
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a78:	3410      	adds	r4, #16
 8002a7a:	3610      	adds	r6, #16
 8002a7c:	4564      	cmp	r4, ip
 8002a7e:	d1f4      	bne.n	8002a6a <COM_Input_Parse4+0x32>
 8002a80:	4633      	mov	r3, r6
 8002a82:	6820      	ldr	r0, [r4, #0]
 8002a84:	6861      	ldr	r1, [r4, #4]
 8002a86:	68a2      	ldr	r2, [r4, #8]
 8002a88:	c307      	stmia	r3!, {r0, r1, r2}
 8002a8a:	89a2      	ldrh	r2, [r4, #12]
 8002a8c:	801a      	strh	r2, [r3, #0]
        inpuls_state = parsebuf[3];
 8002a8e:	4b89      	ldr	r3, [pc, #548]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002a90:	78db      	ldrb	r3, [r3, #3]
 8002a92:	77fb      	strb	r3, [r7, #31]

        if(inpuls_state != 0x34)
 8002a94:	7ffb      	ldrb	r3, [r7, #31]
 8002a96:	2b34      	cmp	r3, #52	; 0x34
 8002a98:	f000 8093 	beq.w	8002bc2 <COM_Input_Parse4+0x18a>
		{
			if(parsebuf[4] == 0x30)
 8002a9c:	4b85      	ldr	r3, [pc, #532]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002a9e:	791b      	ldrb	r3, [r3, #4]
 8002aa0:	2b30      	cmp	r3, #48	; 0x30
 8002aa2:	f040 8086 	bne.w	8002bb2 <COM_Input_Parse4+0x17a>
			{

				if (bootup_flag < 10) // 4번 수신까지 순차적으로 감소
 8002aa6:	4b84      	ldr	r3, [pc, #528]	; (8002cb8 <COM_Input_Parse4+0x280>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b09      	cmp	r3, #9
 8002aac:	f200 8089 	bhi.w	8002bc2 <COM_Input_Parse4+0x18a>
				{
					memcpy(&parsebuf[0], &prev_parsebuf[0], 46); //기존 정상 데이터 호출
 8002ab0:	222e      	movs	r2, #46	; 0x2e
 8002ab2:	4982      	ldr	r1, [pc, #520]	; (8002cbc <COM_Input_Parse4+0x284>)
 8002ab4:	487f      	ldr	r0, [pc, #508]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002ab6:	f005 fc4f 	bl	8008358 <memcpy>
					bootup_flag++;
 8002aba:	4b7f      	ldr	r3, [pc, #508]	; (8002cb8 <COM_Input_Parse4+0x280>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4b7d      	ldr	r3, [pc, #500]	; (8002cb8 <COM_Input_Parse4+0x280>)
 8002ac4:	701a      	strb	r2, [r3, #0]

					//변환이 필요한 정펄스값, 부펄스값 버퍼에 Overwrite
					main_pulse_value = 380 - (10 + m_val)%30 - 15; // 기본 380 ~ 350 +- 15
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	f103 010a 	add.w	r1, r3, #10
 8002acc:	4b7c      	ldr	r3, [pc, #496]	; (8002cc0 <COM_Input_Parse4+0x288>)
 8002ace:	fba3 2301 	umull	r2, r3, r3, r1
 8002ad2:	091a      	lsrs	r2, r3, #4
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	1aca      	subs	r2, r1, r3
 8002ade:	b293      	uxth	r3, r2
 8002ae0:	f5c3 73b6 	rsb	r3, r3, #364	; 0x16c
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	82fb      	strh	r3, [r7, #22]
					sub_pulse_value = 80 - (20+ m_val)%30 - 15; // 기본 80 ~ 20 +- 15
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f103 0114 	add.w	r1, r3, #20
 8002aee:	4b74      	ldr	r3, [pc, #464]	; (8002cc0 <COM_Input_Parse4+0x288>)
 8002af0:	fba3 2301 	umull	r2, r3, r3, r1
 8002af4:	091a      	lsrs	r2, r3, #4
 8002af6:	4613      	mov	r3, r2
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	1aca      	subs	r2, r1, r3
 8002b00:	b293      	uxth	r3, r2
 8002b02:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8002b06:	82bb      	strh	r3, [r7, #20]
					//변환이 필요한 특정 바이트 값 오버라이트

					for(i=0; i<3; i++)
 8002b08:	4b6e      	ldr	r3, [pc, #440]	; (8002cc4 <COM_Input_Parse4+0x28c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	e021      	b.n	8002b54 <COM_Input_Parse4+0x11c>
					{
						parsebuf[22+i]= main_pulse_value/POW(10,2)%10+'0';
 8002b10:	2102      	movs	r1, #2
 8002b12:	200a      	movs	r0, #10
 8002b14:	f7ff f970 	bl	8001df8 <POW>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	8afb      	ldrh	r3, [r7, #22]
 8002b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	4b68      	ldr	r3, [pc, #416]	; (8002cc8 <COM_Input_Parse4+0x290>)
 8002b26:	fba3 1302 	umull	r1, r3, r3, r2
 8002b2a:	08d9      	lsrs	r1, r3, #3
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4b62      	ldr	r3, [pc, #392]	; (8002cc4 <COM_Input_Parse4+0x28c>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	3316      	adds	r3, #22
 8002b40:	3230      	adds	r2, #48	; 0x30
 8002b42:	b2d1      	uxtb	r1, r2
 8002b44:	4a5b      	ldr	r2, [pc, #364]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002b46:	54d1      	strb	r1, [r2, r3]
					for(i=0; i<3; i++)
 8002b48:	4b5e      	ldr	r3, [pc, #376]	; (8002cc4 <COM_Input_Parse4+0x28c>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	4b5c      	ldr	r3, [pc, #368]	; (8002cc4 <COM_Input_Parse4+0x28c>)
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	4b5b      	ldr	r3, [pc, #364]	; (8002cc4 <COM_Input_Parse4+0x28c>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d9d9      	bls.n	8002b10 <COM_Input_Parse4+0xd8>
					}
					for(i=0; i<3; i++)
 8002b5c:	4b59      	ldr	r3, [pc, #356]	; (8002cc4 <COM_Input_Parse4+0x28c>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	e021      	b.n	8002ba8 <COM_Input_Parse4+0x170>
					{
						parsebuf[25+i]= sub_pulse_value/POW(10,2)%10+'0';
 8002b64:	2102      	movs	r1, #2
 8002b66:	200a      	movs	r0, #10
 8002b68:	f7ff f946 	bl	8001df8 <POW>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461a      	mov	r2, r3
 8002b70:	8abb      	ldrh	r3, [r7, #20]
 8002b72:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <COM_Input_Parse4+0x290>)
 8002b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b7e:	08d9      	lsrs	r1, r3, #3
 8002b80:	460b      	mov	r3, r1
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4b4d      	ldr	r3, [pc, #308]	; (8002cc4 <COM_Input_Parse4+0x28c>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	3319      	adds	r3, #25
 8002b94:	3230      	adds	r2, #48	; 0x30
 8002b96:	b2d1      	uxtb	r1, r2
 8002b98:	4a46      	ldr	r2, [pc, #280]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002b9a:	54d1      	strb	r1, [r2, r3]
					for(i=0; i<3; i++)
 8002b9c:	4b49      	ldr	r3, [pc, #292]	; (8002cc4 <COM_Input_Parse4+0x28c>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <COM_Input_Parse4+0x28c>)
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <COM_Input_Parse4+0x28c>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d9d9      	bls.n	8002b64 <COM_Input_Parse4+0x12c>
 8002bb0:	e007      	b.n	8002bc2 <COM_Input_Parse4+0x18a>
					}
				}
			}
            else
            {
                bootup_flag = 0; // 플래그 초기화
 8002bb2:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <COM_Input_Parse4+0x280>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
                memcpy(&prev_parsebuf[0], &parsebuf[0], 46); // 정상 데이터를 저장
 8002bb8:	222e      	movs	r2, #46	; 0x2e
 8002bba:	493e      	ldr	r1, [pc, #248]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002bbc:	483f      	ldr	r0, [pc, #252]	; (8002cbc <COM_Input_Parse4+0x284>)
 8002bbe:	f005 fbcb 	bl	8008358 <memcpy>
            }
        }

        parsebuf[31]=parsebuf[32];
 8002bc2:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002bc4:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002bc8:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002bca:	77da      	strb	r2, [r3, #31]
        parsebuf[32]=parsebuf[33];
 8002bcc:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002bce:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002bd4:	f883 2020 	strb.w	r2, [r3, #32]
        parsebuf[33]=0x30;
 8002bd8:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002bda:	2230      	movs	r2, #48	; 0x30
 8002bdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        ascii_to_bcd(&parsebuf[len-43], val_savebuf, 38);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	3b2b      	subs	r3, #43	; 0x2b
 8002be4:	4a33      	ldr	r2, [pc, #204]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002be6:	4413      	add	r3, r2
 8002be8:	2226      	movs	r2, #38	; 0x26
 8002bea:	4938      	ldr	r1, [pc, #224]	; (8002ccc <COM_Input_Parse4+0x294>)
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fe55 	bl	800389c <ascii_to_bcd>
        ascii_convert_to_hex(&parsebuf[len-45], hax_val_savebuf, 2);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	3b2d      	subs	r3, #45	; 0x2d
 8002bf6:	4a2f      	ldr	r2, [pc, #188]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002bf8:	4413      	add	r3, r2
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	4934      	ldr	r1, [pc, #208]	; (8002cd0 <COM_Input_Parse4+0x298>)
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fdaa 	bl	8003758 <ascii_convert_to_hex>
        parsebuf[len-45] = 0x04;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	3b2d      	subs	r3, #45	; 0x2d
 8002c08:	4a2a      	ldr	r2, [pc, #168]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002c0a:	2104      	movs	r1, #4
 8002c0c:	54d1      	strb	r1, [r2, r3]

        memcpy(&parsebuf[len-44],hax_val_savebuf, 1);
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	3b2c      	subs	r3, #44	; 0x2c
 8002c12:	4a28      	ldr	r2, [pc, #160]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002c14:	4413      	add	r3, r2
 8002c16:	4a2e      	ldr	r2, [pc, #184]	; (8002cd0 <COM_Input_Parse4+0x298>)
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	701a      	strb	r2, [r3, #0]
        memcpy(&parsebuf[len-43],val_savebuf, 19);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	3b2b      	subs	r3, #43	; 0x2b
 8002c20:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002c22:	4413      	add	r3, r2
 8002c24:	2213      	movs	r2, #19
 8002c26:	4929      	ldr	r1, [pc, #164]	; (8002ccc <COM_Input_Parse4+0x294>)
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f005 fb95 	bl	8008358 <memcpy>



        chk = Transmit_checksum(&parsebuf[len-46], 22);
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	3b2e      	subs	r3, #46	; 0x2e
 8002c32:	4a20      	ldr	r2, [pc, #128]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002c34:	4413      	add	r3, r2
 8002c36:	2116      	movs	r1, #22
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fe9f 	bl	800397c <Transmit_checksum>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	461a      	mov	r2, r3
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <COM_Input_Parse4+0x278>)
 8002c44:	701a      	strb	r2, [r3, #0]

        parsebuf[len-24] = chk;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	3b18      	subs	r3, #24
 8002c4a:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <COM_Input_Parse4+0x278>)
 8002c4c:	7811      	ldrb	r1, [r2, #0]
 8002c4e:	4a19      	ldr	r2, [pc, #100]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002c50:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-23] = 0x03;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3b17      	subs	r3, #23
 8002c56:	4a17      	ldr	r2, [pc, #92]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002c58:	2103      	movs	r1, #3
 8002c5a:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-22] = 0x0d;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	3b16      	subs	r3, #22
 8002c60:	4a14      	ldr	r2, [pc, #80]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002c62:	210d      	movs	r1, #13
 8002c64:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-21] = 0x0a;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	3b15      	subs	r3, #21
 8002c6a:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002c6c:	210a      	movs	r1, #10
 8002c6e:	54d1      	strb	r1, [r2, r3]

        memcpy(&_DG_tx_buf[com_port][0],&parsebuf[len-46], 26);
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4a16      	ldr	r2, [pc, #88]	; (8002cd4 <COM_Input_Parse4+0x29c>)
 8002c7c:	1898      	adds	r0, r3, r2
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	3b2e      	subs	r3, #46	; 0x2e
 8002c82:	4a0c      	ldr	r2, [pc, #48]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002c84:	4413      	add	r3, r2
 8002c86:	221a      	movs	r2, #26
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f005 fb65 	bl	8008358 <memcpy>

        memset(parsebuf, 0x00, 46);
 8002c8e:	222e      	movs	r2, #46	; 0x2e
 8002c90:	2100      	movs	r1, #0
 8002c92:	4808      	ldr	r0, [pc, #32]	; (8002cb4 <COM_Input_Parse4+0x27c>)
 8002c94:	f005 fb34 	bl	8008300 <memset>
        memset(val_savebuf, 0x00, 26);
 8002c98:	221a      	movs	r2, #26
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	480b      	ldr	r0, [pc, #44]	; (8002ccc <COM_Input_Parse4+0x294>)
 8002c9e:	f005 fb2f 	bl	8008300 <memset>


    }

}
 8002ca2:	bf00      	nop
 8002ca4:	3724      	adds	r7, #36	; 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000070 	.word	0x20000070
 8002cb0:	20001082 	.word	0x20001082
 8002cb4:	20001084 	.word	0x20001084
 8002cb8:	200010b2 	.word	0x200010b2
 8002cbc:	200010b4 	.word	0x200010b4
 8002cc0:	88888889 	.word	0x88888889
 8002cc4:	200010e2 	.word	0x200010e2
 8002cc8:	cccccccd 	.word	0xcccccccd
 8002ccc:	200010e4 	.word	0x200010e4
 8002cd0:	20001100 	.word	0x20001100
 8002cd4:	20000c0c 	.word	0x20000c0c

08002cd8 <COM_Input_Parse5>:

void COM_Input_Parse5(cx_uint8_t* bufptr, cx_uint_t len, cx_uint_t com_port)
{
 8002cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cda:	b089      	sub	sp, #36	; 0x24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
    cx_uint32_t m_val;

    // 변환할 값
    cx_uint16_t main_pulse_value;
    cx_uint16_t sub_pulse_value;
    cx_uint8_t inpuls_state = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	77fb      	strb	r3, [r7, #31]
    static cx_uint8_t prev_parsebuf[46] = {0, };
    // 정상 데이터 수신 확인 flag
    static cx_bool_t  bootup_flag = 0;

    // 랜덤 값 생성
    m_val = HAL_RNG_GetRandomNumber(&hrng);
 8002ce8:	4898      	ldr	r0, [pc, #608]	; (8002f4c <COM_Input_Parse5+0x274>)
 8002cea:	f002 ffcf 	bl	8005c8c <HAL_RNG_GetRandomNumber>
 8002cee:	61b8      	str	r0, [r7, #24]

    static cx_uint8_t parsebuf[46];
    static cx_uint8_t val_savebuf[26];
    static cx_uint8_t hax_val_savebuf[2];
    static cx_uint8_t chk;
    chk =0;
 8002cf0:	4b97      	ldr	r3, [pc, #604]	; (8002f50 <COM_Input_Parse5+0x278>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]

    if (com_port == 5)  // COM1 처리
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	f040 8122 	bne.w	8002f42 <COM_Input_Parse5+0x26a>
    {

        memcpy(parsebuf, bufptr, 46);
 8002cfe:	4a95      	ldr	r2, [pc, #596]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	461c      	mov	r4, r3
 8002d04:	4616      	mov	r6, r2
 8002d06:	f104 0c20 	add.w	ip, r4, #32
 8002d0a:	4635      	mov	r5, r6
 8002d0c:	4623      	mov	r3, r4
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	6859      	ldr	r1, [r3, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d18:	3410      	adds	r4, #16
 8002d1a:	3610      	adds	r6, #16
 8002d1c:	4564      	cmp	r4, ip
 8002d1e:	d1f4      	bne.n	8002d0a <COM_Input_Parse5+0x32>
 8002d20:	4633      	mov	r3, r6
 8002d22:	6820      	ldr	r0, [r4, #0]
 8002d24:	6861      	ldr	r1, [r4, #4]
 8002d26:	68a2      	ldr	r2, [r4, #8]
 8002d28:	c307      	stmia	r3!, {r0, r1, r2}
 8002d2a:	89a2      	ldrh	r2, [r4, #12]
 8002d2c:	801a      	strh	r2, [r3, #0]
        inpuls_state = parsebuf[3];
 8002d2e:	4b89      	ldr	r3, [pc, #548]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002d30:	78db      	ldrb	r3, [r3, #3]
 8002d32:	77fb      	strb	r3, [r7, #31]

        if(inpuls_state != 0x34)
 8002d34:	7ffb      	ldrb	r3, [r7, #31]
 8002d36:	2b34      	cmp	r3, #52	; 0x34
 8002d38:	f000 8093 	beq.w	8002e62 <COM_Input_Parse5+0x18a>
		{
			if(parsebuf[4] == 0x30)
 8002d3c:	4b85      	ldr	r3, [pc, #532]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002d3e:	791b      	ldrb	r3, [r3, #4]
 8002d40:	2b30      	cmp	r3, #48	; 0x30
 8002d42:	f040 8086 	bne.w	8002e52 <COM_Input_Parse5+0x17a>
			{

				if (bootup_flag < 10) // 4번 수신까지 순차적으로 감소
 8002d46:	4b84      	ldr	r3, [pc, #528]	; (8002f58 <COM_Input_Parse5+0x280>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b09      	cmp	r3, #9
 8002d4c:	f200 8089 	bhi.w	8002e62 <COM_Input_Parse5+0x18a>
				{
					memcpy(&parsebuf[0], &prev_parsebuf[0], 46); //기존 정상 데이터 호출
 8002d50:	222e      	movs	r2, #46	; 0x2e
 8002d52:	4982      	ldr	r1, [pc, #520]	; (8002f5c <COM_Input_Parse5+0x284>)
 8002d54:	487f      	ldr	r0, [pc, #508]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002d56:	f005 faff 	bl	8008358 <memcpy>
					bootup_flag++;
 8002d5a:	4b7f      	ldr	r3, [pc, #508]	; (8002f58 <COM_Input_Parse5+0x280>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	4b7d      	ldr	r3, [pc, #500]	; (8002f58 <COM_Input_Parse5+0x280>)
 8002d64:	701a      	strb	r2, [r3, #0]

					//변환이 필요한 정펄스값, 부펄스값 버퍼에 Overwrite
					main_pulse_value = 380 - (10 + m_val)%30 - 15; // 기본 380 ~ 350 +- 15
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f103 010a 	add.w	r1, r3, #10
 8002d6c:	4b7c      	ldr	r3, [pc, #496]	; (8002f60 <COM_Input_Parse5+0x288>)
 8002d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d72:	091a      	lsrs	r2, r3, #4
 8002d74:	4613      	mov	r3, r2
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	1aca      	subs	r2, r1, r3
 8002d7e:	b293      	uxth	r3, r2
 8002d80:	f5c3 73b6 	rsb	r3, r3, #364	; 0x16c
 8002d84:	3301      	adds	r3, #1
 8002d86:	82fb      	strh	r3, [r7, #22]
					sub_pulse_value = 80 - (20+ m_val)%30 - 15; // 기본 80 ~ 20 +- 15
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	f103 0114 	add.w	r1, r3, #20
 8002d8e:	4b74      	ldr	r3, [pc, #464]	; (8002f60 <COM_Input_Parse5+0x288>)
 8002d90:	fba3 2301 	umull	r2, r3, r3, r1
 8002d94:	091a      	lsrs	r2, r3, #4
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	1aca      	subs	r2, r1, r3
 8002da0:	b293      	uxth	r3, r2
 8002da2:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8002da6:	82bb      	strh	r3, [r7, #20]
					//변환이 필요한 특정 바이트 값 오버라이트

					for(i=0; i<3; i++)
 8002da8:	4b6e      	ldr	r3, [pc, #440]	; (8002f64 <COM_Input_Parse5+0x28c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
 8002dae:	e021      	b.n	8002df4 <COM_Input_Parse5+0x11c>
					{
						parsebuf[22+i]= main_pulse_value/POW(10,2)%10+'0';
 8002db0:	2102      	movs	r1, #2
 8002db2:	200a      	movs	r0, #10
 8002db4:	f7ff f820 	bl	8001df8 <POW>
 8002db8:	4603      	mov	r3, r0
 8002dba:	461a      	mov	r2, r3
 8002dbc:	8afb      	ldrh	r3, [r7, #22]
 8002dbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	4b68      	ldr	r3, [pc, #416]	; (8002f68 <COM_Input_Parse5+0x290>)
 8002dc6:	fba3 1302 	umull	r1, r3, r3, r2
 8002dca:	08d9      	lsrs	r1, r3, #3
 8002dcc:	460b      	mov	r3, r1
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4b62      	ldr	r3, [pc, #392]	; (8002f64 <COM_Input_Parse5+0x28c>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	3316      	adds	r3, #22
 8002de0:	3230      	adds	r2, #48	; 0x30
 8002de2:	b2d1      	uxtb	r1, r2
 8002de4:	4a5b      	ldr	r2, [pc, #364]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002de6:	54d1      	strb	r1, [r2, r3]
					for(i=0; i<3; i++)
 8002de8:	4b5e      	ldr	r3, [pc, #376]	; (8002f64 <COM_Input_Parse5+0x28c>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	3301      	adds	r3, #1
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	4b5c      	ldr	r3, [pc, #368]	; (8002f64 <COM_Input_Parse5+0x28c>)
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	4b5b      	ldr	r3, [pc, #364]	; (8002f64 <COM_Input_Parse5+0x28c>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d9d9      	bls.n	8002db0 <COM_Input_Parse5+0xd8>
					}
					for(i=0; i<3; i++)
 8002dfc:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <COM_Input_Parse5+0x28c>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e021      	b.n	8002e48 <COM_Input_Parse5+0x170>
					{
						parsebuf[25+i]= sub_pulse_value/POW(10,2)%10+'0';
 8002e04:	2102      	movs	r1, #2
 8002e06:	200a      	movs	r0, #10
 8002e08:	f7fe fff6 	bl	8001df8 <POW>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	8abb      	ldrh	r3, [r7, #20]
 8002e12:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <COM_Input_Parse5+0x290>)
 8002e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e1e:	08d9      	lsrs	r1, r3, #3
 8002e20:	460b      	mov	r3, r1
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4b4d      	ldr	r3, [pc, #308]	; (8002f64 <COM_Input_Parse5+0x28c>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	3319      	adds	r3, #25
 8002e34:	3230      	adds	r2, #48	; 0x30
 8002e36:	b2d1      	uxtb	r1, r2
 8002e38:	4a46      	ldr	r2, [pc, #280]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002e3a:	54d1      	strb	r1, [r2, r3]
					for(i=0; i<3; i++)
 8002e3c:	4b49      	ldr	r3, [pc, #292]	; (8002f64 <COM_Input_Parse5+0x28c>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <COM_Input_Parse5+0x28c>)
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	4b46      	ldr	r3, [pc, #280]	; (8002f64 <COM_Input_Parse5+0x28c>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d9d9      	bls.n	8002e04 <COM_Input_Parse5+0x12c>
 8002e50:	e007      	b.n	8002e62 <COM_Input_Parse5+0x18a>
					}
				}
			}
			else
			{
				bootup_flag = 0; // 플래그 초기화
 8002e52:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <COM_Input_Parse5+0x280>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
				memcpy(&prev_parsebuf[0], &parsebuf[0], 46); // 정상 데이터를 저장
 8002e58:	222e      	movs	r2, #46	; 0x2e
 8002e5a:	493e      	ldr	r1, [pc, #248]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002e5c:	483f      	ldr	r0, [pc, #252]	; (8002f5c <COM_Input_Parse5+0x284>)
 8002e5e:	f005 fa7b 	bl	8008358 <memcpy>
			}
        }

        parsebuf[31]=parsebuf[32];
 8002e62:	4b3c      	ldr	r3, [pc, #240]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002e64:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002e68:	4b3a      	ldr	r3, [pc, #232]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002e6a:	77da      	strb	r2, [r3, #31]
        parsebuf[32]=parsebuf[33];
 8002e6c:	4b39      	ldr	r3, [pc, #228]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002e6e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8002e72:	4b38      	ldr	r3, [pc, #224]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002e74:	f883 2020 	strb.w	r2, [r3, #32]
        parsebuf[33]=0x30;
 8002e78:	4b36      	ldr	r3, [pc, #216]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002e7a:	2230      	movs	r2, #48	; 0x30
 8002e7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        ascii_to_bcd(&parsebuf[len-43], val_savebuf, 38);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	3b2b      	subs	r3, #43	; 0x2b
 8002e84:	4a33      	ldr	r2, [pc, #204]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002e86:	4413      	add	r3, r2
 8002e88:	2226      	movs	r2, #38	; 0x26
 8002e8a:	4938      	ldr	r1, [pc, #224]	; (8002f6c <COM_Input_Parse5+0x294>)
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fd05 	bl	800389c <ascii_to_bcd>
        ascii_convert_to_hex(&parsebuf[len-45], hax_val_savebuf, 2);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	3b2d      	subs	r3, #45	; 0x2d
 8002e96:	4a2f      	ldr	r2, [pc, #188]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002e98:	4413      	add	r3, r2
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	4934      	ldr	r1, [pc, #208]	; (8002f70 <COM_Input_Parse5+0x298>)
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fc5a 	bl	8003758 <ascii_convert_to_hex>
        parsebuf[len-45] = 0x05;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	3b2d      	subs	r3, #45	; 0x2d
 8002ea8:	4a2a      	ldr	r2, [pc, #168]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002eaa:	2105      	movs	r1, #5
 8002eac:	54d1      	strb	r1, [r2, r3]

        memcpy(&parsebuf[len-44],hax_val_savebuf, 1);
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	3b2c      	subs	r3, #44	; 0x2c
 8002eb2:	4a28      	ldr	r2, [pc, #160]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002eb4:	4413      	add	r3, r2
 8002eb6:	4a2e      	ldr	r2, [pc, #184]	; (8002f70 <COM_Input_Parse5+0x298>)
 8002eb8:	7812      	ldrb	r2, [r2, #0]
 8002eba:	701a      	strb	r2, [r3, #0]
        memcpy(&parsebuf[len-43],val_savebuf, 19);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	3b2b      	subs	r3, #43	; 0x2b
 8002ec0:	4a24      	ldr	r2, [pc, #144]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002ec2:	4413      	add	r3, r2
 8002ec4:	2213      	movs	r2, #19
 8002ec6:	4929      	ldr	r1, [pc, #164]	; (8002f6c <COM_Input_Parse5+0x294>)
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f005 fa45 	bl	8008358 <memcpy>



        chk = Transmit_checksum(&parsebuf[len-46], 22);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	3b2e      	subs	r3, #46	; 0x2e
 8002ed2:	4a20      	ldr	r2, [pc, #128]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002ed4:	4413      	add	r3, r2
 8002ed6:	2116      	movs	r1, #22
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fd4f 	bl	800397c <Transmit_checksum>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <COM_Input_Parse5+0x278>)
 8002ee4:	701a      	strb	r2, [r3, #0]

        parsebuf[len-24] = chk;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	3b18      	subs	r3, #24
 8002eea:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <COM_Input_Parse5+0x278>)
 8002eec:	7811      	ldrb	r1, [r2, #0]
 8002eee:	4a19      	ldr	r2, [pc, #100]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002ef0:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-23] = 0x03;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	3b17      	subs	r3, #23
 8002ef6:	4a17      	ldr	r2, [pc, #92]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002ef8:	2103      	movs	r1, #3
 8002efa:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-22] = 0x0d;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	3b16      	subs	r3, #22
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002f02:	210d      	movs	r1, #13
 8002f04:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-21] = 0x0a;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	3b15      	subs	r3, #21
 8002f0a:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002f0c:	210a      	movs	r1, #10
 8002f0e:	54d1      	strb	r1, [r2, r3]

        memcpy(&_DG_tx_buf[com_port][0],&parsebuf[len-46], 26);
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <COM_Input_Parse5+0x29c>)
 8002f1c:	1898      	adds	r0, r3, r2
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	3b2e      	subs	r3, #46	; 0x2e
 8002f22:	4a0c      	ldr	r2, [pc, #48]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002f24:	4413      	add	r3, r2
 8002f26:	221a      	movs	r2, #26
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f005 fa15 	bl	8008358 <memcpy>

        memset(parsebuf, 0x00, 46);
 8002f2e:	222e      	movs	r2, #46	; 0x2e
 8002f30:	2100      	movs	r1, #0
 8002f32:	4808      	ldr	r0, [pc, #32]	; (8002f54 <COM_Input_Parse5+0x27c>)
 8002f34:	f005 f9e4 	bl	8008300 <memset>
        memset(val_savebuf, 0x00, 26);
 8002f38:	221a      	movs	r2, #26
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	480b      	ldr	r0, [pc, #44]	; (8002f6c <COM_Input_Parse5+0x294>)
 8002f3e:	f005 f9df 	bl	8008300 <memset>


    }

}
 8002f42:	bf00      	nop
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000070 	.word	0x20000070
 8002f50:	20001102 	.word	0x20001102
 8002f54:	20001104 	.word	0x20001104
 8002f58:	20001132 	.word	0x20001132
 8002f5c:	20001134 	.word	0x20001134
 8002f60:	88888889 	.word	0x88888889
 8002f64:	20001162 	.word	0x20001162
 8002f68:	cccccccd 	.word	0xcccccccd
 8002f6c:	20001164 	.word	0x20001164
 8002f70:	20001180 	.word	0x20001180
 8002f74:	20000c0c 	.word	0x20000c0c

08002f78 <COM_Input_Parse6>:

void COM_Input_Parse6(cx_uint8_t* bufptr, cx_uint_t len, cx_uint_t com_port)
{
 8002f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f7a:	b089      	sub	sp, #36	; 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
	    cx_uint32_t m_val;

	    // 변환할 값
	    cx_uint16_t main_pulse_value;
	    cx_uint16_t sub_pulse_value;
	    cx_uint8_t inpuls_state = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	77fb      	strb	r3, [r7, #31]
	    static cx_uint8_t prev_parsebuf[46] = {0, };
	    // 정상 데이터 수신 확인 flag
	    static cx_bool_t  bootup_flag = 0;

	    // 랜덤 값 생성
	    m_val = HAL_RNG_GetRandomNumber(&hrng);
 8002f88:	4898      	ldr	r0, [pc, #608]	; (80031ec <COM_Input_Parse6+0x274>)
 8002f8a:	f002 fe7f 	bl	8005c8c <HAL_RNG_GetRandomNumber>
 8002f8e:	61b8      	str	r0, [r7, #24]

	    static cx_uint8_t parsebuf[46];
	    static cx_uint8_t val_savebuf[26];
	    static cx_uint8_t hax_val_savebuf[2];
	    static cx_uint8_t chk;
	    chk =0;
 8002f90:	4b97      	ldr	r3, [pc, #604]	; (80031f0 <COM_Input_Parse6+0x278>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]

	    if (com_port == 6)  // COM1 처리
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b06      	cmp	r3, #6
 8002f9a:	f040 8122 	bne.w	80031e2 <COM_Input_Parse6+0x26a>
	    {

	        memcpy(parsebuf, bufptr, 46);
 8002f9e:	4a95      	ldr	r2, [pc, #596]	; (80031f4 <COM_Input_Parse6+0x27c>)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	461c      	mov	r4, r3
 8002fa4:	4616      	mov	r6, r2
 8002fa6:	f104 0c20 	add.w	ip, r4, #32
 8002faa:	4635      	mov	r5, r6
 8002fac:	4623      	mov	r3, r4
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	6859      	ldr	r1, [r3, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb8:	3410      	adds	r4, #16
 8002fba:	3610      	adds	r6, #16
 8002fbc:	4564      	cmp	r4, ip
 8002fbe:	d1f4      	bne.n	8002faa <COM_Input_Parse6+0x32>
 8002fc0:	4633      	mov	r3, r6
 8002fc2:	6820      	ldr	r0, [r4, #0]
 8002fc4:	6861      	ldr	r1, [r4, #4]
 8002fc6:	68a2      	ldr	r2, [r4, #8]
 8002fc8:	c307      	stmia	r3!, {r0, r1, r2}
 8002fca:	89a2      	ldrh	r2, [r4, #12]
 8002fcc:	801a      	strh	r2, [r3, #0]
	        inpuls_state = parsebuf[3];
 8002fce:	4b89      	ldr	r3, [pc, #548]	; (80031f4 <COM_Input_Parse6+0x27c>)
 8002fd0:	78db      	ldrb	r3, [r3, #3]
 8002fd2:	77fb      	strb	r3, [r7, #31]

	        if(inpuls_state != 0x34)
 8002fd4:	7ffb      	ldrb	r3, [r7, #31]
 8002fd6:	2b34      	cmp	r3, #52	; 0x34
 8002fd8:	f000 8093 	beq.w	8003102 <COM_Input_Parse6+0x18a>
			{
				if(parsebuf[4] == 0x30)
 8002fdc:	4b85      	ldr	r3, [pc, #532]	; (80031f4 <COM_Input_Parse6+0x27c>)
 8002fde:	791b      	ldrb	r3, [r3, #4]
 8002fe0:	2b30      	cmp	r3, #48	; 0x30
 8002fe2:	f040 8086 	bne.w	80030f2 <COM_Input_Parse6+0x17a>
				{

					if (bootup_flag < 10) // 4번 수신까지 순차적으로 감소
 8002fe6:	4b84      	ldr	r3, [pc, #528]	; (80031f8 <COM_Input_Parse6+0x280>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b09      	cmp	r3, #9
 8002fec:	f200 8089 	bhi.w	8003102 <COM_Input_Parse6+0x18a>
					{
						memcpy(&parsebuf[0], &prev_parsebuf[0], 46); //기존 정상 데이터 호출
 8002ff0:	222e      	movs	r2, #46	; 0x2e
 8002ff2:	4982      	ldr	r1, [pc, #520]	; (80031fc <COM_Input_Parse6+0x284>)
 8002ff4:	487f      	ldr	r0, [pc, #508]	; (80031f4 <COM_Input_Parse6+0x27c>)
 8002ff6:	f005 f9af 	bl	8008358 <memcpy>
						bootup_flag++;
 8002ffa:	4b7f      	ldr	r3, [pc, #508]	; (80031f8 <COM_Input_Parse6+0x280>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	3301      	adds	r3, #1
 8003000:	b2da      	uxtb	r2, r3
 8003002:	4b7d      	ldr	r3, [pc, #500]	; (80031f8 <COM_Input_Parse6+0x280>)
 8003004:	701a      	strb	r2, [r3, #0]

						//변환이 필요한 정펄스값, 부펄스값 버퍼에 Overwrite
						main_pulse_value = 380 - (10 + m_val)%30 - 15; // 기본 380 ~ 350 +- 15
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f103 010a 	add.w	r1, r3, #10
 800300c:	4b7c      	ldr	r3, [pc, #496]	; (8003200 <COM_Input_Parse6+0x288>)
 800300e:	fba3 2301 	umull	r2, r3, r3, r1
 8003012:	091a      	lsrs	r2, r3, #4
 8003014:	4613      	mov	r3, r2
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	1aca      	subs	r2, r1, r3
 800301e:	b293      	uxth	r3, r2
 8003020:	f5c3 73b6 	rsb	r3, r3, #364	; 0x16c
 8003024:	3301      	adds	r3, #1
 8003026:	82fb      	strh	r3, [r7, #22]
						sub_pulse_value = 80 - (20+ m_val)%30 - 15; // 기본 80 ~ 20 +- 15
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	f103 0114 	add.w	r1, r3, #20
 800302e:	4b74      	ldr	r3, [pc, #464]	; (8003200 <COM_Input_Parse6+0x288>)
 8003030:	fba3 2301 	umull	r2, r3, r3, r1
 8003034:	091a      	lsrs	r2, r3, #4
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	1aca      	subs	r2, r1, r3
 8003040:	b293      	uxth	r3, r2
 8003042:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8003046:	82bb      	strh	r3, [r7, #20]
						//변환이 필요한 특정 바이트 값 오버라이트

						for(i=0; i<3; i++)
 8003048:	4b6e      	ldr	r3, [pc, #440]	; (8003204 <COM_Input_Parse6+0x28c>)
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
 800304e:	e021      	b.n	8003094 <COM_Input_Parse6+0x11c>
						{
							parsebuf[22+i]= main_pulse_value/POW(10,2)%10+'0';
 8003050:	2102      	movs	r1, #2
 8003052:	200a      	movs	r0, #10
 8003054:	f7fe fed0 	bl	8001df8 <POW>
 8003058:	4603      	mov	r3, r0
 800305a:	461a      	mov	r2, r3
 800305c:	8afb      	ldrh	r3, [r7, #22]
 800305e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003062:	b29a      	uxth	r2, r3
 8003064:	4b68      	ldr	r3, [pc, #416]	; (8003208 <COM_Input_Parse6+0x290>)
 8003066:	fba3 1302 	umull	r1, r3, r3, r2
 800306a:	08d9      	lsrs	r1, r3, #3
 800306c:	460b      	mov	r3, r1
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	b29b      	uxth	r3, r3
 8003078:	b2da      	uxtb	r2, r3
 800307a:	4b62      	ldr	r3, [pc, #392]	; (8003204 <COM_Input_Parse6+0x28c>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	3316      	adds	r3, #22
 8003080:	3230      	adds	r2, #48	; 0x30
 8003082:	b2d1      	uxtb	r1, r2
 8003084:	4a5b      	ldr	r2, [pc, #364]	; (80031f4 <COM_Input_Parse6+0x27c>)
 8003086:	54d1      	strb	r1, [r2, r3]
						for(i=0; i<3; i++)
 8003088:	4b5e      	ldr	r3, [pc, #376]	; (8003204 <COM_Input_Parse6+0x28c>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	3301      	adds	r3, #1
 800308e:	b2da      	uxtb	r2, r3
 8003090:	4b5c      	ldr	r3, [pc, #368]	; (8003204 <COM_Input_Parse6+0x28c>)
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	4b5b      	ldr	r3, [pc, #364]	; (8003204 <COM_Input_Parse6+0x28c>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d9d9      	bls.n	8003050 <COM_Input_Parse6+0xd8>
						}
						for(i=0; i<3; i++)
 800309c:	4b59      	ldr	r3, [pc, #356]	; (8003204 <COM_Input_Parse6+0x28c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
 80030a2:	e021      	b.n	80030e8 <COM_Input_Parse6+0x170>
						{
							parsebuf[25+i]= sub_pulse_value/POW(10,2)%10+'0';
 80030a4:	2102      	movs	r1, #2
 80030a6:	200a      	movs	r0, #10
 80030a8:	f7fe fea6 	bl	8001df8 <POW>
 80030ac:	4603      	mov	r3, r0
 80030ae:	461a      	mov	r2, r3
 80030b0:	8abb      	ldrh	r3, [r7, #20]
 80030b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	4b53      	ldr	r3, [pc, #332]	; (8003208 <COM_Input_Parse6+0x290>)
 80030ba:	fba3 1302 	umull	r1, r3, r3, r2
 80030be:	08d9      	lsrs	r1, r3, #3
 80030c0:	460b      	mov	r3, r1
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	4b4d      	ldr	r3, [pc, #308]	; (8003204 <COM_Input_Parse6+0x28c>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	3319      	adds	r3, #25
 80030d4:	3230      	adds	r2, #48	; 0x30
 80030d6:	b2d1      	uxtb	r1, r2
 80030d8:	4a46      	ldr	r2, [pc, #280]	; (80031f4 <COM_Input_Parse6+0x27c>)
 80030da:	54d1      	strb	r1, [r2, r3]
						for(i=0; i<3; i++)
 80030dc:	4b49      	ldr	r3, [pc, #292]	; (8003204 <COM_Input_Parse6+0x28c>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	3301      	adds	r3, #1
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	4b47      	ldr	r3, [pc, #284]	; (8003204 <COM_Input_Parse6+0x28c>)
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	4b46      	ldr	r3, [pc, #280]	; (8003204 <COM_Input_Parse6+0x28c>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d9d9      	bls.n	80030a4 <COM_Input_Parse6+0x12c>
 80030f0:	e007      	b.n	8003102 <COM_Input_Parse6+0x18a>
						}
					}
				}
				else
				{
					bootup_flag = 0; // 플래그 초기화
 80030f2:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <COM_Input_Parse6+0x280>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
					memcpy(&prev_parsebuf[0], &parsebuf[0], 46); // 정상 데이터를 저장
 80030f8:	222e      	movs	r2, #46	; 0x2e
 80030fa:	493e      	ldr	r1, [pc, #248]	; (80031f4 <COM_Input_Parse6+0x27c>)
 80030fc:	483f      	ldr	r0, [pc, #252]	; (80031fc <COM_Input_Parse6+0x284>)
 80030fe:	f005 f92b 	bl	8008358 <memcpy>
				}
	        }

	        parsebuf[31]=parsebuf[32];
 8003102:	4b3c      	ldr	r3, [pc, #240]	; (80031f4 <COM_Input_Parse6+0x27c>)
 8003104:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003108:	4b3a      	ldr	r3, [pc, #232]	; (80031f4 <COM_Input_Parse6+0x27c>)
 800310a:	77da      	strb	r2, [r3, #31]
	        parsebuf[32]=parsebuf[33];
 800310c:	4b39      	ldr	r3, [pc, #228]	; (80031f4 <COM_Input_Parse6+0x27c>)
 800310e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8003112:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <COM_Input_Parse6+0x27c>)
 8003114:	f883 2020 	strb.w	r2, [r3, #32]
	        parsebuf[33]=0x30;
 8003118:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <COM_Input_Parse6+0x27c>)
 800311a:	2230      	movs	r2, #48	; 0x30
 800311c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	        ascii_to_bcd(&parsebuf[len-43], val_savebuf, 38);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	3b2b      	subs	r3, #43	; 0x2b
 8003124:	4a33      	ldr	r2, [pc, #204]	; (80031f4 <COM_Input_Parse6+0x27c>)
 8003126:	4413      	add	r3, r2
 8003128:	2226      	movs	r2, #38	; 0x26
 800312a:	4938      	ldr	r1, [pc, #224]	; (800320c <COM_Input_Parse6+0x294>)
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fbb5 	bl	800389c <ascii_to_bcd>
	        ascii_convert_to_hex(&parsebuf[len-45], hax_val_savebuf, 2);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	3b2d      	subs	r3, #45	; 0x2d
 8003136:	4a2f      	ldr	r2, [pc, #188]	; (80031f4 <COM_Input_Parse6+0x27c>)
 8003138:	4413      	add	r3, r2
 800313a:	2202      	movs	r2, #2
 800313c:	4934      	ldr	r1, [pc, #208]	; (8003210 <COM_Input_Parse6+0x298>)
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fb0a 	bl	8003758 <ascii_convert_to_hex>
	        parsebuf[len-45] = 0x06;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3b2d      	subs	r3, #45	; 0x2d
 8003148:	4a2a      	ldr	r2, [pc, #168]	; (80031f4 <COM_Input_Parse6+0x27c>)
 800314a:	2106      	movs	r1, #6
 800314c:	54d1      	strb	r1, [r2, r3]

	        memcpy(&parsebuf[len-44],hax_val_savebuf, 1);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	3b2c      	subs	r3, #44	; 0x2c
 8003152:	4a28      	ldr	r2, [pc, #160]	; (80031f4 <COM_Input_Parse6+0x27c>)
 8003154:	4413      	add	r3, r2
 8003156:	4a2e      	ldr	r2, [pc, #184]	; (8003210 <COM_Input_Parse6+0x298>)
 8003158:	7812      	ldrb	r2, [r2, #0]
 800315a:	701a      	strb	r2, [r3, #0]
	        memcpy(&parsebuf[len-43],val_savebuf, 19);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	3b2b      	subs	r3, #43	; 0x2b
 8003160:	4a24      	ldr	r2, [pc, #144]	; (80031f4 <COM_Input_Parse6+0x27c>)
 8003162:	4413      	add	r3, r2
 8003164:	2213      	movs	r2, #19
 8003166:	4929      	ldr	r1, [pc, #164]	; (800320c <COM_Input_Parse6+0x294>)
 8003168:	4618      	mov	r0, r3
 800316a:	f005 f8f5 	bl	8008358 <memcpy>



	        chk = Transmit_checksum(&parsebuf[len-46], 22);
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	3b2e      	subs	r3, #46	; 0x2e
 8003172:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <COM_Input_Parse6+0x27c>)
 8003174:	4413      	add	r3, r2
 8003176:	2116      	movs	r1, #22
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fbff 	bl	800397c <Transmit_checksum>
 800317e:	4603      	mov	r3, r0
 8003180:	461a      	mov	r2, r3
 8003182:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <COM_Input_Parse6+0x278>)
 8003184:	701a      	strb	r2, [r3, #0]

	        parsebuf[len-24] = chk;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	3b18      	subs	r3, #24
 800318a:	4a19      	ldr	r2, [pc, #100]	; (80031f0 <COM_Input_Parse6+0x278>)
 800318c:	7811      	ldrb	r1, [r2, #0]
 800318e:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <COM_Input_Parse6+0x27c>)
 8003190:	54d1      	strb	r1, [r2, r3]
	        parsebuf[len-23] = 0x03;
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	3b17      	subs	r3, #23
 8003196:	4a17      	ldr	r2, [pc, #92]	; (80031f4 <COM_Input_Parse6+0x27c>)
 8003198:	2103      	movs	r1, #3
 800319a:	54d1      	strb	r1, [r2, r3]
	        parsebuf[len-22] = 0x0d;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	3b16      	subs	r3, #22
 80031a0:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <COM_Input_Parse6+0x27c>)
 80031a2:	210d      	movs	r1, #13
 80031a4:	54d1      	strb	r1, [r2, r3]
	        parsebuf[len-21] = 0x0a;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	3b15      	subs	r3, #21
 80031aa:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <COM_Input_Parse6+0x27c>)
 80031ac:	210a      	movs	r1, #10
 80031ae:	54d1      	strb	r1, [r2, r3]

	        memcpy(&_DG_tx_buf[com_port][0],&parsebuf[len-46], 26);
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4a16      	ldr	r2, [pc, #88]	; (8003214 <COM_Input_Parse6+0x29c>)
 80031bc:	1898      	adds	r0, r3, r2
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	3b2e      	subs	r3, #46	; 0x2e
 80031c2:	4a0c      	ldr	r2, [pc, #48]	; (80031f4 <COM_Input_Parse6+0x27c>)
 80031c4:	4413      	add	r3, r2
 80031c6:	221a      	movs	r2, #26
 80031c8:	4619      	mov	r1, r3
 80031ca:	f005 f8c5 	bl	8008358 <memcpy>

	        memset(parsebuf, 0x00, 46);
 80031ce:	222e      	movs	r2, #46	; 0x2e
 80031d0:	2100      	movs	r1, #0
 80031d2:	4808      	ldr	r0, [pc, #32]	; (80031f4 <COM_Input_Parse6+0x27c>)
 80031d4:	f005 f894 	bl	8008300 <memset>
	        memset(val_savebuf, 0x00, 26);
 80031d8:	221a      	movs	r2, #26
 80031da:	2100      	movs	r1, #0
 80031dc:	480b      	ldr	r0, [pc, #44]	; (800320c <COM_Input_Parse6+0x294>)
 80031de:	f005 f88f 	bl	8008300 <memset>


	    }

}
 80031e2:	bf00      	nop
 80031e4:	3724      	adds	r7, #36	; 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000070 	.word	0x20000070
 80031f0:	20001182 	.word	0x20001182
 80031f4:	20001184 	.word	0x20001184
 80031f8:	200011b2 	.word	0x200011b2
 80031fc:	200011b4 	.word	0x200011b4
 8003200:	88888889 	.word	0x88888889
 8003204:	200011e2 	.word	0x200011e2
 8003208:	cccccccd 	.word	0xcccccccd
 800320c:	200011e4 	.word	0x200011e4
 8003210:	20001200 	.word	0x20001200
 8003214:	20000c0c 	.word	0x20000c0c

08003218 <COM_Input_Parse7>:

void COM_Input_Parse7(cx_uint8_t* bufptr, cx_uint_t len, cx_uint_t com_port)
{
 8003218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
    cx_uint32_t m_val;

    // 변환할 값
    cx_uint16_t main_pulse_value;
    cx_uint16_t sub_pulse_value;
    cx_uint8_t inpuls_state = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	77fb      	strb	r3, [r7, #31]
    static cx_uint8_t prev_parsebuf[46] = {0, };
    // 정상 데이터 수신 확인 flag
    static cx_bool_t  bootup_flag = 0;

    // 랜덤 값 생성
    m_val = HAL_RNG_GetRandomNumber(&hrng);
 8003228:	4898      	ldr	r0, [pc, #608]	; (800348c <COM_Input_Parse7+0x274>)
 800322a:	f002 fd2f 	bl	8005c8c <HAL_RNG_GetRandomNumber>
 800322e:	61b8      	str	r0, [r7, #24]

    static cx_uint8_t parsebuf[46];
    static cx_uint8_t val_savebuf[26];
    static cx_uint8_t hax_val_savebuf[2];
    static cx_uint8_t chk;
    chk =0;
 8003230:	4b97      	ldr	r3, [pc, #604]	; (8003490 <COM_Input_Parse7+0x278>)
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]

    if (com_port == 7)  // COM1 처리
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b07      	cmp	r3, #7
 800323a:	f040 8122 	bne.w	8003482 <COM_Input_Parse7+0x26a>
    {

        memcpy(parsebuf, bufptr, 46);
 800323e:	4a95      	ldr	r2, [pc, #596]	; (8003494 <COM_Input_Parse7+0x27c>)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	461c      	mov	r4, r3
 8003244:	4616      	mov	r6, r2
 8003246:	f104 0c20 	add.w	ip, r4, #32
 800324a:	4635      	mov	r5, r6
 800324c:	4623      	mov	r3, r4
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	6859      	ldr	r1, [r3, #4]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003258:	3410      	adds	r4, #16
 800325a:	3610      	adds	r6, #16
 800325c:	4564      	cmp	r4, ip
 800325e:	d1f4      	bne.n	800324a <COM_Input_Parse7+0x32>
 8003260:	4633      	mov	r3, r6
 8003262:	6820      	ldr	r0, [r4, #0]
 8003264:	6861      	ldr	r1, [r4, #4]
 8003266:	68a2      	ldr	r2, [r4, #8]
 8003268:	c307      	stmia	r3!, {r0, r1, r2}
 800326a:	89a2      	ldrh	r2, [r4, #12]
 800326c:	801a      	strh	r2, [r3, #0]
        inpuls_state = parsebuf[3];
 800326e:	4b89      	ldr	r3, [pc, #548]	; (8003494 <COM_Input_Parse7+0x27c>)
 8003270:	78db      	ldrb	r3, [r3, #3]
 8003272:	77fb      	strb	r3, [r7, #31]

        if(inpuls_state != 0x34)
 8003274:	7ffb      	ldrb	r3, [r7, #31]
 8003276:	2b34      	cmp	r3, #52	; 0x34
 8003278:	f000 8093 	beq.w	80033a2 <COM_Input_Parse7+0x18a>
		{
			if(parsebuf[4] == 0x30)
 800327c:	4b85      	ldr	r3, [pc, #532]	; (8003494 <COM_Input_Parse7+0x27c>)
 800327e:	791b      	ldrb	r3, [r3, #4]
 8003280:	2b30      	cmp	r3, #48	; 0x30
 8003282:	f040 8086 	bne.w	8003392 <COM_Input_Parse7+0x17a>
			{

				if (bootup_flag < 10) // 4번 수신까지 순차적으로 감소
 8003286:	4b84      	ldr	r3, [pc, #528]	; (8003498 <COM_Input_Parse7+0x280>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b09      	cmp	r3, #9
 800328c:	f200 8089 	bhi.w	80033a2 <COM_Input_Parse7+0x18a>
				{
					memcpy(&parsebuf[0], &prev_parsebuf[0], 46); //기존 정상 데이터 호출
 8003290:	222e      	movs	r2, #46	; 0x2e
 8003292:	4982      	ldr	r1, [pc, #520]	; (800349c <COM_Input_Parse7+0x284>)
 8003294:	487f      	ldr	r0, [pc, #508]	; (8003494 <COM_Input_Parse7+0x27c>)
 8003296:	f005 f85f 	bl	8008358 <memcpy>
					bootup_flag++;
 800329a:	4b7f      	ldr	r3, [pc, #508]	; (8003498 <COM_Input_Parse7+0x280>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	3301      	adds	r3, #1
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	4b7d      	ldr	r3, [pc, #500]	; (8003498 <COM_Input_Parse7+0x280>)
 80032a4:	701a      	strb	r2, [r3, #0]

					//변환이 필요한 정펄스값, 부펄스값 버퍼에 Overwrite
					main_pulse_value = 380 - (10 + m_val)%30 - 15; // 기본 380 ~ 350 +- 15
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	f103 010a 	add.w	r1, r3, #10
 80032ac:	4b7c      	ldr	r3, [pc, #496]	; (80034a0 <COM_Input_Parse7+0x288>)
 80032ae:	fba3 2301 	umull	r2, r3, r3, r1
 80032b2:	091a      	lsrs	r2, r3, #4
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	1aca      	subs	r2, r1, r3
 80032be:	b293      	uxth	r3, r2
 80032c0:	f5c3 73b6 	rsb	r3, r3, #364	; 0x16c
 80032c4:	3301      	adds	r3, #1
 80032c6:	82fb      	strh	r3, [r7, #22]
					sub_pulse_value = 80 - (20+ m_val)%30 - 15; // 기본 80 ~ 20 +- 15
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	f103 0114 	add.w	r1, r3, #20
 80032ce:	4b74      	ldr	r3, [pc, #464]	; (80034a0 <COM_Input_Parse7+0x288>)
 80032d0:	fba3 2301 	umull	r2, r3, r3, r1
 80032d4:	091a      	lsrs	r2, r3, #4
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	1aca      	subs	r2, r1, r3
 80032e0:	b293      	uxth	r3, r2
 80032e2:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 80032e6:	82bb      	strh	r3, [r7, #20]
					//변환이 필요한 특정 바이트 값 오버라이트

					for(i=0; i<3; i++)
 80032e8:	4b6e      	ldr	r3, [pc, #440]	; (80034a4 <COM_Input_Parse7+0x28c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	e021      	b.n	8003334 <COM_Input_Parse7+0x11c>
					{
						parsebuf[22+i]= main_pulse_value/POW(10,2)%10+'0';
 80032f0:	2102      	movs	r1, #2
 80032f2:	200a      	movs	r0, #10
 80032f4:	f7fe fd80 	bl	8001df8 <POW>
 80032f8:	4603      	mov	r3, r0
 80032fa:	461a      	mov	r2, r3
 80032fc:	8afb      	ldrh	r3, [r7, #22]
 80032fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003302:	b29a      	uxth	r2, r3
 8003304:	4b68      	ldr	r3, [pc, #416]	; (80034a8 <COM_Input_Parse7+0x290>)
 8003306:	fba3 1302 	umull	r1, r3, r3, r2
 800330a:	08d9      	lsrs	r1, r3, #3
 800330c:	460b      	mov	r3, r1
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	b29b      	uxth	r3, r3
 8003318:	b2da      	uxtb	r2, r3
 800331a:	4b62      	ldr	r3, [pc, #392]	; (80034a4 <COM_Input_Parse7+0x28c>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	3316      	adds	r3, #22
 8003320:	3230      	adds	r2, #48	; 0x30
 8003322:	b2d1      	uxtb	r1, r2
 8003324:	4a5b      	ldr	r2, [pc, #364]	; (8003494 <COM_Input_Parse7+0x27c>)
 8003326:	54d1      	strb	r1, [r2, r3]
					for(i=0; i<3; i++)
 8003328:	4b5e      	ldr	r3, [pc, #376]	; (80034a4 <COM_Input_Parse7+0x28c>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	b2da      	uxtb	r2, r3
 8003330:	4b5c      	ldr	r3, [pc, #368]	; (80034a4 <COM_Input_Parse7+0x28c>)
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	4b5b      	ldr	r3, [pc, #364]	; (80034a4 <COM_Input_Parse7+0x28c>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d9d9      	bls.n	80032f0 <COM_Input_Parse7+0xd8>
					}
					for(i=0; i<3; i++)
 800333c:	4b59      	ldr	r3, [pc, #356]	; (80034a4 <COM_Input_Parse7+0x28c>)
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
 8003342:	e021      	b.n	8003388 <COM_Input_Parse7+0x170>
					{
						parsebuf[25+i]= sub_pulse_value/POW(10,2)%10+'0';
 8003344:	2102      	movs	r1, #2
 8003346:	200a      	movs	r0, #10
 8003348:	f7fe fd56 	bl	8001df8 <POW>
 800334c:	4603      	mov	r3, r0
 800334e:	461a      	mov	r2, r3
 8003350:	8abb      	ldrh	r3, [r7, #20]
 8003352:	fbb3 f3f2 	udiv	r3, r3, r2
 8003356:	b29a      	uxth	r2, r3
 8003358:	4b53      	ldr	r3, [pc, #332]	; (80034a8 <COM_Input_Parse7+0x290>)
 800335a:	fba3 1302 	umull	r1, r3, r3, r2
 800335e:	08d9      	lsrs	r1, r3, #3
 8003360:	460b      	mov	r3, r1
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	b29b      	uxth	r3, r3
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4b4d      	ldr	r3, [pc, #308]	; (80034a4 <COM_Input_Parse7+0x28c>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	3319      	adds	r3, #25
 8003374:	3230      	adds	r2, #48	; 0x30
 8003376:	b2d1      	uxtb	r1, r2
 8003378:	4a46      	ldr	r2, [pc, #280]	; (8003494 <COM_Input_Parse7+0x27c>)
 800337a:	54d1      	strb	r1, [r2, r3]
					for(i=0; i<3; i++)
 800337c:	4b49      	ldr	r3, [pc, #292]	; (80034a4 <COM_Input_Parse7+0x28c>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	3301      	adds	r3, #1
 8003382:	b2da      	uxtb	r2, r3
 8003384:	4b47      	ldr	r3, [pc, #284]	; (80034a4 <COM_Input_Parse7+0x28c>)
 8003386:	701a      	strb	r2, [r3, #0]
 8003388:	4b46      	ldr	r3, [pc, #280]	; (80034a4 <COM_Input_Parse7+0x28c>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d9d9      	bls.n	8003344 <COM_Input_Parse7+0x12c>
 8003390:	e007      	b.n	80033a2 <COM_Input_Parse7+0x18a>
					}
				}
			}
			else
			{
				bootup_flag = 0; // 플래그 초기화
 8003392:	4b41      	ldr	r3, [pc, #260]	; (8003498 <COM_Input_Parse7+0x280>)
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
				memcpy(&prev_parsebuf[0], &parsebuf[0], 46); // 정상 데이터를 저장
 8003398:	222e      	movs	r2, #46	; 0x2e
 800339a:	493e      	ldr	r1, [pc, #248]	; (8003494 <COM_Input_Parse7+0x27c>)
 800339c:	483f      	ldr	r0, [pc, #252]	; (800349c <COM_Input_Parse7+0x284>)
 800339e:	f004 ffdb 	bl	8008358 <memcpy>
			}
		}

        parsebuf[31]=parsebuf[32];
 80033a2:	4b3c      	ldr	r3, [pc, #240]	; (8003494 <COM_Input_Parse7+0x27c>)
 80033a4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80033a8:	4b3a      	ldr	r3, [pc, #232]	; (8003494 <COM_Input_Parse7+0x27c>)
 80033aa:	77da      	strb	r2, [r3, #31]
        parsebuf[32]=parsebuf[33];
 80033ac:	4b39      	ldr	r3, [pc, #228]	; (8003494 <COM_Input_Parse7+0x27c>)
 80033ae:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80033b2:	4b38      	ldr	r3, [pc, #224]	; (8003494 <COM_Input_Parse7+0x27c>)
 80033b4:	f883 2020 	strb.w	r2, [r3, #32]
        parsebuf[33]=0x30;
 80033b8:	4b36      	ldr	r3, [pc, #216]	; (8003494 <COM_Input_Parse7+0x27c>)
 80033ba:	2230      	movs	r2, #48	; 0x30
 80033bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        ascii_to_bcd(&parsebuf[len-43], val_savebuf, 38);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	3b2b      	subs	r3, #43	; 0x2b
 80033c4:	4a33      	ldr	r2, [pc, #204]	; (8003494 <COM_Input_Parse7+0x27c>)
 80033c6:	4413      	add	r3, r2
 80033c8:	2226      	movs	r2, #38	; 0x26
 80033ca:	4938      	ldr	r1, [pc, #224]	; (80034ac <COM_Input_Parse7+0x294>)
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fa65 	bl	800389c <ascii_to_bcd>
        ascii_convert_to_hex(&parsebuf[len-45], hax_val_savebuf, 2);
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3b2d      	subs	r3, #45	; 0x2d
 80033d6:	4a2f      	ldr	r2, [pc, #188]	; (8003494 <COM_Input_Parse7+0x27c>)
 80033d8:	4413      	add	r3, r2
 80033da:	2202      	movs	r2, #2
 80033dc:	4934      	ldr	r1, [pc, #208]	; (80034b0 <COM_Input_Parse7+0x298>)
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f9ba 	bl	8003758 <ascii_convert_to_hex>
        parsebuf[len-45] = 0x07;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	3b2d      	subs	r3, #45	; 0x2d
 80033e8:	4a2a      	ldr	r2, [pc, #168]	; (8003494 <COM_Input_Parse7+0x27c>)
 80033ea:	2107      	movs	r1, #7
 80033ec:	54d1      	strb	r1, [r2, r3]

        memcpy(&parsebuf[len-44],hax_val_savebuf, 1);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	3b2c      	subs	r3, #44	; 0x2c
 80033f2:	4a28      	ldr	r2, [pc, #160]	; (8003494 <COM_Input_Parse7+0x27c>)
 80033f4:	4413      	add	r3, r2
 80033f6:	4a2e      	ldr	r2, [pc, #184]	; (80034b0 <COM_Input_Parse7+0x298>)
 80033f8:	7812      	ldrb	r2, [r2, #0]
 80033fa:	701a      	strb	r2, [r3, #0]
        memcpy(&parsebuf[len-43],val_savebuf, 19);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	3b2b      	subs	r3, #43	; 0x2b
 8003400:	4a24      	ldr	r2, [pc, #144]	; (8003494 <COM_Input_Parse7+0x27c>)
 8003402:	4413      	add	r3, r2
 8003404:	2213      	movs	r2, #19
 8003406:	4929      	ldr	r1, [pc, #164]	; (80034ac <COM_Input_Parse7+0x294>)
 8003408:	4618      	mov	r0, r3
 800340a:	f004 ffa5 	bl	8008358 <memcpy>



        chk = Transmit_checksum(&parsebuf[len-46], 22);
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3b2e      	subs	r3, #46	; 0x2e
 8003412:	4a20      	ldr	r2, [pc, #128]	; (8003494 <COM_Input_Parse7+0x27c>)
 8003414:	4413      	add	r3, r2
 8003416:	2116      	movs	r1, #22
 8003418:	4618      	mov	r0, r3
 800341a:	f000 faaf 	bl	800397c <Transmit_checksum>
 800341e:	4603      	mov	r3, r0
 8003420:	461a      	mov	r2, r3
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <COM_Input_Parse7+0x278>)
 8003424:	701a      	strb	r2, [r3, #0]

        parsebuf[len-24] = chk;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	3b18      	subs	r3, #24
 800342a:	4a19      	ldr	r2, [pc, #100]	; (8003490 <COM_Input_Parse7+0x278>)
 800342c:	7811      	ldrb	r1, [r2, #0]
 800342e:	4a19      	ldr	r2, [pc, #100]	; (8003494 <COM_Input_Parse7+0x27c>)
 8003430:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-23] = 0x03;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	3b17      	subs	r3, #23
 8003436:	4a17      	ldr	r2, [pc, #92]	; (8003494 <COM_Input_Parse7+0x27c>)
 8003438:	2103      	movs	r1, #3
 800343a:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-22] = 0x0d;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	3b16      	subs	r3, #22
 8003440:	4a14      	ldr	r2, [pc, #80]	; (8003494 <COM_Input_Parse7+0x27c>)
 8003442:	210d      	movs	r1, #13
 8003444:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-21] = 0x0a;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3b15      	subs	r3, #21
 800344a:	4a12      	ldr	r2, [pc, #72]	; (8003494 <COM_Input_Parse7+0x27c>)
 800344c:	210a      	movs	r1, #10
 800344e:	54d1      	strb	r1, [r2, r3]

        memcpy(&_DG_tx_buf[com_port][0],&parsebuf[len-46], 26);
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4a16      	ldr	r2, [pc, #88]	; (80034b4 <COM_Input_Parse7+0x29c>)
 800345c:	1898      	adds	r0, r3, r2
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	3b2e      	subs	r3, #46	; 0x2e
 8003462:	4a0c      	ldr	r2, [pc, #48]	; (8003494 <COM_Input_Parse7+0x27c>)
 8003464:	4413      	add	r3, r2
 8003466:	221a      	movs	r2, #26
 8003468:	4619      	mov	r1, r3
 800346a:	f004 ff75 	bl	8008358 <memcpy>

        memset(parsebuf, 0x00, 46);
 800346e:	222e      	movs	r2, #46	; 0x2e
 8003470:	2100      	movs	r1, #0
 8003472:	4808      	ldr	r0, [pc, #32]	; (8003494 <COM_Input_Parse7+0x27c>)
 8003474:	f004 ff44 	bl	8008300 <memset>
        memset(val_savebuf, 0x00, 26);
 8003478:	221a      	movs	r2, #26
 800347a:	2100      	movs	r1, #0
 800347c:	480b      	ldr	r0, [pc, #44]	; (80034ac <COM_Input_Parse7+0x294>)
 800347e:	f004 ff3f 	bl	8008300 <memset>


    }

}
 8003482:	bf00      	nop
 8003484:	3724      	adds	r7, #36	; 0x24
 8003486:	46bd      	mov	sp, r7
 8003488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800348a:	bf00      	nop
 800348c:	20000070 	.word	0x20000070
 8003490:	20001202 	.word	0x20001202
 8003494:	20001204 	.word	0x20001204
 8003498:	20001232 	.word	0x20001232
 800349c:	20001234 	.word	0x20001234
 80034a0:	88888889 	.word	0x88888889
 80034a4:	20001262 	.word	0x20001262
 80034a8:	cccccccd 	.word	0xcccccccd
 80034ac:	20001264 	.word	0x20001264
 80034b0:	20001280 	.word	0x20001280
 80034b4:	20000c0c 	.word	0x20000c0c

080034b8 <COM_Input_Parse8>:

void COM_Input_Parse8(cx_uint8_t* bufptr, cx_uint_t len, cx_uint_t com_port)
{
 80034b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
    cx_uint32_t m_val;

    // 변환할 값
    cx_uint16_t main_pulse_value;
    cx_uint16_t sub_pulse_value;
    cx_uint8_t inpuls_state = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	77fb      	strb	r3, [r7, #31]
    static cx_uint8_t prev_parsebuf[46] = {0, };
    // 정상 데이터 수신 확인 flag
    static cx_bool_t  bootup_flag = 0;

    // 랜덤 값 생성
    m_val = HAL_RNG_GetRandomNumber(&hrng);
 80034c8:	4898      	ldr	r0, [pc, #608]	; (800372c <COM_Input_Parse8+0x274>)
 80034ca:	f002 fbdf 	bl	8005c8c <HAL_RNG_GetRandomNumber>
 80034ce:	61b8      	str	r0, [r7, #24]

    static cx_uint8_t parsebuf[46];
    static cx_uint8_t val_savebuf[26];
    static cx_uint8_t hax_val_savebuf[2];
    static cx_uint8_t chk;
    chk =0;
 80034d0:	4b97      	ldr	r3, [pc, #604]	; (8003730 <COM_Input_Parse8+0x278>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]

    if (com_port == 8)  // COM1 처리
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	f040 8122 	bne.w	8003722 <COM_Input_Parse8+0x26a>
    {

        memcpy(parsebuf, bufptr, 46);
 80034de:	4a95      	ldr	r2, [pc, #596]	; (8003734 <COM_Input_Parse8+0x27c>)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	461c      	mov	r4, r3
 80034e4:	4616      	mov	r6, r2
 80034e6:	f104 0c20 	add.w	ip, r4, #32
 80034ea:	4635      	mov	r5, r6
 80034ec:	4623      	mov	r3, r4
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	6859      	ldr	r1, [r3, #4]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034f8:	3410      	adds	r4, #16
 80034fa:	3610      	adds	r6, #16
 80034fc:	4564      	cmp	r4, ip
 80034fe:	d1f4      	bne.n	80034ea <COM_Input_Parse8+0x32>
 8003500:	4633      	mov	r3, r6
 8003502:	6820      	ldr	r0, [r4, #0]
 8003504:	6861      	ldr	r1, [r4, #4]
 8003506:	68a2      	ldr	r2, [r4, #8]
 8003508:	c307      	stmia	r3!, {r0, r1, r2}
 800350a:	89a2      	ldrh	r2, [r4, #12]
 800350c:	801a      	strh	r2, [r3, #0]
        inpuls_state = parsebuf[3];
 800350e:	4b89      	ldr	r3, [pc, #548]	; (8003734 <COM_Input_Parse8+0x27c>)
 8003510:	78db      	ldrb	r3, [r3, #3]
 8003512:	77fb      	strb	r3, [r7, #31]

        if(inpuls_state != 0x34)
 8003514:	7ffb      	ldrb	r3, [r7, #31]
 8003516:	2b34      	cmp	r3, #52	; 0x34
 8003518:	f000 8093 	beq.w	8003642 <COM_Input_Parse8+0x18a>
		{
			if(parsebuf[4] == 0x30)
 800351c:	4b85      	ldr	r3, [pc, #532]	; (8003734 <COM_Input_Parse8+0x27c>)
 800351e:	791b      	ldrb	r3, [r3, #4]
 8003520:	2b30      	cmp	r3, #48	; 0x30
 8003522:	f040 8086 	bne.w	8003632 <COM_Input_Parse8+0x17a>
			{

				if (bootup_flag < 10) // 4번 수신까지 순차적으로 감소
 8003526:	4b84      	ldr	r3, [pc, #528]	; (8003738 <COM_Input_Parse8+0x280>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b09      	cmp	r3, #9
 800352c:	f200 8089 	bhi.w	8003642 <COM_Input_Parse8+0x18a>
				{
					memcpy(&parsebuf[0], &prev_parsebuf[0], 46); //기존 정상 데이터 호출
 8003530:	222e      	movs	r2, #46	; 0x2e
 8003532:	4982      	ldr	r1, [pc, #520]	; (800373c <COM_Input_Parse8+0x284>)
 8003534:	487f      	ldr	r0, [pc, #508]	; (8003734 <COM_Input_Parse8+0x27c>)
 8003536:	f004 ff0f 	bl	8008358 <memcpy>
					bootup_flag++;
 800353a:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <COM_Input_Parse8+0x280>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	3301      	adds	r3, #1
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4b7d      	ldr	r3, [pc, #500]	; (8003738 <COM_Input_Parse8+0x280>)
 8003544:	701a      	strb	r2, [r3, #0]

					//변환이 필요한 정펄스값, 부펄스값 버퍼에 Overwrite
					main_pulse_value = 380 - (10 + m_val)%30 - 15; // 기본 380 ~ 350 +- 15
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	f103 010a 	add.w	r1, r3, #10
 800354c:	4b7c      	ldr	r3, [pc, #496]	; (8003740 <COM_Input_Parse8+0x288>)
 800354e:	fba3 2301 	umull	r2, r3, r3, r1
 8003552:	091a      	lsrs	r2, r3, #4
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	1aca      	subs	r2, r1, r3
 800355e:	b293      	uxth	r3, r2
 8003560:	f5c3 73b6 	rsb	r3, r3, #364	; 0x16c
 8003564:	3301      	adds	r3, #1
 8003566:	82fb      	strh	r3, [r7, #22]
					sub_pulse_value = 80 - (20+ m_val)%30 - 15; // 기본 80 ~ 20 +- 15
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f103 0114 	add.w	r1, r3, #20
 800356e:	4b74      	ldr	r3, [pc, #464]	; (8003740 <COM_Input_Parse8+0x288>)
 8003570:	fba3 2301 	umull	r2, r3, r3, r1
 8003574:	091a      	lsrs	r2, r3, #4
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	1aca      	subs	r2, r1, r3
 8003580:	b293      	uxth	r3, r2
 8003582:	f1c3 0341 	rsb	r3, r3, #65	; 0x41
 8003586:	82bb      	strh	r3, [r7, #20]
					//변환이 필요한 특정 바이트 값 오버라이트

					for(i=0; i<3; i++)
 8003588:	4b6e      	ldr	r3, [pc, #440]	; (8003744 <COM_Input_Parse8+0x28c>)
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	e021      	b.n	80035d4 <COM_Input_Parse8+0x11c>
					{
						parsebuf[22+i]= main_pulse_value/POW(10,2)%10+'0';
 8003590:	2102      	movs	r1, #2
 8003592:	200a      	movs	r0, #10
 8003594:	f7fe fc30 	bl	8001df8 <POW>
 8003598:	4603      	mov	r3, r0
 800359a:	461a      	mov	r2, r3
 800359c:	8afb      	ldrh	r3, [r7, #22]
 800359e:	fbb3 f3f2 	udiv	r3, r3, r2
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	4b68      	ldr	r3, [pc, #416]	; (8003748 <COM_Input_Parse8+0x290>)
 80035a6:	fba3 1302 	umull	r1, r3, r3, r2
 80035aa:	08d9      	lsrs	r1, r3, #3
 80035ac:	460b      	mov	r3, r1
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4b62      	ldr	r3, [pc, #392]	; (8003744 <COM_Input_Parse8+0x28c>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	3316      	adds	r3, #22
 80035c0:	3230      	adds	r2, #48	; 0x30
 80035c2:	b2d1      	uxtb	r1, r2
 80035c4:	4a5b      	ldr	r2, [pc, #364]	; (8003734 <COM_Input_Parse8+0x27c>)
 80035c6:	54d1      	strb	r1, [r2, r3]
					for(i=0; i<3; i++)
 80035c8:	4b5e      	ldr	r3, [pc, #376]	; (8003744 <COM_Input_Parse8+0x28c>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	3301      	adds	r3, #1
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	4b5c      	ldr	r3, [pc, #368]	; (8003744 <COM_Input_Parse8+0x28c>)
 80035d2:	701a      	strb	r2, [r3, #0]
 80035d4:	4b5b      	ldr	r3, [pc, #364]	; (8003744 <COM_Input_Parse8+0x28c>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d9d9      	bls.n	8003590 <COM_Input_Parse8+0xd8>
					}
					for(i=0; i<3; i++)
 80035dc:	4b59      	ldr	r3, [pc, #356]	; (8003744 <COM_Input_Parse8+0x28c>)
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	e021      	b.n	8003628 <COM_Input_Parse8+0x170>
					{
						parsebuf[25+i]= sub_pulse_value/POW(10,2)%10+'0';
 80035e4:	2102      	movs	r1, #2
 80035e6:	200a      	movs	r0, #10
 80035e8:	f7fe fc06 	bl	8001df8 <POW>
 80035ec:	4603      	mov	r3, r0
 80035ee:	461a      	mov	r2, r3
 80035f0:	8abb      	ldrh	r3, [r7, #20]
 80035f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	4b53      	ldr	r3, [pc, #332]	; (8003748 <COM_Input_Parse8+0x290>)
 80035fa:	fba3 1302 	umull	r1, r3, r3, r2
 80035fe:	08d9      	lsrs	r1, r3, #3
 8003600:	460b      	mov	r3, r1
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	b29b      	uxth	r3, r3
 800360c:	b2da      	uxtb	r2, r3
 800360e:	4b4d      	ldr	r3, [pc, #308]	; (8003744 <COM_Input_Parse8+0x28c>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	3319      	adds	r3, #25
 8003614:	3230      	adds	r2, #48	; 0x30
 8003616:	b2d1      	uxtb	r1, r2
 8003618:	4a46      	ldr	r2, [pc, #280]	; (8003734 <COM_Input_Parse8+0x27c>)
 800361a:	54d1      	strb	r1, [r2, r3]
					for(i=0; i<3; i++)
 800361c:	4b49      	ldr	r3, [pc, #292]	; (8003744 <COM_Input_Parse8+0x28c>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	b2da      	uxtb	r2, r3
 8003624:	4b47      	ldr	r3, [pc, #284]	; (8003744 <COM_Input_Parse8+0x28c>)
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	4b46      	ldr	r3, [pc, #280]	; (8003744 <COM_Input_Parse8+0x28c>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d9d9      	bls.n	80035e4 <COM_Input_Parse8+0x12c>
 8003630:	e007      	b.n	8003642 <COM_Input_Parse8+0x18a>
					}
				}
			}
            else
            {
                bootup_flag = 0; // 플래그 초기화
 8003632:	4b41      	ldr	r3, [pc, #260]	; (8003738 <COM_Input_Parse8+0x280>)
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
                memcpy(&prev_parsebuf[0], &parsebuf[0], 46); // 정상 데이터를 저장
 8003638:	222e      	movs	r2, #46	; 0x2e
 800363a:	493e      	ldr	r1, [pc, #248]	; (8003734 <COM_Input_Parse8+0x27c>)
 800363c:	483f      	ldr	r0, [pc, #252]	; (800373c <COM_Input_Parse8+0x284>)
 800363e:	f004 fe8b 	bl	8008358 <memcpy>
            }
        }

        parsebuf[31]=parsebuf[32];
 8003642:	4b3c      	ldr	r3, [pc, #240]	; (8003734 <COM_Input_Parse8+0x27c>)
 8003644:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003648:	4b3a      	ldr	r3, [pc, #232]	; (8003734 <COM_Input_Parse8+0x27c>)
 800364a:	77da      	strb	r2, [r3, #31]
        parsebuf[32]=parsebuf[33];
 800364c:	4b39      	ldr	r3, [pc, #228]	; (8003734 <COM_Input_Parse8+0x27c>)
 800364e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8003652:	4b38      	ldr	r3, [pc, #224]	; (8003734 <COM_Input_Parse8+0x27c>)
 8003654:	f883 2020 	strb.w	r2, [r3, #32]
        parsebuf[33]=0x30;
 8003658:	4b36      	ldr	r3, [pc, #216]	; (8003734 <COM_Input_Parse8+0x27c>)
 800365a:	2230      	movs	r2, #48	; 0x30
 800365c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        ascii_to_bcd(&parsebuf[len-43], val_savebuf, 38);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	3b2b      	subs	r3, #43	; 0x2b
 8003664:	4a33      	ldr	r2, [pc, #204]	; (8003734 <COM_Input_Parse8+0x27c>)
 8003666:	4413      	add	r3, r2
 8003668:	2226      	movs	r2, #38	; 0x26
 800366a:	4938      	ldr	r1, [pc, #224]	; (800374c <COM_Input_Parse8+0x294>)
 800366c:	4618      	mov	r0, r3
 800366e:	f000 f915 	bl	800389c <ascii_to_bcd>
        ascii_convert_to_hex(&parsebuf[len-45], hax_val_savebuf, 2);
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	3b2d      	subs	r3, #45	; 0x2d
 8003676:	4a2f      	ldr	r2, [pc, #188]	; (8003734 <COM_Input_Parse8+0x27c>)
 8003678:	4413      	add	r3, r2
 800367a:	2202      	movs	r2, #2
 800367c:	4934      	ldr	r1, [pc, #208]	; (8003750 <COM_Input_Parse8+0x298>)
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f86a 	bl	8003758 <ascii_convert_to_hex>
        parsebuf[len-45] = 0x08;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	3b2d      	subs	r3, #45	; 0x2d
 8003688:	4a2a      	ldr	r2, [pc, #168]	; (8003734 <COM_Input_Parse8+0x27c>)
 800368a:	2108      	movs	r1, #8
 800368c:	54d1      	strb	r1, [r2, r3]

        memcpy(&parsebuf[len-44],hax_val_savebuf, 1);
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3b2c      	subs	r3, #44	; 0x2c
 8003692:	4a28      	ldr	r2, [pc, #160]	; (8003734 <COM_Input_Parse8+0x27c>)
 8003694:	4413      	add	r3, r2
 8003696:	4a2e      	ldr	r2, [pc, #184]	; (8003750 <COM_Input_Parse8+0x298>)
 8003698:	7812      	ldrb	r2, [r2, #0]
 800369a:	701a      	strb	r2, [r3, #0]
        memcpy(&parsebuf[len-43],val_savebuf, 19);
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	3b2b      	subs	r3, #43	; 0x2b
 80036a0:	4a24      	ldr	r2, [pc, #144]	; (8003734 <COM_Input_Parse8+0x27c>)
 80036a2:	4413      	add	r3, r2
 80036a4:	2213      	movs	r2, #19
 80036a6:	4929      	ldr	r1, [pc, #164]	; (800374c <COM_Input_Parse8+0x294>)
 80036a8:	4618      	mov	r0, r3
 80036aa:	f004 fe55 	bl	8008358 <memcpy>



        chk = Transmit_checksum(&parsebuf[len-46], 22);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	3b2e      	subs	r3, #46	; 0x2e
 80036b2:	4a20      	ldr	r2, [pc, #128]	; (8003734 <COM_Input_Parse8+0x27c>)
 80036b4:	4413      	add	r3, r2
 80036b6:	2116      	movs	r1, #22
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 f95f 	bl	800397c <Transmit_checksum>
 80036be:	4603      	mov	r3, r0
 80036c0:	461a      	mov	r2, r3
 80036c2:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <COM_Input_Parse8+0x278>)
 80036c4:	701a      	strb	r2, [r3, #0]

        parsebuf[len-24] = chk;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	3b18      	subs	r3, #24
 80036ca:	4a19      	ldr	r2, [pc, #100]	; (8003730 <COM_Input_Parse8+0x278>)
 80036cc:	7811      	ldrb	r1, [r2, #0]
 80036ce:	4a19      	ldr	r2, [pc, #100]	; (8003734 <COM_Input_Parse8+0x27c>)
 80036d0:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-23] = 0x03;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	3b17      	subs	r3, #23
 80036d6:	4a17      	ldr	r2, [pc, #92]	; (8003734 <COM_Input_Parse8+0x27c>)
 80036d8:	2103      	movs	r1, #3
 80036da:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-22] = 0x0d;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	3b16      	subs	r3, #22
 80036e0:	4a14      	ldr	r2, [pc, #80]	; (8003734 <COM_Input_Parse8+0x27c>)
 80036e2:	210d      	movs	r1, #13
 80036e4:	54d1      	strb	r1, [r2, r3]
        parsebuf[len-21] = 0x0a;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	3b15      	subs	r3, #21
 80036ea:	4a12      	ldr	r2, [pc, #72]	; (8003734 <COM_Input_Parse8+0x27c>)
 80036ec:	210a      	movs	r1, #10
 80036ee:	54d1      	strb	r1, [r2, r3]

        memcpy(&_DG_tx_buf[com_port][0],&parsebuf[len-46], 26);
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4a16      	ldr	r2, [pc, #88]	; (8003754 <COM_Input_Parse8+0x29c>)
 80036fc:	1898      	adds	r0, r3, r2
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	3b2e      	subs	r3, #46	; 0x2e
 8003702:	4a0c      	ldr	r2, [pc, #48]	; (8003734 <COM_Input_Parse8+0x27c>)
 8003704:	4413      	add	r3, r2
 8003706:	221a      	movs	r2, #26
 8003708:	4619      	mov	r1, r3
 800370a:	f004 fe25 	bl	8008358 <memcpy>

        memset(parsebuf, 0x00, 46);
 800370e:	222e      	movs	r2, #46	; 0x2e
 8003710:	2100      	movs	r1, #0
 8003712:	4808      	ldr	r0, [pc, #32]	; (8003734 <COM_Input_Parse8+0x27c>)
 8003714:	f004 fdf4 	bl	8008300 <memset>
        memset(val_savebuf, 0x00, 26);
 8003718:	221a      	movs	r2, #26
 800371a:	2100      	movs	r1, #0
 800371c:	480b      	ldr	r0, [pc, #44]	; (800374c <COM_Input_Parse8+0x294>)
 800371e:	f004 fdef 	bl	8008300 <memset>


    }

}
 8003722:	bf00      	nop
 8003724:	3724      	adds	r7, #36	; 0x24
 8003726:	46bd      	mov	sp, r7
 8003728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800372a:	bf00      	nop
 800372c:	20000070 	.word	0x20000070
 8003730:	20001282 	.word	0x20001282
 8003734:	20001284 	.word	0x20001284
 8003738:	200012b2 	.word	0x200012b2
 800373c:	200012b4 	.word	0x200012b4
 8003740:	88888889 	.word	0x88888889
 8003744:	200012e2 	.word	0x200012e2
 8003748:	cccccccd 	.word	0xcccccccd
 800374c:	200012e4 	.word	0x200012e4
 8003750:	20001300 	.word	0x20001300
 8003754:	20000c0c 	.word	0x20000c0c

08003758 <ascii_convert_to_hex>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////ascii to hex ///////////////////////////////////////////////////////////////////////////////////////
void ascii_convert_to_hex(cx_uint8_t *asciidata, cx_uint8_t* hex_values, cx_uint_t data_size)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]

	cx_uint8_t high_nibble = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	75fb      	strb	r3, [r7, #23]
	cx_uint8_t low_nibble = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	75bb      	strb	r3, [r7, #22]

	for (cx_uint_t j = 0; j < data_size; j += 2)
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	e088      	b.n	8003884 <ascii_convert_to_hex+0x12c>
	{
		// high nibble 계산
		if (asciidata[j] >= '0' && asciidata[j] <= '9') high_nibble = asciidata[j] - '0'; // ?��?��(0-9) �??��
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4413      	add	r3, r2
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b2f      	cmp	r3, #47	; 0x2f
 800377c:	d90c      	bls.n	8003798 <ascii_convert_to_hex+0x40>
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4413      	add	r3, r2
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b39      	cmp	r3, #57	; 0x39
 8003788:	d806      	bhi.n	8003798 <ascii_convert_to_hex+0x40>
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	3b30      	subs	r3, #48	; 0x30
 8003794:	75fb      	strb	r3, [r7, #23]
 8003796:	e024      	b.n	80037e2 <ascii_convert_to_hex+0x8a>
		else if (asciidata[j] >= 'A' && asciidata[j] <= 'F') high_nibble = asciidata[j] - 'A' + 10; // ??문자(A-F) �??��
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4413      	add	r3, r2
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b40      	cmp	r3, #64	; 0x40
 80037a2:	d90c      	bls.n	80037be <ascii_convert_to_hex+0x66>
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4413      	add	r3, r2
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b46      	cmp	r3, #70	; 0x46
 80037ae:	d806      	bhi.n	80037be <ascii_convert_to_hex+0x66>
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	3b37      	subs	r3, #55	; 0x37
 80037ba:	75fb      	strb	r3, [r7, #23]
 80037bc:	e011      	b.n	80037e2 <ascii_convert_to_hex+0x8a>
		else if (asciidata[j] >= 'a' && asciidata[j] <= 'f') high_nibble = asciidata[j] - 'a' + 10; // ?��문자(a-f) �??��
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4413      	add	r3, r2
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b60      	cmp	r3, #96	; 0x60
 80037c8:	d90b      	bls.n	80037e2 <ascii_convert_to_hex+0x8a>
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4413      	add	r3, r2
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b66      	cmp	r3, #102	; 0x66
 80037d4:	d805      	bhi.n	80037e2 <ascii_convert_to_hex+0x8a>
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	3b57      	subs	r3, #87	; 0x57
 80037e0:	75fb      	strb	r3, [r7, #23]

		// low nibble 계산
		if (asciidata[j + 1] >= '0' && asciidata[j + 1] <= '9') low_nibble = asciidata[j + 1] - '0'; // ?��?��(0-9) �??��
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	3301      	adds	r3, #1
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4413      	add	r3, r2
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b2f      	cmp	r3, #47	; 0x2f
 80037ee:	d90e      	bls.n	800380e <ascii_convert_to_hex+0xb6>
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	3301      	adds	r3, #1
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b39      	cmp	r3, #57	; 0x39
 80037fc:	d807      	bhi.n	800380e <ascii_convert_to_hex+0xb6>
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	3301      	adds	r3, #1
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4413      	add	r3, r2
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	3b30      	subs	r3, #48	; 0x30
 800380a:	75bb      	strb	r3, [r7, #22]
 800380c:	e02a      	b.n	8003864 <ascii_convert_to_hex+0x10c>
		else if (asciidata[j + 1] >= 'A' && asciidata[j + 1] <= 'F')low_nibble = asciidata[j + 1] - 'A' + 10; // ??문자(A-F) �??��
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	3301      	adds	r3, #1
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4413      	add	r3, r2
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b40      	cmp	r3, #64	; 0x40
 800381a:	d90e      	bls.n	800383a <ascii_convert_to_hex+0xe2>
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	3301      	adds	r3, #1
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b46      	cmp	r3, #70	; 0x46
 8003828:	d807      	bhi.n	800383a <ascii_convert_to_hex+0xe2>
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	3301      	adds	r3, #1
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4413      	add	r3, r2
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	3b37      	subs	r3, #55	; 0x37
 8003836:	75bb      	strb	r3, [r7, #22]
 8003838:	e014      	b.n	8003864 <ascii_convert_to_hex+0x10c>
		else if (asciidata[j + 1] >= 'a' && asciidata[j + 1] <= 'f')low_nibble = asciidata[j + 1] - 'a' + 10; // ?��문자(a-f) �??��
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	3301      	adds	r3, #1
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4413      	add	r3, r2
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b60      	cmp	r3, #96	; 0x60
 8003846:	d90d      	bls.n	8003864 <ascii_convert_to_hex+0x10c>
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	3301      	adds	r3, #1
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b66      	cmp	r3, #102	; 0x66
 8003854:	d806      	bhi.n	8003864 <ascii_convert_to_hex+0x10c>
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	3301      	adds	r3, #1
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4413      	add	r3, r2
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	3b57      	subs	r3, #87	; 0x57
 8003862:	75bb      	strb	r3, [r7, #22]
		// �??��?�� HEX 값을 배열?�� ???��
		hex_values[j / 2] = (high_nibble << 4) | low_nibble;
 8003864:	7dfb      	ldrb	r3, [r7, #23]
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	b25a      	sxtb	r2, r3
 800386a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800386e:	4313      	orrs	r3, r2
 8003870:	b259      	sxtb	r1, r3
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	085b      	lsrs	r3, r3, #1
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	4413      	add	r3, r2
 800387a:	b2ca      	uxtb	r2, r1
 800387c:	701a      	strb	r2, [r3, #0]
	for (cx_uint_t j = 0; j < data_size; j += 2)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	3302      	adds	r3, #2
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	429a      	cmp	r2, r3
 800388a:	f4ff af72 	bcc.w	8003772 <ascii_convert_to_hex+0x1a>
	}

}
 800388e:	bf00      	nop
 8003890:	bf00      	nop
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <ascii_to_bcd>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////ascii to bcd //////////////////////////////////////////////////////////////////////////////////////

void ascii_to_bcd(cx_uint8_t *asciidata, cx_uint8_t* bcd_values, cx_uint_t data_size)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b090      	sub	sp, #64	; 0x40
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]

	cx_uint8_t buf[39];

	static cx_uint8_t j;

	memcpy(&buf[0], asciidata, 38);
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	2226      	movs	r2, #38	; 0x26
 80038ae:	68f9      	ldr	r1, [r7, #12]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f004 fd51 	bl	8008358 <memcpy>

	for(j=0; j<data_size; j++)
 80038b6:	4b30      	ldr	r3, [pc, #192]	; (8003978 <ascii_to_bcd+0xdc>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	e051      	b.n	8003962 <ascii_to_bcd+0xc6>
	{

        if (buf[j] >= '0' && buf[j] <= '9')
 80038be:	4b2e      	ldr	r3, [pc, #184]	; (8003978 <ascii_to_bcd+0xdc>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	3340      	adds	r3, #64	; 0x40
 80038c4:	443b      	add	r3, r7
 80038c6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80038ca:	2b2f      	cmp	r3, #47	; 0x2f
 80038cc:	d93a      	bls.n	8003944 <ascii_to_bcd+0xa8>
 80038ce:	4b2a      	ldr	r3, [pc, #168]	; (8003978 <ascii_to_bcd+0xdc>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	3340      	adds	r3, #64	; 0x40
 80038d4:	443b      	add	r3, r7
 80038d6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80038da:	2b39      	cmp	r3, #57	; 0x39
 80038dc:	d832      	bhi.n	8003944 <ascii_to_bcd+0xa8>
        {
        	cx_uint8_t high_nibble = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        	cx_uint8_t low_nibble = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

        	high_nibble = (buf[j] - '0') & 0x0F;
 80038ea:	4b23      	ldr	r3, [pc, #140]	; (8003978 <ascii_to_bcd+0xdc>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	3340      	adds	r3, #64	; 0x40
 80038f0:	443b      	add	r3, r7
 80038f2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        	low_nibble = (buf[j+ 1] - '0') & 0x0F;
 80038fe:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <ascii_to_bcd+0xdc>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	3301      	adds	r3, #1
 8003904:	3340      	adds	r3, #64	; 0x40
 8003906:	443b      	add	r3, r7
 8003908:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

        	bcd_values[j / 2] = (high_nibble << 4) | low_nibble;
 8003914:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	b25a      	sxtb	r2, r3
 800391c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8003920:	4313      	orrs	r3, r2
 8003922:	b25a      	sxtb	r2, r3
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <ascii_to_bcd+0xdc>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	b2db      	uxtb	r3, r3
 800392c:	4619      	mov	r1, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	440b      	add	r3, r1
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]

            j++; // ?��?�� ASCII 문자�?? ?��?��
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <ascii_to_bcd+0xdc>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <ascii_to_bcd+0xdc>)
 8003940:	701a      	strb	r2, [r3, #0]
        {
 8003942:	e008      	b.n	8003956 <ascii_to_bcd+0xba>
        }
        else
        {
        	bcd_values[j / 2] = 0; // ASCII�?? ?��?���?? ?��?�� 경우 0?���?? ?��?��
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <ascii_to_bcd+0xdc>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	085b      	lsrs	r3, r3, #1
 800394a:	b2db      	uxtb	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4413      	add	r3, r2
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
	for(j=0; j<data_size; j++)
 8003956:	4b08      	ldr	r3, [pc, #32]	; (8003978 <ascii_to_bcd+0xdc>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	3301      	adds	r3, #1
 800395c:	b2da      	uxtb	r2, r3
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <ascii_to_bcd+0xdc>)
 8003960:	701a      	strb	r2, [r3, #0]
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <ascii_to_bcd+0xdc>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4293      	cmp	r3, r2
 800396c:	d8a7      	bhi.n	80038be <ascii_to_bcd+0x22>
        }
	}

}
 800396e:	bf00      	nop
 8003970:	bf00      	nop
 8003972:	3740      	adds	r7, #64	; 0x40
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20001302 	.word	0x20001302

0800397c <Transmit_checksum>:



///////////////////////////////////// SPI transmit checksum ////////////////////////////////////////////////////////
cx_uint8_t Transmit_checksum(cx_uint8_t *data, cx_uint_t length)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	; 0x28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
	cx_uint8_t result = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	cx_uint8_t idx;

	cx_uint8_t buf[23];
	cx_uint8_t val = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	memcpy(buf, data, 22);
 8003992:	f107 030c 	add.w	r3, r7, #12
 8003996:	2216      	movs	r2, #22
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4618      	mov	r0, r3
 800399c:	f004 fcdc 	bl	8008358 <memcpy>

	if(buf[1] == 0x01) val=99;
 80039a0:	7b7b      	ldrb	r3, [r7, #13]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d102      	bne.n	80039ac <Transmit_checksum+0x30>
 80039a6:	2363      	movs	r3, #99	; 0x63
 80039a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(buf[1] == 0x02) val=100;
 80039ac:	7b7b      	ldrb	r3, [r7, #13]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d102      	bne.n	80039b8 <Transmit_checksum+0x3c>
 80039b2:	2364      	movs	r3, #100	; 0x64
 80039b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(buf[1] == 0x03) val=101;
 80039b8:	7b7b      	ldrb	r3, [r7, #13]
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d102      	bne.n	80039c4 <Transmit_checksum+0x48>
 80039be:	2365      	movs	r3, #101	; 0x65
 80039c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(buf[1] == 0x04) val=102;
 80039c4:	7b7b      	ldrb	r3, [r7, #13]
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d102      	bne.n	80039d0 <Transmit_checksum+0x54>
 80039ca:	2366      	movs	r3, #102	; 0x66
 80039cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(buf[1] == 0x05) val=103;
 80039d0:	7b7b      	ldrb	r3, [r7, #13]
 80039d2:	2b05      	cmp	r3, #5
 80039d4:	d102      	bne.n	80039dc <Transmit_checksum+0x60>
 80039d6:	2367      	movs	r3, #103	; 0x67
 80039d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(buf[1] == 0x06) val=104;
 80039dc:	7b7b      	ldrb	r3, [r7, #13]
 80039de:	2b06      	cmp	r3, #6
 80039e0:	d102      	bne.n	80039e8 <Transmit_checksum+0x6c>
 80039e2:	2368      	movs	r3, #104	; 0x68
 80039e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(buf[1] == 0x07) val=105;
 80039e8:	7b7b      	ldrb	r3, [r7, #13]
 80039ea:	2b07      	cmp	r3, #7
 80039ec:	d102      	bne.n	80039f4 <Transmit_checksum+0x78>
 80039ee:	2369      	movs	r3, #105	; 0x69
 80039f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(buf[1] == 0x08) val=106;
 80039f4:	7b7b      	ldrb	r3, [r7, #13]
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d102      	bne.n	8003a00 <Transmit_checksum+0x84>
 80039fa:	236a      	movs	r3, #106	; 0x6a
 80039fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	for (idx = 0; idx < length; ++idx)
 8003a00:	2300      	movs	r3, #0
 8003a02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003a06:	e01a      	b.n	8003a3e <Transmit_checksum+0xc2>
	{
		result += (0x0F & data[idx]) + (data[idx] >> 4);
 8003a08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	4413      	add	r3, r2
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	440b      	add	r3, r1
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	091b      	lsrs	r3, r3, #4
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a2e:	4413      	add	r3, r2
 8003a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (idx = 0; idx < length; ++idx)
 8003a34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a38:	3301      	adds	r3, #1
 8003a3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003a3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d8df      	bhi.n	8003a08 <Transmit_checksum+0x8c>
	}

	return result - val;
 8003a48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a4c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	b2db      	uxtb	r3, r3


}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3728      	adds	r7, #40	; 0x28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <transmit_reset>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void transmit_reset()
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0


	if(_COM1_tx_timeout_count > 3000)
 8003a60:	4b3c      	ldr	r3, [pc, #240]	; (8003b54 <transmit_reset+0xf8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d908      	bls.n	8003a7e <transmit_reset+0x22>
	{
		_COM1_tx_timeout_count = 3500;
 8003a6c:	4b39      	ldr	r3, [pc, #228]	; (8003b54 <transmit_reset+0xf8>)
 8003a6e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003a72:	601a      	str	r2, [r3, #0]
		memset(_DG_tx_buf[1], 0x00,26);
 8003a74:	221a      	movs	r2, #26
 8003a76:	2100      	movs	r1, #0
 8003a78:	4837      	ldr	r0, [pc, #220]	; (8003b58 <transmit_reset+0xfc>)
 8003a7a:	f004 fc41 	bl	8008300 <memset>
	}
	if(_COM2_tx_timeout_count > 3000)
 8003a7e:	4b37      	ldr	r3, [pc, #220]	; (8003b5c <transmit_reset+0x100>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d908      	bls.n	8003a9c <transmit_reset+0x40>
	{
		_COM2_tx_timeout_count = 3500;
 8003a8a:	4b34      	ldr	r3, [pc, #208]	; (8003b5c <transmit_reset+0x100>)
 8003a8c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003a90:	601a      	str	r2, [r3, #0]
		memset(_DG_tx_buf[2], 0x00,26);
 8003a92:	221a      	movs	r2, #26
 8003a94:	2100      	movs	r1, #0
 8003a96:	4832      	ldr	r0, [pc, #200]	; (8003b60 <transmit_reset+0x104>)
 8003a98:	f004 fc32 	bl	8008300 <memset>
	}
	if(_COM3_tx_timeout_count > 3000)
 8003a9c:	4b31      	ldr	r3, [pc, #196]	; (8003b64 <transmit_reset+0x108>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d908      	bls.n	8003aba <transmit_reset+0x5e>
	{
		_COM3_tx_timeout_count = 3500;
 8003aa8:	4b2e      	ldr	r3, [pc, #184]	; (8003b64 <transmit_reset+0x108>)
 8003aaa:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003aae:	601a      	str	r2, [r3, #0]
		memset(_DG_tx_buf[3], 0x00,26);
 8003ab0:	221a      	movs	r2, #26
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	482c      	ldr	r0, [pc, #176]	; (8003b68 <transmit_reset+0x10c>)
 8003ab6:	f004 fc23 	bl	8008300 <memset>
	}
	if(_COM4_tx_timeout_count > 3000)
 8003aba:	4b2c      	ldr	r3, [pc, #176]	; (8003b6c <transmit_reset+0x110>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d908      	bls.n	8003ad8 <transmit_reset+0x7c>
	{
		_COM4_tx_timeout_count = 3500;
 8003ac6:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <transmit_reset+0x110>)
 8003ac8:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003acc:	601a      	str	r2, [r3, #0]
		memset(_DG_tx_buf[4], 0x00,26);
 8003ace:	221a      	movs	r2, #26
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4827      	ldr	r0, [pc, #156]	; (8003b70 <transmit_reset+0x114>)
 8003ad4:	f004 fc14 	bl	8008300 <memset>
	}
	if(_COM5_tx_timeout_count > 3000)
 8003ad8:	4b26      	ldr	r3, [pc, #152]	; (8003b74 <transmit_reset+0x118>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d908      	bls.n	8003af6 <transmit_reset+0x9a>
	{
		_COM5_tx_timeout_count = 3500;
 8003ae4:	4b23      	ldr	r3, [pc, #140]	; (8003b74 <transmit_reset+0x118>)
 8003ae6:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003aea:	601a      	str	r2, [r3, #0]
		memset(_DG_tx_buf[5], 0x00,26);
 8003aec:	221a      	movs	r2, #26
 8003aee:	2100      	movs	r1, #0
 8003af0:	4821      	ldr	r0, [pc, #132]	; (8003b78 <transmit_reset+0x11c>)
 8003af2:	f004 fc05 	bl	8008300 <memset>
	}
	if(_COM6_tx_timeout_count > 3000)
 8003af6:	4b21      	ldr	r3, [pc, #132]	; (8003b7c <transmit_reset+0x120>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d908      	bls.n	8003b14 <transmit_reset+0xb8>
	{
		_COM6_tx_timeout_count = 3500;
 8003b02:	4b1e      	ldr	r3, [pc, #120]	; (8003b7c <transmit_reset+0x120>)
 8003b04:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003b08:	601a      	str	r2, [r3, #0]
		memset(_DG_tx_buf[6], 0x00,26);
 8003b0a:	221a      	movs	r2, #26
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	481c      	ldr	r0, [pc, #112]	; (8003b80 <transmit_reset+0x124>)
 8003b10:	f004 fbf6 	bl	8008300 <memset>
	}
	if(_COM7_tx_timeout_count > 3000)
 8003b14:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <transmit_reset+0x128>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d908      	bls.n	8003b32 <transmit_reset+0xd6>
	{
		_COM7_tx_timeout_count = 3500;
 8003b20:	4b18      	ldr	r3, [pc, #96]	; (8003b84 <transmit_reset+0x128>)
 8003b22:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003b26:	601a      	str	r2, [r3, #0]
		memset(_DG_tx_buf[7], 0x00,26);
 8003b28:	221a      	movs	r2, #26
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4816      	ldr	r0, [pc, #88]	; (8003b88 <transmit_reset+0x12c>)
 8003b2e:	f004 fbe7 	bl	8008300 <memset>
	}
	if(_COM8_tx_timeout_count > 3000)
 8003b32:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <transmit_reset+0x130>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d908      	bls.n	8003b50 <transmit_reset+0xf4>
	{
		_COM8_tx_timeout_count = 3500;
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <transmit_reset+0x130>)
 8003b40:	f640 52ac 	movw	r2, #3500	; 0xdac
 8003b44:	601a      	str	r2, [r3, #0]
		memset(_DG_tx_buf[8], 0x00,26);
 8003b46:	221a      	movs	r2, #26
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4811      	ldr	r0, [pc, #68]	; (8003b90 <transmit_reset+0x134>)
 8003b4c:	f004 fbd8 	bl	8008300 <memset>
	}

}
 8003b50:	bf00      	nop
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20000d40 	.word	0x20000d40
 8003b58:	20000c2a 	.word	0x20000c2a
 8003b5c:	20000d44 	.word	0x20000d44
 8003b60:	20000c48 	.word	0x20000c48
 8003b64:	20000d48 	.word	0x20000d48
 8003b68:	20000c66 	.word	0x20000c66
 8003b6c:	20000d4c 	.word	0x20000d4c
 8003b70:	20000c84 	.word	0x20000c84
 8003b74:	20000d50 	.word	0x20000d50
 8003b78:	20000ca2 	.word	0x20000ca2
 8003b7c:	20000d54 	.word	0x20000d54
 8003b80:	20000cc0 	.word	0x20000cc0
 8003b84:	20000d58 	.word	0x20000d58
 8003b88:	20000cde 	.word	0x20000cde
 8003b8c:	20000d5c 	.word	0x20000d5c
 8003b90:	20000cfc 	.word	0x20000cfc

08003b94 <transmit>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////// UART to SPI send ////////////////////////////////////////////////////////
void transmit(void)
{
 8003b94:	b598      	push	{r3, r4, r7, lr}
 8003b96:	af00      	add	r7, sp, #0
	static cx_uint8_t chk[9];
	static cx_uint_t i,j,l,m;


	memcpy(_DG_tx_buf[0],_data_,26);
 8003b98:	221a      	movs	r2, #26
 8003b9a:	4941      	ldr	r1, [pc, #260]	; (8003ca0 <transmit+0x10c>)
 8003b9c:	4841      	ldr	r0, [pc, #260]	; (8003ca4 <transmit+0x110>)
 8003b9e:	f004 fbdb 	bl	8008358 <memcpy>


	for(m = 1; m<9; m++)
 8003ba2:	4b41      	ldr	r3, [pc, #260]	; (8003ca8 <transmit+0x114>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e016      	b.n	8003bd8 <transmit+0x44>
	{
		chk[m] = Transmit_checksum(_DG_tx_buf[m], 22);
 8003baa:	4b3f      	ldr	r3, [pc, #252]	; (8003ca8 <transmit+0x114>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	4a3b      	ldr	r2, [pc, #236]	; (8003ca4 <transmit+0x110>)
 8003bb8:	4413      	add	r3, r2
 8003bba:	4a3b      	ldr	r2, [pc, #236]	; (8003ca8 <transmit+0x114>)
 8003bbc:	6814      	ldr	r4, [r2, #0]
 8003bbe:	2116      	movs	r1, #22
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fedb 	bl	800397c <Transmit_checksum>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4b38      	ldr	r3, [pc, #224]	; (8003cac <transmit+0x118>)
 8003bcc:	551a      	strb	r2, [r3, r4]
	for(m = 1; m<9; m++)
 8003bce:	4b36      	ldr	r3, [pc, #216]	; (8003ca8 <transmit+0x114>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	4a34      	ldr	r2, [pc, #208]	; (8003ca8 <transmit+0x114>)
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	4b33      	ldr	r3, [pc, #204]	; (8003ca8 <transmit+0x114>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d9e4      	bls.n	8003baa <transmit+0x16>
	}

	for(l =0; l<26; l++)
 8003be0:	4b33      	ldr	r3, [pc, #204]	; (8003cb0 <transmit+0x11c>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	e00b      	b.n	8003c00 <transmit+0x6c>
	{
		uarti2cspi_uartWrite(_DG_tx_buf[0][l]);
 8003be8:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <transmit+0x11c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <transmit+0x110>)
 8003bee:	5cd3      	ldrb	r3, [r2, r3]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 f927 	bl	8003e44 <uarti2cspi_uartWrite>
	for(l =0; l<26; l++)
 8003bf6:	4b2e      	ldr	r3, [pc, #184]	; (8003cb0 <transmit+0x11c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	4a2c      	ldr	r2, [pc, #176]	; (8003cb0 <transmit+0x11c>)
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <transmit+0x11c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b19      	cmp	r3, #25
 8003c06:	d9ef      	bls.n	8003be8 <transmit+0x54>

	}



	for(i=1; i<9; i++)
 8003c08:	4b2a      	ldr	r3, [pc, #168]	; (8003cb4 <transmit+0x120>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	e03c      	b.n	8003c8a <transmit+0xf6>
	{

		if(_DG_tx_buf[i][2] != 0x00 && _DG_tx_buf[i][22] == chk[i])
 8003c10:	4b28      	ldr	r3, [pc, #160]	; (8003cb4 <transmit+0x120>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4923      	ldr	r1, [pc, #140]	; (8003ca4 <transmit+0x110>)
 8003c16:	4613      	mov	r3, r2
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	440b      	add	r3, r1
 8003c20:	3302      	adds	r3, #2
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d02b      	beq.n	8003c80 <transmit+0xec>
 8003c28:	4b22      	ldr	r3, [pc, #136]	; (8003cb4 <transmit+0x120>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	491d      	ldr	r1, [pc, #116]	; (8003ca4 <transmit+0x110>)
 8003c2e:	4613      	mov	r3, r2
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	440b      	add	r3, r1
 8003c38:	3316      	adds	r3, #22
 8003c3a:	781a      	ldrb	r2, [r3, #0]
 8003c3c:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <transmit+0x120>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	491a      	ldr	r1, [pc, #104]	; (8003cac <transmit+0x118>)
 8003c42:	5ccb      	ldrb	r3, [r1, r3]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d11b      	bne.n	8003c80 <transmit+0xec>
			{
				uarti2cspi_uartWrite(_DG_tx_buf[0][j]);

			}
*/
			for(j=0; j<26; j++)
 8003c48:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <transmit+0x124>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	e013      	b.n	8003c78 <transmit+0xe4>
			{
				uarti2cspi_uartWrite(_DG_tx_buf[i][j]);
 8003c50:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <transmit+0x120>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <transmit+0x124>)
 8003c56:	6819      	ldr	r1, [r3, #0]
 8003c58:	4812      	ldr	r0, [pc, #72]	; (8003ca4 <transmit+0x110>)
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4403      	add	r3, r0
 8003c64:	440b      	add	r3, r1
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 f8eb 	bl	8003e44 <uarti2cspi_uartWrite>
			for(j=0; j<26; j++)
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <transmit+0x124>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	4a10      	ldr	r2, [pc, #64]	; (8003cb8 <transmit+0x124>)
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <transmit+0x124>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b19      	cmp	r3, #25
 8003c7e:	d9e7      	bls.n	8003c50 <transmit+0xbc>
	for(i=1; i<9; i++)
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <transmit+0x120>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3301      	adds	r3, #1
 8003c86:	4a0b      	ldr	r2, [pc, #44]	; (8003cb4 <transmit+0x120>)
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <transmit+0x120>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d9be      	bls.n	8003c10 <transmit+0x7c>

			//memset(_DG_tx_buf[i], 0x00, 26);
		}

	}
	memset(chk, 0x00, 9);
 8003c92:	2209      	movs	r2, #9
 8003c94:	2100      	movs	r1, #0
 8003c96:	4805      	ldr	r0, [pc, #20]	; (8003cac <transmit+0x118>)
 8003c98:	f004 fb32 	bl	8008300 <memset>


/*
*/
}
 8003c9c:	bf00      	nop
 8003c9e:	bd98      	pop	{r3, r4, r7, pc}
 8003ca0:	20000000 	.word	0x20000000
 8003ca4:	20000c0c 	.word	0x20000c0c
 8003ca8:	20001304 	.word	0x20001304
 8003cac:	20001308 	.word	0x20001308
 8003cb0:	20001314 	.word	0x20001314
 8003cb4:	20001318 	.word	0x20001318
 8003cb8:	2000131c 	.word	0x2000131c

08003cbc <uarti2cspi_initAdvanced>:




void uarti2cspi_initAdvanced( uint16_t baud_rate, uint8_t data_bits, uint8_t parity_mode, uint8_t stop_bits)
{
 8003cbc:	b590      	push	{r4, r7, lr}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	4608      	mov	r0, r1
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4623      	mov	r3, r4
 8003ccc:	80fb      	strh	r3, [r7, #6]
 8003cce:	4603      	mov	r3, r0
 8003cd0:	717b      	strb	r3, [r7, #5]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	713b      	strb	r3, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	70fb      	strb	r3, [r7, #3]

    uint8_t DLL_val;
    uint8_t DLH_val;
    uint16_t BRR_Reg_Speed;

    HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_RESET);
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ce0:	4824      	ldr	r0, [pc, #144]	; (8003d74 <uarti2cspi_initAdvanced+0xb8>)
 8003ce2:	f001 fa37 	bl	8005154 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8003ce6:	2064      	movs	r0, #100	; 0x64
 8003ce8:	f000 fea8 	bl	8004a3c <HAL_Delay>
    HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 8003cec:	2201      	movs	r2, #1
 8003cee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cf2:	4820      	ldr	r0, [pc, #128]	; (8003d74 <uarti2cspi_initAdvanced+0xb8>)
 8003cf4:	f001 fa2e 	bl	8005154 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8003cf8:	2064      	movs	r0, #100	; 0x64
 8003cfa:	f000 fe9f 	bl	8004a3c <HAL_Delay>

    BRR_Reg_Speed = _calcBaudRate( baud_rate );
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fc ffdf 	bl	8000cc4 <_calcBaudRate>
 8003d06:	4603      	mov	r3, r0
 8003d08:	81fb      	strh	r3, [r7, #14]

    DLH_val = (uint8_t)( ( BRR_Reg_Speed >> 8 ) & 0x00FF );
 8003d0a:	89fb      	ldrh	r3, [r7, #14]
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	737b      	strb	r3, [r7, #13]
    DLL_val = (uint8_t)( BRR_Reg_Speed & 0x00FF );
 8003d12:	89fb      	ldrh	r3, [r7, #14]
 8003d14:	733b      	strb	r3, [r7, #12]

    uarti2cspi_writeReg( UARTI2CSPI_LCR, 0x80    );                             //Enable Special register latch
 8003d16:	2318      	movs	r3, #24
 8003d18:	2180      	movs	r1, #128	; 0x80
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f82c 	bl	8003d78 <uarti2cspi_writeReg>
    uarti2cspi_writeReg( UARTI2CSPI_DLL, DLL_val );                             //DLL
 8003d20:	2200      	movs	r2, #0
 8003d22:	7b3b      	ldrb	r3, [r7, #12]
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f000 f826 	bl	8003d78 <uarti2cspi_writeReg>
    uarti2cspi_writeReg( UARTI2CSPI_DLH, DLH_val );                             //DLH
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	7b7b      	ldrb	r3, [r7, #13]
 8003d30:	4619      	mov	r1, r3
 8003d32:	4610      	mov	r0, r2
 8003d34:	f000 f820 	bl	8003d78 <uarti2cspi_writeReg>
    uarti2cspi_writeReg( UARTI2CSPI_LCR, 0xBF    );
 8003d38:	2318      	movs	r3, #24
 8003d3a:	21bf      	movs	r1, #191	; 0xbf
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 f81b 	bl	8003d78 <uarti2cspi_writeReg>
    uarti2cspi_writeReg( UARTI2CSPI_EFR, 0       );                             //NO FLOW CONTROLL
 8003d42:	2310      	movs	r3, #16
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f816 	bl	8003d78 <uarti2cspi_writeReg>
    uarti2cspi_writeReg( UARTI2CSPI_LCR, data_bits | parity_mode | stop_bits ); //write UART configuration
 8003d4c:	2018      	movs	r0, #24
 8003d4e:	797a      	ldrb	r2, [r7, #5]
 8003d50:	793b      	ldrb	r3, [r7, #4]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f000 f80b 	bl	8003d78 <uarti2cspi_writeReg>

//  uarti2cspi_writeReg( UARTI2CSPI_IER, 0x03 );                                //Enable RX,TX interrupt
	uarti2cspi_writeReg( UARTI2CSPI_IER, 0x02 );								//Enable TX interrupt
 8003d62:	2308      	movs	r3, #8
 8003d64:	2102      	movs	r1, #2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f806 	bl	8003d78 <uarti2cspi_writeReg>
}
 8003d6c:	bf00      	nop
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd90      	pop	{r4, r7, pc}
 8003d74:	40020000 	.word	0x40020000

08003d78 <uarti2cspi_writeReg>:
     uarti2cspi_writeReg( UARTI2CSPI_IER, vect    );

}
//------------------------------------------------------------------
void uarti2cspi_writeReg( uint8_t reg, uint8_t _data )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	460a      	mov	r2, r1
 8003d82:	71fb      	strb	r3, [r7, #7]
 8003d84:	4613      	mov	r3, r2
 8003d86:	71bb      	strb	r3, [r7, #6]
    uint8_t writeReg[ 2 ];

    writeReg[ 0 ] = reg;
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	733b      	strb	r3, [r7, #12]
    writeReg[ 1 ] = _data;
 8003d8c:	79bb      	ldrb	r3, [r7, #6]
 8003d8e:	737b      	strb	r3, [r7, #13]


	if(reg == 0x00)
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d111      	bne.n	8003dba <uarti2cspi_writeReg+0x42>
	{
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003d96:	2200      	movs	r2, #0
 8003d98:	2110      	movs	r1, #16
 8003d9a:	4813      	ldr	r0, [pc, #76]	; (8003de8 <uarti2cspi_writeReg+0x70>)
 8003d9c:	f001 f9da 	bl	8005154 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit_IT(&hspi1,&writeReg[0], 2);
 8003da0:	f107 030c 	add.w	r3, r7, #12
 8003da4:	2202      	movs	r2, #2
 8003da6:	4619      	mov	r1, r3
 8003da8:	4810      	ldr	r0, [pc, #64]	; (8003dec <uarti2cspi_writeReg+0x74>)
 8003daa:	f002 f9bd 	bl	8006128 <HAL_SPI_Transmit_IT>

		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8003dae:	2201      	movs	r2, #1
 8003db0:	2110      	movs	r1, #16
 8003db2:	480d      	ldr	r0, [pc, #52]	; (8003de8 <uarti2cspi_writeReg+0x70>)
 8003db4:	f001 f9ce 	bl	8005154 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive_IT(&hspi1,&writeReg[0] ,&writeReg[0],2);
//		HAL_SPI_Transmit_IT(&hspi1,&writeReg[0] ,2);
        HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
	}

}
 8003db8:	e011      	b.n	8003dde <uarti2cspi_writeReg+0x66>
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2110      	movs	r1, #16
 8003dbe:	480a      	ldr	r0, [pc, #40]	; (8003de8 <uarti2cspi_writeReg+0x70>)
 8003dc0:	f001 f9c8 	bl	8005154 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive_IT(&hspi1,&writeReg[0] ,&writeReg[0],2);
 8003dc4:	f107 020c 	add.w	r2, r7, #12
 8003dc8:	f107 010c 	add.w	r1, r7, #12
 8003dcc:	2302      	movs	r3, #2
 8003dce:	4807      	ldr	r0, [pc, #28]	; (8003dec <uarti2cspi_writeReg+0x74>)
 8003dd0:	f002 fa32 	bl	8006238 <HAL_SPI_TransmitReceive_IT>
        HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	2110      	movs	r1, #16
 8003dd8:	4803      	ldr	r0, [pc, #12]	; (8003de8 <uarti2cspi_writeReg+0x70>)
 8003dda:	f001 f9bb 	bl	8005154 <HAL_GPIO_WritePin>
}
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40020000 	.word	0x40020000
 8003dec:	20000080 	.word	0x20000080

08003df0 <uarti2cspi_readReg>:

//------------------------------------------------------------------
uint8_t uarti2cspi_readReg( uint8_t reg )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	4603      	mov	r3, r0
 8003df8:	71fb      	strb	r3, [r7, #7]
    uint8_t writeReg[ 2 ];
    writeReg[0] = reg;
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	733b      	strb	r3, [r7, #12]


    writeReg[0] |= 0x80;
 8003dfe:	7b3b      	ldrb	r3, [r7, #12]
 8003e00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2110      	movs	r1, #16
 8003e0c:	480b      	ldr	r0, [pc, #44]	; (8003e3c <uarti2cspi_readReg+0x4c>)
 8003e0e:	f001 f9a1 	bl	8005154 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1,&writeReg[0] ,&writeReg[0],2,30);
 8003e12:	f107 020c 	add.w	r2, r7, #12
 8003e16:	f107 010c 	add.w	r1, r7, #12
 8003e1a:	231e      	movs	r3, #30
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2302      	movs	r3, #2
 8003e20:	4807      	ldr	r0, [pc, #28]	; (8003e40 <uarti2cspi_readReg+0x50>)
 8003e22:	f001 ffd1 	bl	8005dc8 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8003e26:	2201      	movs	r2, #1
 8003e28:	2110      	movs	r1, #16
 8003e2a:	4804      	ldr	r0, [pc, #16]	; (8003e3c <uarti2cspi_readReg+0x4c>)
 8003e2c:	f001 f992 	bl	8005154 <HAL_GPIO_WritePin>

    return writeReg[ 1 ];
 8003e30:	7b7b      	ldrb	r3, [r7, #13]

}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40020000 	.word	0x40020000
 8003e40:	20000080 	.word	0x20000080

08003e44 <uarti2cspi_uartWrite>:
//------------------------------------------------------------------
void uarti2cspi_uartWrite( uint8_t wByte )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	71fb      	strb	r3, [r7, #7]
//	uarti2cspi_writeReg(UARTI2CSPI_FCR,0x05);
	uarti2cspi_writeReg(UARTI2CSPI_FCR,0x04);
 8003e4e:	2310      	movs	r3, #16
 8003e50:	2104      	movs	r1, #4
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff ff90 	bl	8003d78 <uarti2cspi_writeReg>

    while(!(uarti2cspi_readReg(UARTI2CSPI_LSR) & 0x40));
 8003e58:	bf00      	nop
 8003e5a:	2328      	movs	r3, #40	; 0x28
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff ffc7 	bl	8003df0 <uarti2cspi_readReg>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f6      	beq.n	8003e5a <uarti2cspi_uartWrite+0x16>

    HAL_GPIO_TogglePin(SPI_UART_TX_LED_GPIO_Port, SPI_UART_TX_LED_Pin);
 8003e6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e70:	480b      	ldr	r0, [pc, #44]	; (8003ea0 <uarti2cspi_uartWrite+0x5c>)
 8003e72:	f001 f988 	bl	8005186 <HAL_GPIO_TogglePin>
	uarti2cspi_writeReg(UARTI2CSPI_THR,wByte);
 8003e76:	2200      	movs	r2, #0
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	f7ff ff7b 	bl	8003d78 <uarti2cspi_writeReg>

	while(HAL_GPIO_ReadPin(SPI_IRQ_GPIO_Port,SPI_IRQ_Pin));
 8003e82:	bf00      	nop
 8003e84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e88:	4806      	ldr	r0, [pc, #24]	; (8003ea4 <uarti2cspi_uartWrite+0x60>)
 8003e8a:	f001 f94b 	bl	8005124 <HAL_GPIO_ReadPin>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f7      	bne.n	8003e84 <uarti2cspi_uartWrite+0x40>

}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40021400 	.word	0x40021400
 8003ea4:	40020000 	.word	0x40020000

08003ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003eac:	b672      	cpsid	i
}
 8003eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003eb0:	e7fe      	b.n	8003eb0 <Error_Handler+0x8>

08003eb2 <ringbuf_init>:
// Global functions
//
/////////////////////////////////////////////////////////////////////////////
//===========================================================================
void ringbuf_init (uart_hal_rx_type* ringbuf, cx_uint8_t* memory, RINGBUF_SIZE memory_size)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b087      	sub	sp, #28
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	607a      	str	r2, [r7, #4]
	RINGBUF_SIZE size;
	RINGBUF_SIZE power_of_two;


	for (power_of_two = 1; 
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e002      	b.n	8003eca <ringbuf_init+0x18>
	     (RINGBUF_SIZE)(1 << power_of_two) < memory_size; 
		 power_of_two++);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	617b      	str	r3, [r7, #20]
	     (RINGBUF_SIZE)(1 << power_of_two) < memory_size; 
 8003eca:	2201      	movs	r2, #1
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d8f4      	bhi.n	8003ec4 <ringbuf_init+0x12>

	size = 1 << power_of_two;
 8003eda:	2201      	movs	r2, #1
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	613b      	str	r3, [r7, #16]

	ringbuf->size       = size;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	601a      	str	r2, [r3, #0]
	ringbuf->size_mask  = size-1;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1e5a      	subs	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	605a      	str	r2, [r3, #4]
	ringbuf->w_pointer  = 0;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	609a      	str	r2, [r3, #8]
	ringbuf->r_pointer  = 0;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	60da      	str	r2, [r3, #12]
	ringbuf->buf        = memory;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	611a      	str	r2, [r3, #16]
}
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <ringbuf_get_readable_space>:
	ringbuf->r_pointer = 0;
	ringbuf->w_pointer = 0;
}

RINGBUF_SIZE ringbuf_get_readable_space (uart_hal_rx_type* ringbuf)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	RINGBUF_SIZE w, r;

	w = ringbuf->w_pointer;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	60fb      	str	r3, [r7, #12]
	r = ringbuf->r_pointer;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	60bb      	str	r3, [r7, #8]

	if (w > r) 
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d903      	bls.n	8003f34 <ringbuf_get_readable_space+0x24>
	{
		return w - r;
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	e008      	b.n	8003f46 <ringbuf_get_readable_space+0x36>
	} 

	return (w - r + ringbuf->size) & ringbuf->size_mask;
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	1ad2      	subs	r2, r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	441a      	add	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4013      	ands	r3, r2
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <ringbuf_get_writable_space>:

RINGBUF_SIZE ringbuf_get_writable_space (uart_hal_rx_type* ringbuf)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
	RINGBUF_SIZE w, r;

	w = ringbuf->w_pointer;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	60fb      	str	r3, [r7, #12]
	r = ringbuf->r_pointer;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	60bb      	str	r3, [r7, #8]

	if (w > r) 
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d90a      	bls.n	8003f84 <ringbuf_get_writable_space+0x32>
	{
		return ((r - w + ringbuf->size) & ringbuf->size_mask) - 1;
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1ad2      	subs	r2, r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	441a      	add	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	3b01      	subs	r3, #1
 8003f82:	e00b      	b.n	8003f9c <ringbuf_get_writable_space+0x4a>
	} 
	else if (w < r) 
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d204      	bcs.n	8003f96 <ringbuf_get_writable_space+0x44>
	{
		return (r - w) - 1;
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	e002      	b.n	8003f9c <ringbuf_get_writable_space+0x4a>
	} 

	return ringbuf->size - 1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3b01      	subs	r3, #1
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <ringbuf_peek>:

RINGBUF_SIZE ringbuf_peek (uart_hal_rx_type* ringbuf, cx_uint8_t* buf, RINGBUF_SIZE size)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
	RINGBUF_SIZE to_read;
	RINGBUF_SIZE n1, n2;

	RINGBUF_SIZE r_pointer;

	if ((space = ringbuf_get_readable_space (ringbuf)) == 0) 
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f7ff ffab 	bl	8003f10 <ringbuf_get_readable_space>
 8003fba:	61f8      	str	r0, [r7, #28]
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <ringbuf_peek+0x1e>
	{
		return 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e04c      	b.n	8004060 <ringbuf_peek+0xb8>
	}

	to_read = size > space ? space : size;
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	bf28      	it	cs
 8003fce:	4613      	movcs	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
	ring    = ringbuf->r_pointer + to_read;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4413      	add	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]

	if (ring > ringbuf->size) 
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d90b      	bls.n	8003ffe <ringbuf_peek+0x56>
	{
		n1 = ringbuf->size - ringbuf->r_pointer;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
		n2 = ring & ringbuf->size_mask;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	623b      	str	r3, [r7, #32]
 8003ffc:	e003      	b.n	8004006 <ringbuf_peek+0x5e>
	} 
	else 
	{
		n1 = to_read;
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
		n2 = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	623b      	str	r3, [r7, #32]
	}

	r_pointer = ringbuf->r_pointer;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	613b      	str	r3, [r7, #16]

	memcpy (buf, &(ringbuf->buf[r_pointer]), n1);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4413      	add	r3, r2
 8004014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004016:	4619      	mov	r1, r3
 8004018:	68b8      	ldr	r0, [r7, #8]
 800401a:	f004 f99d 	bl	8008358 <memcpy>
	r_pointer += n1;
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	4413      	add	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
	r_pointer &= ringbuf->size_mask;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4013      	ands	r3, r2
 800402e:	613b      	str	r3, [r7, #16]

	if (n2) 
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d013      	beq.n	800405e <ringbuf_peek+0xb6>
	{
		memcpy (buf + n1, &(ringbuf->buf[r_pointer]), n2);
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	18d0      	adds	r0, r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4413      	add	r3, r2
 8004044:	6a3a      	ldr	r2, [r7, #32]
 8004046:	4619      	mov	r1, r3
 8004048:	f004 f986 	bl	8008358 <memcpy>
		r_pointer += n2;
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	4413      	add	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
		r_pointer &= ringbuf->size_mask;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
	}

	return to_read;
 800405e:	69bb      	ldr	r3, [r7, #24]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3728      	adds	r7, #40	; 0x28
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <ringbuf_read>:

RINGBUF_SIZE ringbuf_read (uart_hal_rx_type* ringbuf, cx_uint8_t* buf, RINGBUF_SIZE size)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	; 0x28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
	RINGBUF_SIZE to_read;
	RINGBUF_SIZE n1, n2;

	RINGBUF_SIZE r_pointer;
	
	if ((space = ringbuf_get_readable_space (ringbuf)) == 0) 
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f7ff ff4b 	bl	8003f10 <ringbuf_get_readable_space>
 800407a:	61b8      	str	r0, [r7, #24]
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <ringbuf_read+0x1e>
	{
		return 0;
 8004082:	2300      	movs	r3, #0
 8004084:	e04f      	b.n	8004126 <ringbuf_read+0xbe>
	}

	to_read = size > space ? space : size;
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	4293      	cmp	r3, r2
 800408c:	bf28      	it	cs
 800408e:	4613      	movcs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]
	ring    = ringbuf->r_pointer + to_read;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4413      	add	r3, r2
 800409a:	613b      	str	r3, [r7, #16]

	if (ring > ringbuf->size) 
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d90b      	bls.n	80040be <ringbuf_read+0x56>
	{
		n1 = ringbuf->size - ringbuf->r_pointer;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
		n2 = ring & ringbuf->size_mask;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4013      	ands	r3, r2
 80040ba:	623b      	str	r3, [r7, #32]
 80040bc:	e003      	b.n	80040c6 <ringbuf_read+0x5e>
	} 
	else 
	{
		n1 = to_read;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
		n2 = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	623b      	str	r3, [r7, #32]
	}
	
	r_pointer = ringbuf->r_pointer;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	61fb      	str	r3, [r7, #28]

	memcpy (buf, &(ringbuf->buf[r_pointer]), n1);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	4413      	add	r3, r2
 80040d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d6:	4619      	mov	r1, r3
 80040d8:	68b8      	ldr	r0, [r7, #8]
 80040da:	f004 f93d 	bl	8008358 <memcpy>
	r_pointer += n1;
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	4413      	add	r3, r2
 80040e4:	61fb      	str	r3, [r7, #28]
	r_pointer &= ringbuf->size_mask;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61fb      	str	r3, [r7, #28]

	if (n2) 
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d013      	beq.n	800411e <ringbuf_read+0xb6>
	{
		memcpy (buf + n1, &(ringbuf->buf[r_pointer]), n2);
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	18d0      	adds	r0, r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	4413      	add	r3, r2
 8004104:	6a3a      	ldr	r2, [r7, #32]
 8004106:	4619      	mov	r1, r3
 8004108:	f004 f926 	bl	8008358 <memcpy>
		r_pointer += n2;
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	4413      	add	r3, r2
 8004112:	61fb      	str	r3, [r7, #28]
		r_pointer &= ringbuf->size_mask;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	4013      	ands	r3, r2
 800411c:	61fb      	str	r3, [r7, #28]
	}
	
	ringbuf->r_pointer=r_pointer;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	60da      	str	r2, [r3, #12]
	
	return to_read;
 8004124:	697b      	ldr	r3, [r7, #20]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3728      	adds	r7, #40	; 0x28
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <ringbuf_write>:

RINGBUF_SIZE ringbuf_write (uart_hal_rx_type* ringbuf, const cx_uint8_t* buf, RINGBUF_SIZE size)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b08a      	sub	sp, #40	; 0x28
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	607a      	str	r2, [r7, #4]
	RINGBUF_SIZE to_write;
	RINGBUF_SIZE n1, n2;

	RINGBUF_SIZE w_pointer;
	
	if ((space = ringbuf_get_writable_space (ringbuf)) == 0) 
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f7ff ff09 	bl	8003f52 <ringbuf_get_writable_space>
 8004140:	61b8      	str	r0, [r7, #24]
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <ringbuf_write+0x1e>
	{
		return 0;
 8004148:	2300      	movs	r3, #0
 800414a:	e04f      	b.n	80041ec <ringbuf_write+0xbe>
	}

	to_write = size > space ? space : size;
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	4293      	cmp	r3, r2
 8004152:	bf28      	it	cs
 8004154:	4613      	movcs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]
	ring     = ringbuf->w_pointer + to_write;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	4413      	add	r3, r2
 8004160:	613b      	str	r3, [r7, #16]

	if (ring > ringbuf->size) 
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	429a      	cmp	r2, r3
 800416a:	d90b      	bls.n	8004184 <ringbuf_write+0x56>
	{
		n1 = ringbuf->size - ringbuf->w_pointer;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
		n2 = ring & ringbuf->size_mask;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4013      	ands	r3, r2
 8004180:	623b      	str	r3, [r7, #32]
 8004182:	e003      	b.n	800418c <ringbuf_write+0x5e>
	} 
	else 
	{
		n1 = to_write;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
		n2 = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	623b      	str	r3, [r7, #32]
	}
	
	w_pointer = ringbuf->w_pointer;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	61fb      	str	r3, [r7, #28]

	memcpy (&(ringbuf->buf[w_pointer]), buf, n1);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	4413      	add	r3, r2
 800419a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	4618      	mov	r0, r3
 80041a0:	f004 f8da 	bl	8008358 <memcpy>
	w_pointer += n1;
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	4413      	add	r3, r2
 80041aa:	61fb      	str	r3, [r7, #28]
	w_pointer &= ringbuf->size_mask;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	4013      	ands	r3, r2
 80041b4:	61fb      	str	r3, [r7, #28]

	if (n2) 
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d013      	beq.n	80041e4 <ringbuf_write+0xb6>
	{
		memcpy (&(ringbuf->buf[w_pointer]), buf + n1, n2);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	18d0      	adds	r0, r2, r3
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	4413      	add	r3, r2
 80041ca:	6a3a      	ldr	r2, [r7, #32]
 80041cc:	4619      	mov	r1, r3
 80041ce:	f004 f8c3 	bl	8008358 <memcpy>
		w_pointer += n2;
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	4413      	add	r3, r2
 80041d8:	61fb      	str	r3, [r7, #28]
		w_pointer &= ringbuf->size_mask;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61fb      	str	r3, [r7, #28]
	}
	
	ringbuf->w_pointer = w_pointer;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	609a      	str	r2, [r3, #8]

	return to_write;
 80041ea:	697b      	ldr	r3, [r7, #20]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3728      	adds	r7, #40	; 0x28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	607b      	str	r3, [r7, #4]
 80041fe:	4b10      	ldr	r3, [pc, #64]	; (8004240 <HAL_MspInit+0x4c>)
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	4a0f      	ldr	r2, [pc, #60]	; (8004240 <HAL_MspInit+0x4c>)
 8004204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004208:	6453      	str	r3, [r2, #68]	; 0x44
 800420a:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <HAL_MspInit+0x4c>)
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004212:	607b      	str	r3, [r7, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	4b09      	ldr	r3, [pc, #36]	; (8004240 <HAL_MspInit+0x4c>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	4a08      	ldr	r2, [pc, #32]	; (8004240 <HAL_MspInit+0x4c>)
 8004220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004224:	6413      	str	r3, [r2, #64]	; 0x40
 8004226:	4b06      	ldr	r3, [pc, #24]	; (8004240 <HAL_MspInit+0x4c>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40023800 	.word	0x40023800

08004244 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a0b      	ldr	r2, [pc, #44]	; (8004280 <HAL_RNG_MspInit+0x3c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10d      	bne.n	8004272 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <HAL_RNG_MspInit+0x40>)
 800425c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425e:	4a09      	ldr	r2, [pc, #36]	; (8004284 <HAL_RNG_MspInit+0x40>)
 8004260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004264:	6353      	str	r3, [r2, #52]	; 0x34
 8004266:	4b07      	ldr	r3, [pc, #28]	; (8004284 <HAL_RNG_MspInit+0x40>)
 8004268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	50060800 	.word	0x50060800
 8004284:	40023800 	.word	0x40023800

08004288 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	; 0x28
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1d      	ldr	r2, [pc, #116]	; (800431c <HAL_SPI_MspInit+0x94>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d133      	bne.n	8004312 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	4b1c      	ldr	r3, [pc, #112]	; (8004320 <HAL_SPI_MspInit+0x98>)
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	4a1b      	ldr	r2, [pc, #108]	; (8004320 <HAL_SPI_MspInit+0x98>)
 80042b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042b8:	6453      	str	r3, [r2, #68]	; 0x44
 80042ba:	4b19      	ldr	r3, [pc, #100]	; (8004320 <HAL_SPI_MspInit+0x98>)
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c2:	613b      	str	r3, [r7, #16]
 80042c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	4b15      	ldr	r3, [pc, #84]	; (8004320 <HAL_SPI_MspInit+0x98>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	4a14      	ldr	r2, [pc, #80]	; (8004320 <HAL_SPI_MspInit+0x98>)
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	6313      	str	r3, [r2, #48]	; 0x30
 80042d6:	4b12      	ldr	r3, [pc, #72]	; (8004320 <HAL_SPI_MspInit+0x98>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80042e2:	23e0      	movs	r3, #224	; 0xe0
 80042e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e6:	2302      	movs	r3, #2
 80042e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ee:	2303      	movs	r3, #3
 80042f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80042f2:	2305      	movs	r3, #5
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f6:	f107 0314 	add.w	r3, r7, #20
 80042fa:	4619      	mov	r1, r3
 80042fc:	4809      	ldr	r0, [pc, #36]	; (8004324 <HAL_SPI_MspInit+0x9c>)
 80042fe:	f000 fd65 	bl	8004dcc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004302:	2200      	movs	r2, #0
 8004304:	2100      	movs	r1, #0
 8004306:	2023      	movs	r0, #35	; 0x23
 8004308:	f000 fc97 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800430c:	2023      	movs	r0, #35	; 0x23
 800430e:	f000 fcb0 	bl	8004c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004312:	bf00      	nop
 8004314:	3728      	adds	r7, #40	; 0x28
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40013000 	.word	0x40013000
 8004320:	40023800 	.word	0x40023800
 8004324:	40020000 	.word	0x40020000

08004328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a0e      	ldr	r2, [pc, #56]	; (8004370 <HAL_TIM_Base_MspInit+0x48>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d115      	bne.n	8004366 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <HAL_TIM_Base_MspInit+0x4c>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	4a0c      	ldr	r2, [pc, #48]	; (8004374 <HAL_TIM_Base_MspInit+0x4c>)
 8004344:	f043 0302 	orr.w	r3, r3, #2
 8004348:	6413      	str	r3, [r2, #64]	; 0x40
 800434a:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <HAL_TIM_Base_MspInit+0x4c>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004356:	2200      	movs	r2, #0
 8004358:	2100      	movs	r1, #0
 800435a:	201d      	movs	r0, #29
 800435c:	f000 fc6d 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004360:	201d      	movs	r0, #29
 8004362:	f000 fc86 	bl	8004c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004366:	bf00      	nop
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40000400 	.word	0x40000400
 8004374:	40023800 	.word	0x40023800

08004378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b098      	sub	sp, #96	; 0x60
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004380:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	60da      	str	r2, [r3, #12]
 800438e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4aa0      	ldr	r2, [pc, #640]	; (8004618 <HAL_UART_MspInit+0x2a0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d135      	bne.n	8004406 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800439a:	2300      	movs	r3, #0
 800439c:	64bb      	str	r3, [r7, #72]	; 0x48
 800439e:	4b9f      	ldr	r3, [pc, #636]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	4a9e      	ldr	r2, [pc, #632]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80043a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043a8:	6413      	str	r3, [r2, #64]	; 0x40
 80043aa:	4b9c      	ldr	r3, [pc, #624]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	647b      	str	r3, [r7, #68]	; 0x44
 80043ba:	4b98      	ldr	r3, [pc, #608]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	4a97      	ldr	r2, [pc, #604]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80043c0:	f043 0304 	orr.w	r3, r3, #4
 80043c4:	6313      	str	r3, [r2, #48]	; 0x30
 80043c6:	4b95      	ldr	r3, [pc, #596]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	647b      	str	r3, [r7, #68]	; 0x44
 80043d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80043d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d8:	2302      	movs	r3, #2
 80043da:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043e0:	2303      	movs	r3, #3
 80043e2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80043e4:	2308      	movs	r3, #8
 80043e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80043ec:	4619      	mov	r1, r3
 80043ee:	488c      	ldr	r0, [pc, #560]	; (8004620 <HAL_UART_MspInit+0x2a8>)
 80043f0:	f000 fcec 	bl	8004dcc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80043f4:	2200      	movs	r2, #0
 80043f6:	2105      	movs	r1, #5
 80043f8:	2034      	movs	r0, #52	; 0x34
 80043fa:	f000 fc1e 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80043fe:	2034      	movs	r0, #52	; 0x34
 8004400:	f000 fc37 	bl	8004c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004404:	e1cc      	b.n	80047a0 <HAL_UART_MspInit+0x428>
  else if(huart->Instance==UART5)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a86      	ldr	r2, [pc, #536]	; (8004624 <HAL_UART_MspInit+0x2ac>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d153      	bne.n	80044b8 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004410:	2300      	movs	r3, #0
 8004412:	643b      	str	r3, [r7, #64]	; 0x40
 8004414:	4b81      	ldr	r3, [pc, #516]	; (800461c <HAL_UART_MspInit+0x2a4>)
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	4a80      	ldr	r2, [pc, #512]	; (800461c <HAL_UART_MspInit+0x2a4>)
 800441a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800441e:	6413      	str	r3, [r2, #64]	; 0x40
 8004420:	4b7e      	ldr	r3, [pc, #504]	; (800461c <HAL_UART_MspInit+0x2a4>)
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004428:	643b      	str	r3, [r7, #64]	; 0x40
 800442a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800442c:	2300      	movs	r3, #0
 800442e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004430:	4b7a      	ldr	r3, [pc, #488]	; (800461c <HAL_UART_MspInit+0x2a4>)
 8004432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004434:	4a79      	ldr	r2, [pc, #484]	; (800461c <HAL_UART_MspInit+0x2a4>)
 8004436:	f043 0304 	orr.w	r3, r3, #4
 800443a:	6313      	str	r3, [r2, #48]	; 0x30
 800443c:	4b77      	ldr	r3, [pc, #476]	; (800461c <HAL_UART_MspInit+0x2a4>)
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004448:	2300      	movs	r3, #0
 800444a:	63bb      	str	r3, [r7, #56]	; 0x38
 800444c:	4b73      	ldr	r3, [pc, #460]	; (800461c <HAL_UART_MspInit+0x2a4>)
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	4a72      	ldr	r2, [pc, #456]	; (800461c <HAL_UART_MspInit+0x2a4>)
 8004452:	f043 0308 	orr.w	r3, r3, #8
 8004456:	6313      	str	r3, [r2, #48]	; 0x30
 8004458:	4b70      	ldr	r3, [pc, #448]	; (800461c <HAL_UART_MspInit+0x2a4>)
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	63bb      	str	r3, [r7, #56]	; 0x38
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004468:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446a:	2302      	movs	r3, #2
 800446c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446e:	2300      	movs	r3, #0
 8004470:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004472:	2303      	movs	r3, #3
 8004474:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004476:	2308      	movs	r3, #8
 8004478:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800447a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800447e:	4619      	mov	r1, r3
 8004480:	4867      	ldr	r0, [pc, #412]	; (8004620 <HAL_UART_MspInit+0x2a8>)
 8004482:	f000 fca3 	bl	8004dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004486:	2304      	movs	r3, #4
 8004488:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448a:	2302      	movs	r3, #2
 800448c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448e:	2300      	movs	r3, #0
 8004490:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004492:	2303      	movs	r3, #3
 8004494:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004496:	2308      	movs	r3, #8
 8004498:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800449a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800449e:	4619      	mov	r1, r3
 80044a0:	4861      	ldr	r0, [pc, #388]	; (8004628 <HAL_UART_MspInit+0x2b0>)
 80044a2:	f000 fc93 	bl	8004dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 6, 0);
 80044a6:	2200      	movs	r2, #0
 80044a8:	2106      	movs	r1, #6
 80044aa:	2035      	movs	r0, #53	; 0x35
 80044ac:	f000 fbc5 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80044b0:	2035      	movs	r0, #53	; 0x35
 80044b2:	f000 fbde 	bl	8004c72 <HAL_NVIC_EnableIRQ>
}
 80044b6:	e173      	b.n	80047a0 <HAL_UART_MspInit+0x428>
  else if(huart->Instance==UART7)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a5b      	ldr	r2, [pc, #364]	; (800462c <HAL_UART_MspInit+0x2b4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d134      	bne.n	800452c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_UART7_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
 80044c6:	4b55      	ldr	r3, [pc, #340]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	4a54      	ldr	r2, [pc, #336]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80044cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044d0:	6413      	str	r3, [r2, #64]	; 0x40
 80044d2:	4b52      	ldr	r3, [pc, #328]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044da:	637b      	str	r3, [r7, #52]	; 0x34
 80044dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	633b      	str	r3, [r7, #48]	; 0x30
 80044e2:	4b4e      	ldr	r3, [pc, #312]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4a4d      	ldr	r2, [pc, #308]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80044e8:	f043 0320 	orr.w	r3, r3, #32
 80044ec:	6313      	str	r3, [r2, #48]	; 0x30
 80044ee:	4b4b      	ldr	r3, [pc, #300]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	633b      	str	r3, [r7, #48]	; 0x30
 80044f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044fa:	23c0      	movs	r3, #192	; 0xc0
 80044fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fe:	2302      	movs	r3, #2
 8004500:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004502:	2300      	movs	r3, #0
 8004504:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004506:	2303      	movs	r3, #3
 8004508:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800450a:	2308      	movs	r3, #8
 800450c:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800450e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004512:	4619      	mov	r1, r3
 8004514:	4846      	ldr	r0, [pc, #280]	; (8004630 <HAL_UART_MspInit+0x2b8>)
 8004516:	f000 fc59 	bl	8004dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 800451a:	2200      	movs	r2, #0
 800451c:	2105      	movs	r1, #5
 800451e:	2052      	movs	r0, #82	; 0x52
 8004520:	f000 fb8b 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004524:	2052      	movs	r0, #82	; 0x52
 8004526:	f000 fba4 	bl	8004c72 <HAL_NVIC_EnableIRQ>
}
 800452a:	e139      	b.n	80047a0 <HAL_UART_MspInit+0x428>
  else if(huart->Instance==UART8)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a40      	ldr	r2, [pc, #256]	; (8004634 <HAL_UART_MspInit+0x2bc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d134      	bne.n	80045a0 <HAL_UART_MspInit+0x228>
    __HAL_RCC_UART8_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453a:	4b38      	ldr	r3, [pc, #224]	; (800461c <HAL_UART_MspInit+0x2a4>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	4a37      	ldr	r2, [pc, #220]	; (800461c <HAL_UART_MspInit+0x2a4>)
 8004540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004544:	6413      	str	r3, [r2, #64]	; 0x40
 8004546:	4b35      	ldr	r3, [pc, #212]	; (800461c <HAL_UART_MspInit+0x2a4>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
 8004556:	4b31      	ldr	r3, [pc, #196]	; (800461c <HAL_UART_MspInit+0x2a4>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	4a30      	ldr	r2, [pc, #192]	; (800461c <HAL_UART_MspInit+0x2a4>)
 800455c:	f043 0310 	orr.w	r3, r3, #16
 8004560:	6313      	str	r3, [r2, #48]	; 0x30
 8004562:	4b2e      	ldr	r3, [pc, #184]	; (800461c <HAL_UART_MspInit+0x2a4>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800456e:	2303      	movs	r3, #3
 8004570:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004572:	2302      	movs	r3, #2
 8004574:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004576:	2300      	movs	r3, #0
 8004578:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800457a:	2303      	movs	r3, #3
 800457c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800457e:	2308      	movs	r3, #8
 8004580:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004582:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004586:	4619      	mov	r1, r3
 8004588:	482b      	ldr	r0, [pc, #172]	; (8004638 <HAL_UART_MspInit+0x2c0>)
 800458a:	f000 fc1f 	bl	8004dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 4, 0);
 800458e:	2200      	movs	r2, #0
 8004590:	2104      	movs	r1, #4
 8004592:	2053      	movs	r0, #83	; 0x53
 8004594:	f000 fb51 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8004598:	2053      	movs	r0, #83	; 0x53
 800459a:	f000 fb6a 	bl	8004c72 <HAL_NVIC_EnableIRQ>
}
 800459e:	e0ff      	b.n	80047a0 <HAL_UART_MspInit+0x428>
  else if(huart->Instance==USART1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a25      	ldr	r2, [pc, #148]	; (800463c <HAL_UART_MspInit+0x2c4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d14c      	bne.n	8004644 <HAL_UART_MspInit+0x2cc>
    __HAL_RCC_USART1_CLK_ENABLE();
 80045aa:	2300      	movs	r3, #0
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
 80045ae:	4b1b      	ldr	r3, [pc, #108]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	4a1a      	ldr	r2, [pc, #104]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80045b4:	f043 0310 	orr.w	r3, r3, #16
 80045b8:	6453      	str	r3, [r2, #68]	; 0x44
 80045ba:	4b18      	ldr	r3, [pc, #96]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c6:	2300      	movs	r3, #0
 80045c8:	623b      	str	r3, [r7, #32]
 80045ca:	4b14      	ldr	r3, [pc, #80]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	4a13      	ldr	r2, [pc, #76]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	6313      	str	r3, [r2, #48]	; 0x30
 80045d6:	4b11      	ldr	r3, [pc, #68]	; (800461c <HAL_UART_MspInit+0x2a4>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	623b      	str	r3, [r7, #32]
 80045e0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80045e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80045e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e8:	2302      	movs	r3, #2
 80045ea:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f0:	2303      	movs	r3, #3
 80045f2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045f4:	2307      	movs	r3, #7
 80045f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80045fc:	4619      	mov	r1, r3
 80045fe:	4810      	ldr	r0, [pc, #64]	; (8004640 <HAL_UART_MspInit+0x2c8>)
 8004600:	f000 fbe4 	bl	8004dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8004604:	2200      	movs	r2, #0
 8004606:	2104      	movs	r1, #4
 8004608:	2025      	movs	r0, #37	; 0x25
 800460a:	f000 fb16 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800460e:	2025      	movs	r0, #37	; 0x25
 8004610:	f000 fb2f 	bl	8004c72 <HAL_NVIC_EnableIRQ>
}
 8004614:	e0c4      	b.n	80047a0 <HAL_UART_MspInit+0x428>
 8004616:	bf00      	nop
 8004618:	40004c00 	.word	0x40004c00
 800461c:	40023800 	.word	0x40023800
 8004620:	40020800 	.word	0x40020800
 8004624:	40005000 	.word	0x40005000
 8004628:	40020c00 	.word	0x40020c00
 800462c:	40007800 	.word	0x40007800
 8004630:	40021400 	.word	0x40021400
 8004634:	40007c00 	.word	0x40007c00
 8004638:	40021000 	.word	0x40021000
 800463c:	40011000 	.word	0x40011000
 8004640:	40020000 	.word	0x40020000
  else if(huart->Instance==USART2)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a57      	ldr	r2, [pc, #348]	; (80047a8 <HAL_UART_MspInit+0x430>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d134      	bne.n	80046b8 <HAL_UART_MspInit+0x340>
    __HAL_RCC_USART2_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	4b56      	ldr	r3, [pc, #344]	; (80047ac <HAL_UART_MspInit+0x434>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	4a55      	ldr	r2, [pc, #340]	; (80047ac <HAL_UART_MspInit+0x434>)
 8004658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800465c:	6413      	str	r3, [r2, #64]	; 0x40
 800465e:	4b53      	ldr	r3, [pc, #332]	; (80047ac <HAL_UART_MspInit+0x434>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	61fb      	str	r3, [r7, #28]
 8004668:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
 800466e:	4b4f      	ldr	r3, [pc, #316]	; (80047ac <HAL_UART_MspInit+0x434>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	4a4e      	ldr	r2, [pc, #312]	; (80047ac <HAL_UART_MspInit+0x434>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	6313      	str	r3, [r2, #48]	; 0x30
 800467a:	4b4c      	ldr	r3, [pc, #304]	; (80047ac <HAL_UART_MspInit+0x434>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004686:	230c      	movs	r3, #12
 8004688:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800468a:	2302      	movs	r3, #2
 800468c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468e:	2300      	movs	r3, #0
 8004690:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004692:	2303      	movs	r3, #3
 8004694:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004696:	2307      	movs	r3, #7
 8004698:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800469a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800469e:	4619      	mov	r1, r3
 80046a0:	4843      	ldr	r0, [pc, #268]	; (80047b0 <HAL_UART_MspInit+0x438>)
 80046a2:	f000 fb93 	bl	8004dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80046a6:	2200      	movs	r2, #0
 80046a8:	2105      	movs	r1, #5
 80046aa:	2026      	movs	r0, #38	; 0x26
 80046ac:	f000 fac5 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80046b0:	2026      	movs	r0, #38	; 0x26
 80046b2:	f000 fade 	bl	8004c72 <HAL_NVIC_EnableIRQ>
}
 80046b6:	e073      	b.n	80047a0 <HAL_UART_MspInit+0x428>
  else if(huart->Instance==USART3)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a3d      	ldr	r2, [pc, #244]	; (80047b4 <HAL_UART_MspInit+0x43c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d135      	bne.n	800472e <HAL_UART_MspInit+0x3b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	4b39      	ldr	r3, [pc, #228]	; (80047ac <HAL_UART_MspInit+0x434>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	4a38      	ldr	r2, [pc, #224]	; (80047ac <HAL_UART_MspInit+0x434>)
 80046cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d0:	6413      	str	r3, [r2, #64]	; 0x40
 80046d2:	4b36      	ldr	r3, [pc, #216]	; (80047ac <HAL_UART_MspInit+0x434>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	4b32      	ldr	r3, [pc, #200]	; (80047ac <HAL_UART_MspInit+0x434>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	4a31      	ldr	r2, [pc, #196]	; (80047ac <HAL_UART_MspInit+0x434>)
 80046e8:	f043 0308 	orr.w	r3, r3, #8
 80046ec:	6313      	str	r3, [r2, #48]	; 0x30
 80046ee:	4b2f      	ldr	r3, [pc, #188]	; (80047ac <HAL_UART_MspInit+0x434>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80046fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80046fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004700:	2302      	movs	r3, #2
 8004702:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004704:	2300      	movs	r3, #0
 8004706:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004708:	2303      	movs	r3, #3
 800470a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800470c:	2307      	movs	r3, #7
 800470e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004710:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004714:	4619      	mov	r1, r3
 8004716:	4828      	ldr	r0, [pc, #160]	; (80047b8 <HAL_UART_MspInit+0x440>)
 8004718:	f000 fb58 	bl	8004dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800471c:	2200      	movs	r2, #0
 800471e:	2105      	movs	r1, #5
 8004720:	2027      	movs	r0, #39	; 0x27
 8004722:	f000 fa8a 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004726:	2027      	movs	r0, #39	; 0x27
 8004728:	f000 faa3 	bl	8004c72 <HAL_NVIC_EnableIRQ>
}
 800472c:	e038      	b.n	80047a0 <HAL_UART_MspInit+0x428>
  else if(huart->Instance==USART6)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a22      	ldr	r2, [pc, #136]	; (80047bc <HAL_UART_MspInit+0x444>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d133      	bne.n	80047a0 <HAL_UART_MspInit+0x428>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <HAL_UART_MspInit+0x434>)
 800473e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004740:	4a1a      	ldr	r2, [pc, #104]	; (80047ac <HAL_UART_MspInit+0x434>)
 8004742:	f043 0320 	orr.w	r3, r3, #32
 8004746:	6453      	str	r3, [r2, #68]	; 0x44
 8004748:	4b18      	ldr	r3, [pc, #96]	; (80047ac <HAL_UART_MspInit+0x434>)
 800474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004754:	2300      	movs	r3, #0
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	4b14      	ldr	r3, [pc, #80]	; (80047ac <HAL_UART_MspInit+0x434>)
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	4a13      	ldr	r2, [pc, #76]	; (80047ac <HAL_UART_MspInit+0x434>)
 800475e:	f043 0304 	orr.w	r3, r3, #4
 8004762:	6313      	str	r3, [r2, #48]	; 0x30
 8004764:	4b11      	ldr	r3, [pc, #68]	; (80047ac <HAL_UART_MspInit+0x434>)
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004770:	23c0      	movs	r3, #192	; 0xc0
 8004772:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004774:	2302      	movs	r3, #2
 8004776:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	2300      	movs	r3, #0
 800477a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800477c:	2303      	movs	r3, #3
 800477e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004780:	2308      	movs	r3, #8
 8004782:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004784:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004788:	4619      	mov	r1, r3
 800478a:	480d      	ldr	r0, [pc, #52]	; (80047c0 <HAL_UART_MspInit+0x448>)
 800478c:	f000 fb1e 	bl	8004dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004790:	2200      	movs	r2, #0
 8004792:	2100      	movs	r1, #0
 8004794:	2047      	movs	r0, #71	; 0x47
 8004796:	f000 fa50 	bl	8004c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800479a:	2047      	movs	r0, #71	; 0x47
 800479c:	f000 fa69 	bl	8004c72 <HAL_NVIC_EnableIRQ>
}
 80047a0:	bf00      	nop
 80047a2:	3760      	adds	r7, #96	; 0x60
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40004400 	.word	0x40004400
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40020000 	.word	0x40020000
 80047b4:	40004800 	.word	0x40004800
 80047b8:	40020c00 	.word	0x40020c00
 80047bc:	40011400 	.word	0x40011400
 80047c0:	40020800 	.word	0x40020800

080047c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80047c8:	e7fe      	b.n	80047c8 <NMI_Handler+0x4>

080047ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047ca:	b480      	push	{r7}
 80047cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047ce:	e7fe      	b.n	80047ce <HardFault_Handler+0x4>

080047d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047d4:	e7fe      	b.n	80047d4 <MemManage_Handler+0x4>

080047d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047d6:	b480      	push	{r7}
 80047d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047da:	e7fe      	b.n	80047da <BusFault_Handler+0x4>

080047dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047e0:	e7fe      	b.n	80047e0 <UsageFault_Handler+0x4>

080047e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047e2:	b480      	push	{r7}
 80047e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047fe:	b480      	push	{r7}
 8004800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004802:	bf00      	nop
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004810:	f000 f8f4 	bl	80049fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004814:	bf00      	nop
 8004816:	bd80      	pop	{r7, pc}

08004818 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800481c:	4802      	ldr	r0, [pc, #8]	; (8004828 <TIM3_IRQHandler+0x10>)
 800481e:	f002 fa45 	bl	8006cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004822:	bf00      	nop
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	200000d8 	.word	0x200000d8

0800482c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004830:	4802      	ldr	r0, [pc, #8]	; (800483c <SPI1_IRQHandler+0x10>)
 8004832:	f001 fd93 	bl	800635c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000080 	.word	0x20000080

08004840 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004844:	4802      	ldr	r0, [pc, #8]	; (8004850 <USART1_IRQHandler+0x10>)
 8004846:	f002 fe5d 	bl	8007504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000240 	.word	0x20000240

08004854 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004858:	4802      	ldr	r0, [pc, #8]	; (8004864 <USART2_IRQHandler+0x10>)
 800485a:	f002 fe53 	bl	8007504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */


  /* USER CODE END USART2_IRQn 1 */
}
 800485e:	bf00      	nop
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000288 	.word	0x20000288

08004868 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800486c:	4802      	ldr	r0, [pc, #8]	; (8004878 <USART3_IRQHandler+0x10>)
 800486e:	f002 fe49 	bl	8007504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */


  /* USER CODE END USART3_IRQn 1 */
}
 8004872:	bf00      	nop
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	200002d0 	.word	0x200002d0

0800487c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004880:	4802      	ldr	r0, [pc, #8]	; (800488c <UART4_IRQHandler+0x10>)
 8004882:	f002 fe3f 	bl	8007504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */


  /* USER CODE END UART4_IRQn 1 */
}
 8004886:	bf00      	nop
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000120 	.word	0x20000120

08004890 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004894:	4802      	ldr	r0, [pc, #8]	; (80048a0 <UART5_IRQHandler+0x10>)
 8004896:	f002 fe35 	bl	8007504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20000168 	.word	0x20000168

080048a4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80048a8:	4802      	ldr	r0, [pc, #8]	; (80048b4 <USART6_IRQHandler+0x10>)
 80048aa:	f002 fe2b 	bl	8007504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80048ae:	bf00      	nop
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000318 	.word	0x20000318

080048b8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */
  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80048bc:	4802      	ldr	r0, [pc, #8]	; (80048c8 <UART7_IRQHandler+0x10>)
 80048be:	f002 fe21 	bl	8007504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */


  /* USER CODE END UART7_IRQn 1 */
}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	200001b0 	.word	0x200001b0

080048cc <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */
  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80048d0:	4802      	ldr	r0, [pc, #8]	; (80048dc <UART8_IRQHandler+0x10>)
 80048d2:	f002 fe17 	bl	8007504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */


  /* USER CODE END UART8_IRQn 1 */
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	200001f8 	.word	0x200001f8

080048e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <SystemInit+0x20>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ea:	4a05      	ldr	r2, [pc, #20]	; (8004900 <SystemInit+0x20>)
 80048ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	e000ed00 	.word	0xe000ed00

08004904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800493c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004908:	f7ff ffea 	bl	80048e0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800490c:	480c      	ldr	r0, [pc, #48]	; (8004940 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800490e:	490d      	ldr	r1, [pc, #52]	; (8004944 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004910:	4a0d      	ldr	r2, [pc, #52]	; (8004948 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004914:	e002      	b.n	800491c <LoopCopyDataInit>

08004916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800491a:	3304      	adds	r3, #4

0800491c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800491c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800491e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004920:	d3f9      	bcc.n	8004916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004922:	4a0a      	ldr	r2, [pc, #40]	; (800494c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004924:	4c0a      	ldr	r4, [pc, #40]	; (8004950 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004928:	e001      	b.n	800492e <LoopFillZerobss>

0800492a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800492a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800492c:	3204      	adds	r2, #4

0800492e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800492e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004930:	d3fb      	bcc.n	800492a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004932:	f003 fced 	bl	8008310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004936:	f7fc fa01 	bl	8000d3c <main>
  bx  lr    
 800493a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800493c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004944:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8004948:	080083b4 	.word	0x080083b4
  ldr r2, =_sbss
 800494c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8004950:	20001324 	.word	0x20001324

08004954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004954:	e7fe      	b.n	8004954 <ADC_IRQHandler>
	...

08004958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800495c:	4b0e      	ldr	r3, [pc, #56]	; (8004998 <HAL_Init+0x40>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a0d      	ldr	r2, [pc, #52]	; (8004998 <HAL_Init+0x40>)
 8004962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_Init+0x40>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a0a      	ldr	r2, [pc, #40]	; (8004998 <HAL_Init+0x40>)
 800496e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004974:	4b08      	ldr	r3, [pc, #32]	; (8004998 <HAL_Init+0x40>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a07      	ldr	r2, [pc, #28]	; (8004998 <HAL_Init+0x40>)
 800497a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800497e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004980:	2003      	movs	r0, #3
 8004982:	f000 f94f 	bl	8004c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004986:	200f      	movs	r0, #15
 8004988:	f000 f808 	bl	800499c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800498c:	f7ff fc32 	bl	80041f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40023c00 	.word	0x40023c00

0800499c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049a4:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <HAL_InitTick+0x54>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <HAL_InitTick+0x58>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	4619      	mov	r1, r3
 80049ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80049b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f967 	bl	8004c8e <HAL_SYSTICK_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e00e      	b.n	80049e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b0f      	cmp	r3, #15
 80049ce:	d80a      	bhi.n	80049e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049d0:	2200      	movs	r2, #0
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	f04f 30ff 	mov.w	r0, #4294967295
 80049d8:	f000 f92f 	bl	8004c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049dc:	4a06      	ldr	r2, [pc, #24]	; (80049f8 <HAL_InitTick+0x5c>)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e000      	b.n	80049e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20000048 	.word	0x20000048
 80049f4:	20000050 	.word	0x20000050
 80049f8:	2000004c 	.word	0x2000004c

080049fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a00:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <HAL_IncTick+0x20>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <HAL_IncTick+0x24>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	4a04      	ldr	r2, [pc, #16]	; (8004a20 <HAL_IncTick+0x24>)
 8004a0e:	6013      	str	r3, [r2, #0]
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	20000050 	.word	0x20000050
 8004a20:	20001320 	.word	0x20001320

08004a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  return uwTick;
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <HAL_GetTick+0x14>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20001320 	.word	0x20001320

08004a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a44:	f7ff ffee 	bl	8004a24 <HAL_GetTick>
 8004a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a54:	d005      	beq.n	8004a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a56:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <HAL_Delay+0x44>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a62:	bf00      	nop
 8004a64:	f7ff ffde 	bl	8004a24 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d8f7      	bhi.n	8004a64 <HAL_Delay+0x28>
  {
  }
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000050 	.word	0x20000050

08004a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ab6:	4a04      	ldr	r2, [pc, #16]	; (8004ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	60d3      	str	r3, [r2, #12]
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	e000ed00 	.word	0xe000ed00

08004acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ad0:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	0a1b      	lsrs	r3, r3, #8
 8004ad6:	f003 0307 	and.w	r3, r3, #7
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	e000ed00 	.word	0xe000ed00

08004ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	db0b      	blt.n	8004b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	f003 021f 	and.w	r2, r3, #31
 8004b00:	4907      	ldr	r1, [pc, #28]	; (8004b20 <__NVIC_EnableIRQ+0x38>)
 8004b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	2001      	movs	r0, #1
 8004b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	e000e100 	.word	0xe000e100

08004b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	6039      	str	r1, [r7, #0]
 8004b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	db0a      	blt.n	8004b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	490c      	ldr	r1, [pc, #48]	; (8004b70 <__NVIC_SetPriority+0x4c>)
 8004b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b42:	0112      	lsls	r2, r2, #4
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	440b      	add	r3, r1
 8004b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b4c:	e00a      	b.n	8004b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	4908      	ldr	r1, [pc, #32]	; (8004b74 <__NVIC_SetPriority+0x50>)
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	3b04      	subs	r3, #4
 8004b5c:	0112      	lsls	r2, r2, #4
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	440b      	add	r3, r1
 8004b62:	761a      	strb	r2, [r3, #24]
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	e000e100 	.word	0xe000e100
 8004b74:	e000ed00 	.word	0xe000ed00

08004b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b089      	sub	sp, #36	; 0x24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f1c3 0307 	rsb	r3, r3, #7
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	bf28      	it	cs
 8004b96:	2304      	movcs	r3, #4
 8004b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	2b06      	cmp	r3, #6
 8004ba0:	d902      	bls.n	8004ba8 <NVIC_EncodePriority+0x30>
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	3b03      	subs	r3, #3
 8004ba6:	e000      	b.n	8004baa <NVIC_EncodePriority+0x32>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bac:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	43da      	mvns	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	401a      	ands	r2, r3
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bca:	43d9      	mvns	r1, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bd0:	4313      	orrs	r3, r2
         );
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3724      	adds	r7, #36	; 0x24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bf0:	d301      	bcc.n	8004bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e00f      	b.n	8004c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bf6:	4a0a      	ldr	r2, [pc, #40]	; (8004c20 <SysTick_Config+0x40>)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bfe:	210f      	movs	r1, #15
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295
 8004c04:	f7ff ff8e 	bl	8004b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <SysTick_Config+0x40>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c0e:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <SysTick_Config+0x40>)
 8004c10:	2207      	movs	r2, #7
 8004c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	e000e010 	.word	0xe000e010

08004c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7ff ff29 	bl	8004a84 <__NVIC_SetPriorityGrouping>
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b086      	sub	sp, #24
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	4603      	mov	r3, r0
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]
 8004c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c4c:	f7ff ff3e 	bl	8004acc <__NVIC_GetPriorityGrouping>
 8004c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	6978      	ldr	r0, [r7, #20]
 8004c58:	f7ff ff8e 	bl	8004b78 <NVIC_EncodePriority>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c62:	4611      	mov	r1, r2
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff ff5d 	bl	8004b24 <__NVIC_SetPriority>
}
 8004c6a:	bf00      	nop
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	4603      	mov	r3, r0
 8004c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff ff31 	bl	8004ae8 <__NVIC_EnableIRQ>
}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b082      	sub	sp, #8
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff ffa2 	bl	8004be0 <SysTick_Config>
 8004c9c:	4603      	mov	r3, r0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cb4:	f7ff feb6 	bl	8004a24 <HAL_GetTick>
 8004cb8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d008      	beq.n	8004cd8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2280      	movs	r2, #128	; 0x80
 8004cca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e052      	b.n	8004d7e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0216 	bic.w	r2, r2, #22
 8004ce6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695a      	ldr	r2, [r3, #20]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cf6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d103      	bne.n	8004d08 <HAL_DMA_Abort+0x62>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0208 	bic.w	r2, r2, #8
 8004d16:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0201 	bic.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d28:	e013      	b.n	8004d52 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d2a:	f7ff fe7b 	bl	8004a24 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	d90c      	bls.n	8004d52 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2203      	movs	r2, #3
 8004d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e015      	b.n	8004d7e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e4      	bne.n	8004d2a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d64:	223f      	movs	r2, #63	; 0x3f
 8004d66:	409a      	lsls	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d004      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2280      	movs	r2, #128	; 0x80
 8004d9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e00c      	b.n	8004dbe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2205      	movs	r2, #5
 8004da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0201 	bic.w	r2, r2, #1
 8004dba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
	...

08004dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b089      	sub	sp, #36	; 0x24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004de2:	2300      	movs	r3, #0
 8004de4:	61fb      	str	r3, [r7, #28]
 8004de6:	e177      	b.n	80050d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004de8:	2201      	movs	r2, #1
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	f040 8166 	bne.w	80050d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d005      	beq.n	8004e1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d130      	bne.n	8004e80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	2203      	movs	r2, #3
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4013      	ands	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e54:	2201      	movs	r2, #1
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	091b      	lsrs	r3, r3, #4
 8004e6a:	f003 0201 	and.w	r2, r3, #1
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d017      	beq.n	8004ebc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	2203      	movs	r2, #3
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d123      	bne.n	8004f10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	08da      	lsrs	r2, r3, #3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3208      	adds	r2, #8
 8004ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	220f      	movs	r2, #15
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	08da      	lsrs	r2, r3, #3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3208      	adds	r2, #8
 8004f0a:	69b9      	ldr	r1, [r7, #24]
 8004f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	2203      	movs	r2, #3
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	43db      	mvns	r3, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4013      	ands	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 0203 	and.w	r2, r3, #3
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 80c0 	beq.w	80050d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	4b66      	ldr	r3, [pc, #408]	; (80050f0 <HAL_GPIO_Init+0x324>)
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	4a65      	ldr	r2, [pc, #404]	; (80050f0 <HAL_GPIO_Init+0x324>)
 8004f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f60:	6453      	str	r3, [r2, #68]	; 0x44
 8004f62:	4b63      	ldr	r3, [pc, #396]	; (80050f0 <HAL_GPIO_Init+0x324>)
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f6e:	4a61      	ldr	r2, [pc, #388]	; (80050f4 <HAL_GPIO_Init+0x328>)
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	089b      	lsrs	r3, r3, #2
 8004f74:	3302      	adds	r3, #2
 8004f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	220f      	movs	r2, #15
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a58      	ldr	r2, [pc, #352]	; (80050f8 <HAL_GPIO_Init+0x32c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d037      	beq.n	800500a <HAL_GPIO_Init+0x23e>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a57      	ldr	r2, [pc, #348]	; (80050fc <HAL_GPIO_Init+0x330>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d031      	beq.n	8005006 <HAL_GPIO_Init+0x23a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a56      	ldr	r2, [pc, #344]	; (8005100 <HAL_GPIO_Init+0x334>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d02b      	beq.n	8005002 <HAL_GPIO_Init+0x236>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a55      	ldr	r2, [pc, #340]	; (8005104 <HAL_GPIO_Init+0x338>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d025      	beq.n	8004ffe <HAL_GPIO_Init+0x232>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a54      	ldr	r2, [pc, #336]	; (8005108 <HAL_GPIO_Init+0x33c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01f      	beq.n	8004ffa <HAL_GPIO_Init+0x22e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a53      	ldr	r2, [pc, #332]	; (800510c <HAL_GPIO_Init+0x340>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d019      	beq.n	8004ff6 <HAL_GPIO_Init+0x22a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a52      	ldr	r2, [pc, #328]	; (8005110 <HAL_GPIO_Init+0x344>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d013      	beq.n	8004ff2 <HAL_GPIO_Init+0x226>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a51      	ldr	r2, [pc, #324]	; (8005114 <HAL_GPIO_Init+0x348>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00d      	beq.n	8004fee <HAL_GPIO_Init+0x222>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a50      	ldr	r2, [pc, #320]	; (8005118 <HAL_GPIO_Init+0x34c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d007      	beq.n	8004fea <HAL_GPIO_Init+0x21e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a4f      	ldr	r2, [pc, #316]	; (800511c <HAL_GPIO_Init+0x350>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d101      	bne.n	8004fe6 <HAL_GPIO_Init+0x21a>
 8004fe2:	2309      	movs	r3, #9
 8004fe4:	e012      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004fe6:	230a      	movs	r3, #10
 8004fe8:	e010      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004fea:	2308      	movs	r3, #8
 8004fec:	e00e      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004fee:	2307      	movs	r3, #7
 8004ff0:	e00c      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004ff2:	2306      	movs	r3, #6
 8004ff4:	e00a      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004ff6:	2305      	movs	r3, #5
 8004ff8:	e008      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004ffa:	2304      	movs	r3, #4
 8004ffc:	e006      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004ffe:	2303      	movs	r3, #3
 8005000:	e004      	b.n	800500c <HAL_GPIO_Init+0x240>
 8005002:	2302      	movs	r3, #2
 8005004:	e002      	b.n	800500c <HAL_GPIO_Init+0x240>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_GPIO_Init+0x240>
 800500a:	2300      	movs	r3, #0
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	f002 0203 	and.w	r2, r2, #3
 8005012:	0092      	lsls	r2, r2, #2
 8005014:	4093      	lsls	r3, r2
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4313      	orrs	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800501c:	4935      	ldr	r1, [pc, #212]	; (80050f4 <HAL_GPIO_Init+0x328>)
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	089b      	lsrs	r3, r3, #2
 8005022:	3302      	adds	r3, #2
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800502a:	4b3d      	ldr	r3, [pc, #244]	; (8005120 <HAL_GPIO_Init+0x354>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	43db      	mvns	r3, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4013      	ands	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800504e:	4a34      	ldr	r2, [pc, #208]	; (8005120 <HAL_GPIO_Init+0x354>)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005054:	4b32      	ldr	r3, [pc, #200]	; (8005120 <HAL_GPIO_Init+0x354>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005078:	4a29      	ldr	r2, [pc, #164]	; (8005120 <HAL_GPIO_Init+0x354>)
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800507e:	4b28      	ldr	r3, [pc, #160]	; (8005120 <HAL_GPIO_Init+0x354>)
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	43db      	mvns	r3, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4013      	ands	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050a2:	4a1f      	ldr	r2, [pc, #124]	; (8005120 <HAL_GPIO_Init+0x354>)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050a8:	4b1d      	ldr	r3, [pc, #116]	; (8005120 <HAL_GPIO_Init+0x354>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	4013      	ands	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050cc:	4a14      	ldr	r2, [pc, #80]	; (8005120 <HAL_GPIO_Init+0x354>)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	3301      	adds	r3, #1
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b0f      	cmp	r3, #15
 80050dc:	f67f ae84 	bls.w	8004de8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	3724      	adds	r7, #36	; 0x24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40013800 	.word	0x40013800
 80050f8:	40020000 	.word	0x40020000
 80050fc:	40020400 	.word	0x40020400
 8005100:	40020800 	.word	0x40020800
 8005104:	40020c00 	.word	0x40020c00
 8005108:	40021000 	.word	0x40021000
 800510c:	40021400 	.word	0x40021400
 8005110:	40021800 	.word	0x40021800
 8005114:	40021c00 	.word	0x40021c00
 8005118:	40022000 	.word	0x40022000
 800511c:	40022400 	.word	0x40022400
 8005120:	40013c00 	.word	0x40013c00

08005124 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	887b      	ldrh	r3, [r7, #2]
 8005136:	4013      	ands	r3, r2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800513c:	2301      	movs	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
 8005140:	e001      	b.n	8005146 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005142:	2300      	movs	r3, #0
 8005144:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005146:	7bfb      	ldrb	r3, [r7, #15]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	807b      	strh	r3, [r7, #2]
 8005160:	4613      	mov	r3, r2
 8005162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005164:	787b      	ldrb	r3, [r7, #1]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800516a:	887a      	ldrh	r2, [r7, #2]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005170:	e003      	b.n	800517a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005172:	887b      	ldrh	r3, [r7, #2]
 8005174:	041a      	lsls	r2, r3, #16
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	619a      	str	r2, [r3, #24]
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005186:	b480      	push	{r7}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	460b      	mov	r3, r1
 8005190:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005198:	887a      	ldrh	r2, [r7, #2]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4013      	ands	r3, r2
 800519e:	041a      	lsls	r2, r3, #16
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	43d9      	mvns	r1, r3
 80051a4:	887b      	ldrh	r3, [r7, #2]
 80051a6:	400b      	ands	r3, r1
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	619a      	str	r2, [r3, #24]
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80051c6:	2300      	movs	r3, #0
 80051c8:	603b      	str	r3, [r7, #0]
 80051ca:	4b20      	ldr	r3, [pc, #128]	; (800524c <HAL_PWREx_EnableOverDrive+0x90>)
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	4a1f      	ldr	r2, [pc, #124]	; (800524c <HAL_PWREx_EnableOverDrive+0x90>)
 80051d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d4:	6413      	str	r3, [r2, #64]	; 0x40
 80051d6:	4b1d      	ldr	r3, [pc, #116]	; (800524c <HAL_PWREx_EnableOverDrive+0x90>)
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80051e2:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <HAL_PWREx_EnableOverDrive+0x94>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051e8:	f7ff fc1c 	bl	8004a24 <HAL_GetTick>
 80051ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051ee:	e009      	b.n	8005204 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051f0:	f7ff fc18 	bl	8004a24 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051fe:	d901      	bls.n	8005204 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e01f      	b.n	8005244 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005204:	4b13      	ldr	r3, [pc, #76]	; (8005254 <HAL_PWREx_EnableOverDrive+0x98>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800520c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005210:	d1ee      	bne.n	80051f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005212:	4b11      	ldr	r3, [pc, #68]	; (8005258 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005214:	2201      	movs	r2, #1
 8005216:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005218:	f7ff fc04 	bl	8004a24 <HAL_GetTick>
 800521c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800521e:	e009      	b.n	8005234 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005220:	f7ff fc00 	bl	8004a24 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800522e:	d901      	bls.n	8005234 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e007      	b.n	8005244 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005234:	4b07      	ldr	r3, [pc, #28]	; (8005254 <HAL_PWREx_EnableOverDrive+0x98>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005240:	d1ee      	bne.n	8005220 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40023800 	.word	0x40023800
 8005250:	420e0040 	.word	0x420e0040
 8005254:	40007000 	.word	0x40007000
 8005258:	420e0044 	.word	0x420e0044

0800525c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e267      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d075      	beq.n	8005366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800527a:	4b88      	ldr	r3, [pc, #544]	; (800549c <HAL_RCC_OscConfig+0x240>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	2b04      	cmp	r3, #4
 8005284:	d00c      	beq.n	80052a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005286:	4b85      	ldr	r3, [pc, #532]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800528e:	2b08      	cmp	r3, #8
 8005290:	d112      	bne.n	80052b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005292:	4b82      	ldr	r3, [pc, #520]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800529a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800529e:	d10b      	bne.n	80052b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a0:	4b7e      	ldr	r3, [pc, #504]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d05b      	beq.n	8005364 <HAL_RCC_OscConfig+0x108>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d157      	bne.n	8005364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e242      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c0:	d106      	bne.n	80052d0 <HAL_RCC_OscConfig+0x74>
 80052c2:	4b76      	ldr	r3, [pc, #472]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a75      	ldr	r2, [pc, #468]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e01d      	b.n	800530c <HAL_RCC_OscConfig+0xb0>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052d8:	d10c      	bne.n	80052f4 <HAL_RCC_OscConfig+0x98>
 80052da:	4b70      	ldr	r3, [pc, #448]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a6f      	ldr	r2, [pc, #444]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	4b6d      	ldr	r3, [pc, #436]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a6c      	ldr	r2, [pc, #432]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	e00b      	b.n	800530c <HAL_RCC_OscConfig+0xb0>
 80052f4:	4b69      	ldr	r3, [pc, #420]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a68      	ldr	r2, [pc, #416]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80052fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	4b66      	ldr	r3, [pc, #408]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a65      	ldr	r2, [pc, #404]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800530a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d013      	beq.n	800533c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005314:	f7ff fb86 	bl	8004a24 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800531c:	f7ff fb82 	bl	8004a24 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b64      	cmp	r3, #100	; 0x64
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e207      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	4b5b      	ldr	r3, [pc, #364]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0f0      	beq.n	800531c <HAL_RCC_OscConfig+0xc0>
 800533a:	e014      	b.n	8005366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533c:	f7ff fb72 	bl	8004a24 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005344:	f7ff fb6e 	bl	8004a24 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b64      	cmp	r3, #100	; 0x64
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e1f3      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005356:	4b51      	ldr	r3, [pc, #324]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0xe8>
 8005362:	e000      	b.n	8005366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d063      	beq.n	800543a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005372:	4b4a      	ldr	r3, [pc, #296]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 030c 	and.w	r3, r3, #12
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00b      	beq.n	8005396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800537e:	4b47      	ldr	r3, [pc, #284]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005386:	2b08      	cmp	r3, #8
 8005388:	d11c      	bne.n	80053c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800538a:	4b44      	ldr	r3, [pc, #272]	; (800549c <HAL_RCC_OscConfig+0x240>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d116      	bne.n	80053c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005396:	4b41      	ldr	r3, [pc, #260]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_RCC_OscConfig+0x152>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d001      	beq.n	80053ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e1c7      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ae:	4b3b      	ldr	r3, [pc, #236]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4937      	ldr	r1, [pc, #220]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053c2:	e03a      	b.n	800543a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d020      	beq.n	800540e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053cc:	4b34      	ldr	r3, [pc, #208]	; (80054a0 <HAL_RCC_OscConfig+0x244>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d2:	f7ff fb27 	bl	8004a24 <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d8:	e008      	b.n	80053ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053da:	f7ff fb23 	bl	8004a24 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e1a8      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ec:	4b2b      	ldr	r3, [pc, #172]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0f0      	beq.n	80053da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f8:	4b28      	ldr	r3, [pc, #160]	; (800549c <HAL_RCC_OscConfig+0x240>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4925      	ldr	r1, [pc, #148]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005408:	4313      	orrs	r3, r2
 800540a:	600b      	str	r3, [r1, #0]
 800540c:	e015      	b.n	800543a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800540e:	4b24      	ldr	r3, [pc, #144]	; (80054a0 <HAL_RCC_OscConfig+0x244>)
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005414:	f7ff fb06 	bl	8004a24 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800541c:	f7ff fb02 	bl	8004a24 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e187      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542e:	4b1b      	ldr	r3, [pc, #108]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f0      	bne.n	800541c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d036      	beq.n	80054b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d016      	beq.n	800547c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800544e:	4b15      	ldr	r3, [pc, #84]	; (80054a4 <HAL_RCC_OscConfig+0x248>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005454:	f7ff fae6 	bl	8004a24 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800545c:	f7ff fae2 	bl	8004a24 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e167      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546e:	4b0b      	ldr	r3, [pc, #44]	; (800549c <HAL_RCC_OscConfig+0x240>)
 8005470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0f0      	beq.n	800545c <HAL_RCC_OscConfig+0x200>
 800547a:	e01b      	b.n	80054b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800547c:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <HAL_RCC_OscConfig+0x248>)
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005482:	f7ff facf 	bl	8004a24 <HAL_GetTick>
 8005486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005488:	e00e      	b.n	80054a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800548a:	f7ff facb 	bl	8004a24 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d907      	bls.n	80054a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e150      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
 800549c:	40023800 	.word	0x40023800
 80054a0:	42470000 	.word	0x42470000
 80054a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a8:	4b88      	ldr	r3, [pc, #544]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80054aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1ea      	bne.n	800548a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8097 	beq.w	80055f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054c2:	2300      	movs	r3, #0
 80054c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054c6:	4b81      	ldr	r3, [pc, #516]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10f      	bne.n	80054f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	4b7d      	ldr	r3, [pc, #500]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	4a7c      	ldr	r2, [pc, #496]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80054dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e0:	6413      	str	r3, [r2, #64]	; 0x40
 80054e2:	4b7a      	ldr	r3, [pc, #488]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ee:	2301      	movs	r3, #1
 80054f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f2:	4b77      	ldr	r3, [pc, #476]	; (80056d0 <HAL_RCC_OscConfig+0x474>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d118      	bne.n	8005530 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054fe:	4b74      	ldr	r3, [pc, #464]	; (80056d0 <HAL_RCC_OscConfig+0x474>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a73      	ldr	r2, [pc, #460]	; (80056d0 <HAL_RCC_OscConfig+0x474>)
 8005504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800550a:	f7ff fa8b 	bl	8004a24 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005512:	f7ff fa87 	bl	8004a24 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e10c      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	4b6a      	ldr	r3, [pc, #424]	; (80056d0 <HAL_RCC_OscConfig+0x474>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f0      	beq.n	8005512 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d106      	bne.n	8005546 <HAL_RCC_OscConfig+0x2ea>
 8005538:	4b64      	ldr	r3, [pc, #400]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 800553a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553c:	4a63      	ldr	r2, [pc, #396]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 800553e:	f043 0301 	orr.w	r3, r3, #1
 8005542:	6713      	str	r3, [r2, #112]	; 0x70
 8005544:	e01c      	b.n	8005580 <HAL_RCC_OscConfig+0x324>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b05      	cmp	r3, #5
 800554c:	d10c      	bne.n	8005568 <HAL_RCC_OscConfig+0x30c>
 800554e:	4b5f      	ldr	r3, [pc, #380]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	4a5e      	ldr	r2, [pc, #376]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 8005554:	f043 0304 	orr.w	r3, r3, #4
 8005558:	6713      	str	r3, [r2, #112]	; 0x70
 800555a:	4b5c      	ldr	r3, [pc, #368]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555e:	4a5b      	ldr	r2, [pc, #364]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	6713      	str	r3, [r2, #112]	; 0x70
 8005566:	e00b      	b.n	8005580 <HAL_RCC_OscConfig+0x324>
 8005568:	4b58      	ldr	r3, [pc, #352]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 800556a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556c:	4a57      	ldr	r2, [pc, #348]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	6713      	str	r3, [r2, #112]	; 0x70
 8005574:	4b55      	ldr	r3, [pc, #340]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	4a54      	ldr	r2, [pc, #336]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 800557a:	f023 0304 	bic.w	r3, r3, #4
 800557e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d015      	beq.n	80055b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005588:	f7ff fa4c 	bl	8004a24 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558e:	e00a      	b.n	80055a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005590:	f7ff fa48 	bl	8004a24 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	; 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e0cb      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a6:	4b49      	ldr	r3, [pc, #292]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0ee      	beq.n	8005590 <HAL_RCC_OscConfig+0x334>
 80055b2:	e014      	b.n	80055de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055b4:	f7ff fa36 	bl	8004a24 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055bc:	f7ff fa32 	bl	8004a24 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e0b5      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055d2:	4b3e      	ldr	r3, [pc, #248]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1ee      	bne.n	80055bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d105      	bne.n	80055f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e4:	4b39      	ldr	r3, [pc, #228]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	4a38      	ldr	r2, [pc, #224]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80055ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80a1 	beq.w	800573c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055fa:	4b34      	ldr	r3, [pc, #208]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	2b08      	cmp	r3, #8
 8005604:	d05c      	beq.n	80056c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d141      	bne.n	8005692 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560e:	4b31      	ldr	r3, [pc, #196]	; (80056d4 <HAL_RCC_OscConfig+0x478>)
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005614:	f7ff fa06 	bl	8004a24 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800561c:	f7ff fa02 	bl	8004a24 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e087      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562e:	4b27      	ldr	r3, [pc, #156]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f0      	bne.n	800561c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	019b      	lsls	r3, r3, #6
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005650:	085b      	lsrs	r3, r3, #1
 8005652:	3b01      	subs	r3, #1
 8005654:	041b      	lsls	r3, r3, #16
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	061b      	lsls	r3, r3, #24
 800565e:	491b      	ldr	r1, [pc, #108]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 8005660:	4313      	orrs	r3, r2
 8005662:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005664:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <HAL_RCC_OscConfig+0x478>)
 8005666:	2201      	movs	r2, #1
 8005668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566a:	f7ff f9db 	bl	8004a24 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005672:	f7ff f9d7 	bl	8004a24 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e05c      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005684:	4b11      	ldr	r3, [pc, #68]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x416>
 8005690:	e054      	b.n	800573c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005692:	4b10      	ldr	r3, [pc, #64]	; (80056d4 <HAL_RCC_OscConfig+0x478>)
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005698:	f7ff f9c4 	bl	8004a24 <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a0:	f7ff f9c0 	bl	8004a24 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e045      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <HAL_RCC_OscConfig+0x470>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0x444>
 80056be:	e03d      	b.n	800573c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d107      	bne.n	80056d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e038      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
 80056cc:	40023800 	.word	0x40023800
 80056d0:	40007000 	.word	0x40007000
 80056d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056d8:	4b1b      	ldr	r3, [pc, #108]	; (8005748 <HAL_RCC_OscConfig+0x4ec>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d028      	beq.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d121      	bne.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fe:	429a      	cmp	r2, r3
 8005700:	d11a      	bne.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005708:	4013      	ands	r3, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800570e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005710:	4293      	cmp	r3, r2
 8005712:	d111      	bne.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	3b01      	subs	r3, #1
 8005722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005724:	429a      	cmp	r2, r3
 8005726:	d107      	bne.n	8005738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005734:	429a      	cmp	r2, r3
 8005736:	d001      	beq.n	800573c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e000      	b.n	800573e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	40023800 	.word	0x40023800

0800574c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0cc      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005760:	4b68      	ldr	r3, [pc, #416]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d90c      	bls.n	8005788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b65      	ldr	r3, [pc, #404]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005776:	4b63      	ldr	r3, [pc, #396]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d001      	beq.n	8005788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e0b8      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d020      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a0:	4b59      	ldr	r3, [pc, #356]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	4a58      	ldr	r2, [pc, #352]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057b8:	4b53      	ldr	r3, [pc, #332]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	4a52      	ldr	r2, [pc, #328]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057c4:	4b50      	ldr	r3, [pc, #320]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	494d      	ldr	r1, [pc, #308]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d044      	beq.n	800586c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d107      	bne.n	80057fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ea:	4b47      	ldr	r3, [pc, #284]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d119      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e07f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d003      	beq.n	800580a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005806:	2b03      	cmp	r3, #3
 8005808:	d107      	bne.n	800581a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800580a:	4b3f      	ldr	r3, [pc, #252]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d109      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e06f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800581a:	4b3b      	ldr	r3, [pc, #236]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e067      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800582a:	4b37      	ldr	r3, [pc, #220]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f023 0203 	bic.w	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4934      	ldr	r1, [pc, #208]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 8005838:	4313      	orrs	r3, r2
 800583a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800583c:	f7ff f8f2 	bl	8004a24 <HAL_GetTick>
 8005840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005842:	e00a      	b.n	800585a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005844:	f7ff f8ee 	bl	8004a24 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e04f      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800585a:	4b2b      	ldr	r3, [pc, #172]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 020c 	and.w	r2, r3, #12
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	429a      	cmp	r2, r3
 800586a:	d1eb      	bne.n	8005844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800586c:	4b25      	ldr	r3, [pc, #148]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d20c      	bcs.n	8005894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b22      	ldr	r3, [pc, #136]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005882:	4b20      	ldr	r3, [pc, #128]	; (8005904 <HAL_RCC_ClockConfig+0x1b8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d001      	beq.n	8005894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e032      	b.n	80058fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058a0:	4b19      	ldr	r3, [pc, #100]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4916      	ldr	r1, [pc, #88]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058be:	4b12      	ldr	r3, [pc, #72]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	490e      	ldr	r1, [pc, #56]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058d2:	f000 f821 	bl	8005918 <HAL_RCC_GetSysClockFreq>
 80058d6:	4602      	mov	r2, r0
 80058d8:	4b0b      	ldr	r3, [pc, #44]	; (8005908 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	490a      	ldr	r1, [pc, #40]	; (800590c <HAL_RCC_ClockConfig+0x1c0>)
 80058e4:	5ccb      	ldrb	r3, [r1, r3]
 80058e6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ea:	4a09      	ldr	r2, [pc, #36]	; (8005910 <HAL_RCC_ClockConfig+0x1c4>)
 80058ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <HAL_RCC_ClockConfig+0x1c8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff f852 	bl	800499c <HAL_InitTick>

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	40023c00 	.word	0x40023c00
 8005908:	40023800 	.word	0x40023800
 800590c:	0800838c 	.word	0x0800838c
 8005910:	20000048 	.word	0x20000048
 8005914:	2000004c 	.word	0x2000004c

08005918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800591c:	b094      	sub	sp, #80	; 0x50
 800591e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	647b      	str	r3, [r7, #68]	; 0x44
 8005924:	2300      	movs	r3, #0
 8005926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005928:	2300      	movs	r3, #0
 800592a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005930:	4b79      	ldr	r3, [pc, #484]	; (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 030c 	and.w	r3, r3, #12
 8005938:	2b08      	cmp	r3, #8
 800593a:	d00d      	beq.n	8005958 <HAL_RCC_GetSysClockFreq+0x40>
 800593c:	2b08      	cmp	r3, #8
 800593e:	f200 80e1 	bhi.w	8005b04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_RCC_GetSysClockFreq+0x34>
 8005946:	2b04      	cmp	r3, #4
 8005948:	d003      	beq.n	8005952 <HAL_RCC_GetSysClockFreq+0x3a>
 800594a:	e0db      	b.n	8005b04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800594c:	4b73      	ldr	r3, [pc, #460]	; (8005b1c <HAL_RCC_GetSysClockFreq+0x204>)
 800594e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005950:	e0db      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005952:	4b73      	ldr	r3, [pc, #460]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x208>)
 8005954:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005956:	e0d8      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005958:	4b6f      	ldr	r3, [pc, #444]	; (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005960:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005962:	4b6d      	ldr	r3, [pc, #436]	; (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d063      	beq.n	8005a36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800596e:	4b6a      	ldr	r3, [pc, #424]	; (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	099b      	lsrs	r3, r3, #6
 8005974:	2200      	movs	r2, #0
 8005976:	63bb      	str	r3, [r7, #56]	; 0x38
 8005978:	63fa      	str	r2, [r7, #60]	; 0x3c
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005980:	633b      	str	r3, [r7, #48]	; 0x30
 8005982:	2300      	movs	r3, #0
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
 8005986:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800598a:	4622      	mov	r2, r4
 800598c:	462b      	mov	r3, r5
 800598e:	f04f 0000 	mov.w	r0, #0
 8005992:	f04f 0100 	mov.w	r1, #0
 8005996:	0159      	lsls	r1, r3, #5
 8005998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800599c:	0150      	lsls	r0, r2, #5
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4621      	mov	r1, r4
 80059a4:	1a51      	subs	r1, r2, r1
 80059a6:	6139      	str	r1, [r7, #16]
 80059a8:	4629      	mov	r1, r5
 80059aa:	eb63 0301 	sbc.w	r3, r3, r1
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059bc:	4659      	mov	r1, fp
 80059be:	018b      	lsls	r3, r1, #6
 80059c0:	4651      	mov	r1, sl
 80059c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059c6:	4651      	mov	r1, sl
 80059c8:	018a      	lsls	r2, r1, #6
 80059ca:	4651      	mov	r1, sl
 80059cc:	ebb2 0801 	subs.w	r8, r2, r1
 80059d0:	4659      	mov	r1, fp
 80059d2:	eb63 0901 	sbc.w	r9, r3, r1
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	f04f 0300 	mov.w	r3, #0
 80059de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059ea:	4690      	mov	r8, r2
 80059ec:	4699      	mov	r9, r3
 80059ee:	4623      	mov	r3, r4
 80059f0:	eb18 0303 	adds.w	r3, r8, r3
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	462b      	mov	r3, r5
 80059f8:	eb49 0303 	adc.w	r3, r9, r3
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	024b      	lsls	r3, r1, #9
 8005a0e:	4621      	mov	r1, r4
 8005a10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a14:	4621      	mov	r1, r4
 8005a16:	024a      	lsls	r2, r1, #9
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a1e:	2200      	movs	r2, #0
 8005a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a28:	f7fa ffce 	bl	80009c8 <__aeabi_uldivmod>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	4613      	mov	r3, r2
 8005a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a34:	e058      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a36:	4b38      	ldr	r3, [pc, #224]	; (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	099b      	lsrs	r3, r3, #6
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	4618      	mov	r0, r3
 8005a40:	4611      	mov	r1, r2
 8005a42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a46:	623b      	str	r3, [r7, #32]
 8005a48:	2300      	movs	r3, #0
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a50:	4642      	mov	r2, r8
 8005a52:	464b      	mov	r3, r9
 8005a54:	f04f 0000 	mov.w	r0, #0
 8005a58:	f04f 0100 	mov.w	r1, #0
 8005a5c:	0159      	lsls	r1, r3, #5
 8005a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a62:	0150      	lsls	r0, r2, #5
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4641      	mov	r1, r8
 8005a6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a6e:	4649      	mov	r1, r9
 8005a70:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a88:	ebb2 040a 	subs.w	r4, r2, sl
 8005a8c:	eb63 050b 	sbc.w	r5, r3, fp
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	00eb      	lsls	r3, r5, #3
 8005a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a9e:	00e2      	lsls	r2, r4, #3
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	461d      	mov	r5, r3
 8005aa4:	4643      	mov	r3, r8
 8005aa6:	18e3      	adds	r3, r4, r3
 8005aa8:	603b      	str	r3, [r7, #0]
 8005aaa:	464b      	mov	r3, r9
 8005aac:	eb45 0303 	adc.w	r3, r5, r3
 8005ab0:	607b      	str	r3, [r7, #4]
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	f04f 0300 	mov.w	r3, #0
 8005aba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005abe:	4629      	mov	r1, r5
 8005ac0:	028b      	lsls	r3, r1, #10
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ac8:	4621      	mov	r1, r4
 8005aca:	028a      	lsls	r2, r1, #10
 8005acc:	4610      	mov	r0, r2
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	61fa      	str	r2, [r7, #28]
 8005ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005adc:	f7fa ff74 	bl	80009c8 <__aeabi_uldivmod>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	0c1b      	lsrs	r3, r3, #16
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	3301      	adds	r3, #1
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005af8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b02:	e002      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3750      	adds	r7, #80	; 0x50
 8005b10:	46bd      	mov	sp, r7
 8005b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b16:	bf00      	nop
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	00f42400 	.word	0x00f42400
 8005b20:	007a1200 	.word	0x007a1200

08005b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b28:	4b03      	ldr	r3, [pc, #12]	; (8005b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	20000048 	.word	0x20000048

08005b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b40:	f7ff fff0 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8005b44:	4602      	mov	r2, r0
 8005b46:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	0a9b      	lsrs	r3, r3, #10
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	4903      	ldr	r1, [pc, #12]	; (8005b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b52:	5ccb      	ldrb	r3, [r1, r3]
 8005b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	0800839c 	.word	0x0800839c

08005b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b68:	f7ff ffdc 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	0b5b      	lsrs	r3, r3, #13
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	4903      	ldr	r1, [pc, #12]	; (8005b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b7a:	5ccb      	ldrb	r3, [r1, r3]
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40023800 	.word	0x40023800
 8005b88:	0800839c 	.word	0x0800839c

08005b8c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e01c      	b.n	8005bd8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	795b      	ldrb	r3, [r3, #5]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d105      	bne.n	8005bb4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fe fb48 	bl	8004244 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0204 	orr.w	r2, r2, #4
 8005bc8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	791b      	ldrb	r3, [r3, #4]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_RNG_GenerateRandomNumber+0x1a>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e044      	b.n	8005c84 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	795b      	ldrb	r3, [r3, #5]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d133      	bne.n	8005c72 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c10:	f7fe ff08 	bl	8004a24 <HAL_GetTick>
 8005c14:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005c16:	e018      	b.n	8005c4a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005c18:	f7fe ff04 	bl	8004a24 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d911      	bls.n	8005c4a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d00a      	beq.n	8005c4a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e01c      	b.n	8005c84 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d1df      	bne.n	8005c18 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	715a      	strb	r2, [r3, #5]
 8005c70:	e004      	b.n	8005c7c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2204      	movs	r2, #4
 8005c76:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	711a      	strb	r2, [r3, #4]

  return status;
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	330c      	adds	r3, #12
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7ff ffa0 	bl	8005be0 <HAL_RNG_GenerateRandomNumber>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d102      	bne.n	8005cac <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	e000      	b.n	8005cae <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005cac:	2300      	movs	r3, #0
  }
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e07b      	b.n	8005dc0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d108      	bne.n	8005ce2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cd8:	d009      	beq.n	8005cee <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	61da      	str	r2, [r3, #28]
 8005ce0:	e005      	b.n	8005cee <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d106      	bne.n	8005d0e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7fe fabd 	bl	8004288 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2202      	movs	r2, #2
 8005d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d24:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d72:	ea42 0103 	orr.w	r1, r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	0c1b      	lsrs	r3, r3, #16
 8005d8c:	f003 0104 	and.w	r1, r3, #4
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	f003 0210 	and.w	r2, r3, #16
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69da      	ldr	r2, [r3, #28]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08c      	sub	sp, #48	; 0x30
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_SPI_TransmitReceive+0x26>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e198      	b.n	8006120 <HAL_SPI_TransmitReceive+0x358>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005df6:	f7fe fe15 	bl	8004a24 <HAL_GetTick>
 8005dfa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e0c:	887b      	ldrh	r3, [r7, #2]
 8005e0e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d00f      	beq.n	8005e38 <HAL_SPI_TransmitReceive+0x70>
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e1e:	d107      	bne.n	8005e30 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d103      	bne.n	8005e30 <HAL_SPI_TransmitReceive+0x68>
 8005e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d003      	beq.n	8005e38 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e30:	2302      	movs	r3, #2
 8005e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e36:	e16d      	b.n	8006114 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d005      	beq.n	8005e4a <HAL_SPI_TransmitReceive+0x82>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <HAL_SPI_TransmitReceive+0x82>
 8005e44:	887b      	ldrh	r3, [r7, #2]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d103      	bne.n	8005e52 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e50:	e160      	b.n	8006114 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d003      	beq.n	8005e66 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2205      	movs	r2, #5
 8005e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	887a      	ldrh	r2, [r7, #2]
 8005e76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	887a      	ldrh	r2, [r7, #2]
 8005e7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	887a      	ldrh	r2, [r7, #2]
 8005e88:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	887a      	ldrh	r2, [r7, #2]
 8005e8e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea6:	2b40      	cmp	r3, #64	; 0x40
 8005ea8:	d007      	beq.n	8005eba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec2:	d17c      	bne.n	8005fbe <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <HAL_SPI_TransmitReceive+0x10a>
 8005ecc:	8b7b      	ldrh	r3, [r7, #26]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d16a      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed6:	881a      	ldrh	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee2:	1c9a      	adds	r2, r3, #2
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ef6:	e057      	b.n	8005fa8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d11b      	bne.n	8005f3e <HAL_SPI_TransmitReceive+0x176>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d016      	beq.n	8005f3e <HAL_SPI_TransmitReceive+0x176>
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d113      	bne.n	8005f3e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	881a      	ldrh	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f26:	1c9a      	adds	r2, r3, #2
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d119      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0x1b8>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d014      	beq.n	8005f80 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	b292      	uxth	r2, r2
 8005f62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	1c9a      	adds	r2, r3, #2
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f80:	f7fe fd50 	bl	8004a24 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d80b      	bhi.n	8005fa8 <HAL_SPI_TransmitReceive+0x1e0>
 8005f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f96:	d007      	beq.n	8005fa8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005fa6:	e0b5      	b.n	8006114 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1a2      	bne.n	8005ef8 <HAL_SPI_TransmitReceive+0x130>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d19d      	bne.n	8005ef8 <HAL_SPI_TransmitReceive+0x130>
 8005fbc:	e080      	b.n	80060c0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <HAL_SPI_TransmitReceive+0x204>
 8005fc6:	8b7b      	ldrh	r3, [r7, #26]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d16f      	bne.n	80060ac <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	330c      	adds	r3, #12
 8005fd6:	7812      	ldrb	r2, [r2, #0]
 8005fd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ff2:	e05b      	b.n	80060ac <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d11c      	bne.n	800603c <HAL_SPI_TransmitReceive+0x274>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006006:	b29b      	uxth	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d017      	beq.n	800603c <HAL_SPI_TransmitReceive+0x274>
 800600c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600e:	2b01      	cmp	r3, #1
 8006010:	d114      	bne.n	800603c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	330c      	adds	r3, #12
 800601c:	7812      	ldrb	r2, [r2, #0]
 800601e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b01      	cmp	r3, #1
 8006048:	d119      	bne.n	800607e <HAL_SPI_TransmitReceive+0x2b6>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800604e:	b29b      	uxth	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d014      	beq.n	800607e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800607a:	2301      	movs	r3, #1
 800607c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800607e:	f7fe fcd1 	bl	8004a24 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800608a:	429a      	cmp	r2, r3
 800608c:	d803      	bhi.n	8006096 <HAL_SPI_TransmitReceive+0x2ce>
 800608e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006094:	d102      	bne.n	800609c <HAL_SPI_TransmitReceive+0x2d4>
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	2b00      	cmp	r3, #0
 800609a:	d107      	bne.n	80060ac <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80060aa:	e033      	b.n	8006114 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d19e      	bne.n	8005ff4 <HAL_SPI_TransmitReceive+0x22c>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d199      	bne.n	8005ff4 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 fc07 	bl	80068d8 <SPI_EndRxTxTransaction>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d006      	beq.n	80060de <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2220      	movs	r2, #32
 80060da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80060dc:	e01a      	b.n	8006114 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10a      	bne.n	80060fc <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	617b      	str	r3, [r7, #20]
 80060fa:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800610a:	e003      	b.n	8006114 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800611c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006120:	4618      	mov	r0, r3
 8006122:	3730      	adds	r7, #48	; 0x30
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	4613      	mov	r3, r2
 8006134:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <HAL_SPI_Transmit_IT+0x1e>
 8006140:	88fb      	ldrh	r3, [r7, #6]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d102      	bne.n	800614c <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	75fb      	strb	r3, [r7, #23]
    goto error;
 800614a:	e06a      	b.n	8006222 <HAL_SPI_Transmit_IT+0xfa>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	d002      	beq.n	800615e <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 8006158:	2302      	movs	r3, #2
 800615a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800615c:	e061      	b.n	8006222 <HAL_SPI_Transmit_IT+0xfa>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_SPI_Transmit_IT+0x44>
 8006168:	2302      	movs	r3, #2
 800616a:	e05b      	b.n	8006224 <HAL_SPI_Transmit_IT+0xfc>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2203      	movs	r2, #3
 8006178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	88fa      	ldrh	r2, [r7, #6]
 800618c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	88fa      	ldrh	r2, [r7, #6]
 8006192:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4a1e      	ldr	r2, [pc, #120]	; (8006230 <HAL_SPI_Transmit_IT+0x108>)
 80061b8:	645a      	str	r2, [r3, #68]	; 0x44
 80061ba:	e002      	b.n	80061c2 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4a1d      	ldr	r2, [pc, #116]	; (8006234 <HAL_SPI_Transmit_IT+0x10c>)
 80061c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ca:	d10f      	bne.n	80061ec <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f6:	2b40      	cmp	r3, #64	; 0x40
 80061f8:	d007      	beq.n	800620a <HAL_SPI_Transmit_IT+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006208:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8006220:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006222:	7dfb      	ldrb	r3, [r7, #23]
}
 8006224:	4618      	mov	r0, r3
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	08006785 	.word	0x08006785
 8006234:	0800673f 	.word	0x0800673f

08006238 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006250:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006258:	7dbb      	ldrb	r3, [r7, #22]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d00d      	beq.n	800627a <HAL_SPI_TransmitReceive_IT+0x42>
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006264:	d106      	bne.n	8006274 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <HAL_SPI_TransmitReceive_IT+0x3c>
 800626e:	7dbb      	ldrb	r3, [r7, #22]
 8006270:	2b04      	cmp	r3, #4
 8006272:	d002      	beq.n	800627a <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8006274:	2302      	movs	r3, #2
 8006276:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006278:	e061      	b.n	800633e <HAL_SPI_TransmitReceive_IT+0x106>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <HAL_SPI_TransmitReceive_IT+0x54>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <HAL_SPI_TransmitReceive_IT+0x54>
 8006286:	887b      	ldrh	r3, [r7, #2]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d102      	bne.n	8006292 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006290:	e055      	b.n	800633e <HAL_SPI_TransmitReceive_IT+0x106>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <HAL_SPI_TransmitReceive_IT+0x68>
 800629c:	2302      	movs	r3, #2
 800629e:	e04f      	b.n	8006340 <HAL_SPI_TransmitReceive_IT+0x108>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	d003      	beq.n	80062bc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2205      	movs	r2, #5
 80062b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	887a      	ldrh	r2, [r7, #2]
 80062cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	887a      	ldrh	r2, [r7, #2]
 80062d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	887a      	ldrh	r2, [r7, #2]
 80062de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	887a      	ldrh	r2, [r7, #2]
 80062e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d006      	beq.n	80062fc <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4a16      	ldr	r2, [pc, #88]	; (800634c <HAL_SPI_TransmitReceive_IT+0x114>)
 80062f2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4a16      	ldr	r2, [pc, #88]	; (8006350 <HAL_SPI_TransmitReceive_IT+0x118>)
 80062f8:	645a      	str	r2, [r3, #68]	; 0x44
 80062fa:	e005      	b.n	8006308 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4a15      	ldr	r2, [pc, #84]	; (8006354 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8006300:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4a14      	ldr	r2, [pc, #80]	; (8006358 <HAL_SPI_TransmitReceive_IT+0x120>)
 8006306:	645a      	str	r2, [r3, #68]	; 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006312:	2b40      	cmp	r3, #64	; 0x40
 8006314:	d007      	beq.n	8006326 <HAL_SPI_TransmitReceive_IT+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006324:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800633c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800633e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006340:	4618      	mov	r0, r3
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	08006681 	.word	0x08006681
 8006350:	080066e1 	.word	0x080066e1
 8006354:	080065bd 	.word	0x080065bd
 8006358:	08006621 	.word	0x08006621

0800635c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10e      	bne.n	800639c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006384:	2b00      	cmp	r3, #0
 8006386:	d009      	beq.n	800639c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d004      	beq.n	800639c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	4798      	blx	r3
    return;
 800639a:	e0ce      	b.n	800653a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <HAL_SPI_IRQHandler+0x5e>
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	4798      	blx	r3
    return;
 80063b8:	e0bf      	b.n	800653a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	f003 0320 	and.w	r3, r3, #32
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <HAL_SPI_IRQHandler+0x7e>
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d105      	bne.n	80063da <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 80b0 	beq.w	800653a <HAL_SPI_IRQHandler+0x1de>
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80aa 	beq.w	800653a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d023      	beq.n	8006438 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	d011      	beq.n	8006420 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006400:	f043 0204 	orr.w	r2, r3, #4
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006408:	2300      	movs	r3, #0
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	617b      	str	r3, [r7, #20]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	e00b      	b.n	8006438 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006420:	2300      	movs	r3, #0
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	693b      	ldr	r3, [r7, #16]
        return;
 8006436:	e080      	b.n	800653a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b00      	cmp	r3, #0
 8006440:	d014      	beq.n	800646c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006446:	f043 0201 	orr.w	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00c      	beq.n	8006490 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647a:	f043 0208 	orr.w	r2, r3, #8
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006482:	2300      	movs	r3, #0
 8006484:	60bb      	str	r3, [r7, #8]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	60bb      	str	r3, [r7, #8]
 800648e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006494:	2b00      	cmp	r3, #0
 8006496:	d04f      	beq.n	8006538 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064a6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d104      	bne.n	80064c4 <HAL_SPI_IRQHandler+0x168>
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d034      	beq.n	800652e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0203 	bic.w	r2, r2, #3
 80064d2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d011      	beq.n	8006500 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e0:	4a17      	ldr	r2, [pc, #92]	; (8006540 <HAL_SPI_IRQHandler+0x1e4>)
 80064e2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe fc4c 	bl	8004d86 <HAL_DMA_Abort_IT>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006504:	2b00      	cmp	r3, #0
 8006506:	d016      	beq.n	8006536 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800650c:	4a0c      	ldr	r2, [pc, #48]	; (8006540 <HAL_SPI_IRQHandler+0x1e4>)
 800650e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006514:	4618      	mov	r0, r3
 8006516:	f7fe fc36 	bl	8004d86 <HAL_DMA_Abort_IT>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00a      	beq.n	8006536 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006524:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800652c:	e003      	b.n	8006536 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f826 	bl	8006580 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006534:	e000      	b.n	8006538 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006536:	bf00      	nop
    return;
 8006538:	bf00      	nop
  }
}
 800653a:	3720      	adds	r7, #32
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	08006595 	.word	0x08006595

08006544 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f7ff ffe6 	bl	8006580 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80065b4:	bf00      	nop
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f103 020c 	add.w	r2, r3, #12
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	7812      	ldrb	r2, [r2, #0]
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10f      	bne.n	8006618 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006606:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d102      	bne.n	8006618 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f9b4 	bl	8006980 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006618:	bf00      	nop
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	330c      	adds	r3, #12
 8006632:	7812      	ldrb	r2, [r2, #0]
 8006634:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006644:	b29b      	uxth	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006652:	b29b      	uxth	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10f      	bne.n	8006678 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006666:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d102      	bne.n	8006678 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f984 	bl	8006980 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006678:	bf00      	nop
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	b292      	uxth	r2, r2
 8006694:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	1c9a      	adds	r2, r3, #2
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3b01      	subs	r3, #1
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10f      	bne.n	80066d8 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d102      	bne.n	80066d8 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f954 	bl	8006980 <SPI_CloseRxTx_ISR>
    }
  }
}
 80066d8:	bf00      	nop
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	881a      	ldrh	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	1c9a      	adds	r2, r3, #2
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10f      	bne.n	8006736 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006724:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672a:	b29b      	uxth	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d102      	bne.n	8006736 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f925 	bl	8006980 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006736:	bf00      	nop
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b082      	sub	sp, #8
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	330c      	adds	r3, #12
 8006750:	7812      	ldrb	r2, [r2, #0]
 8006752:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006762:	b29b      	uxth	r3, r3
 8006764:	3b01      	subs	r3, #1
 8006766:	b29a      	uxth	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f976 	bl	8006a68 <SPI_CloseTx_ISR>
  }
}
 800677c:	bf00      	nop
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006790:	881a      	ldrh	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	1c9a      	adds	r2, r3, #2
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d102      	bne.n	80067c0 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f954 	bl	8006a68 <SPI_CloseTx_ISR>
  }
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b088      	sub	sp, #32
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	4613      	mov	r3, r2
 80067d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067d8:	f7fe f924 	bl	8004a24 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	1a9b      	subs	r3, r3, r2
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	4413      	add	r3, r2
 80067e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067e8:	f7fe f91c 	bl	8004a24 <HAL_GetTick>
 80067ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067ee:	4b39      	ldr	r3, [pc, #228]	; (80068d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	015b      	lsls	r3, r3, #5
 80067f4:	0d1b      	lsrs	r3, r3, #20
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	fb02 f303 	mul.w	r3, r2, r3
 80067fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067fe:	e054      	b.n	80068aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006806:	d050      	beq.n	80068aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006808:	f7fe f90c 	bl	8004a24 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	69fa      	ldr	r2, [r7, #28]
 8006814:	429a      	cmp	r2, r3
 8006816:	d902      	bls.n	800681e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d13d      	bne.n	800689a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800682c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006836:	d111      	bne.n	800685c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006840:	d004      	beq.n	800684c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800684a:	d107      	bne.n	800685c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800685a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006864:	d10f      	bne.n	8006886 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006884:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e017      	b.n	80068ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	4013      	ands	r3, r2
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	bf0c      	ite	eq
 80068ba:	2301      	moveq	r3, #1
 80068bc:	2300      	movne	r3, #0
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	461a      	mov	r2, r3
 80068c2:	79fb      	ldrb	r3, [r7, #7]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d19b      	bne.n	8006800 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3720      	adds	r7, #32
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000048 	.word	0x20000048

080068d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af02      	add	r7, sp, #8
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2201      	movs	r2, #1
 80068ec:	2102      	movs	r1, #2
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f7ff ff6a 	bl	80067c8 <SPI_WaitFlagStateUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d007      	beq.n	800690a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068fe:	f043 0220 	orr.w	r2, r3, #32
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e032      	b.n	8006970 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800690a:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <SPI_EndRxTxTransaction+0xa0>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1b      	ldr	r2, [pc, #108]	; (800697c <SPI_EndRxTxTransaction+0xa4>)
 8006910:	fba2 2303 	umull	r2, r3, r2, r3
 8006914:	0d5b      	lsrs	r3, r3, #21
 8006916:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800691a:	fb02 f303 	mul.w	r3, r2, r3
 800691e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006928:	d112      	bne.n	8006950 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2200      	movs	r2, #0
 8006932:	2180      	movs	r1, #128	; 0x80
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f7ff ff47 	bl	80067c8 <SPI_WaitFlagStateUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d016      	beq.n	800696e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006944:	f043 0220 	orr.w	r2, r3, #32
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e00f      	b.n	8006970 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00a      	beq.n	800696c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	3b01      	subs	r3, #1
 800695a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006966:	2b80      	cmp	r3, #128	; 0x80
 8006968:	d0f2      	beq.n	8006950 <SPI_EndRxTxTransaction+0x78>
 800696a:	e000      	b.n	800696e <SPI_EndRxTxTransaction+0x96>
        break;
 800696c:	bf00      	nop
  }

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	20000048 	.word	0x20000048
 800697c:	165e9f81 	.word	0x165e9f81

08006980 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006988:	4b35      	ldr	r3, [pc, #212]	; (8006a60 <SPI_CloseRxTx_ISR+0xe0>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a35      	ldr	r2, [pc, #212]	; (8006a64 <SPI_CloseRxTx_ISR+0xe4>)
 800698e:	fba2 2303 	umull	r2, r3, r2, r3
 8006992:	0a5b      	lsrs	r3, r3, #9
 8006994:	2264      	movs	r2, #100	; 0x64
 8006996:	fb02 f303 	mul.w	r3, r2, r3
 800699a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800699c:	f7fe f842 	bl	8004a24 <HAL_GetTick>
 80069a0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f022 0220 	bic.w	r2, r2, #32
 80069b0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d106      	bne.n	80069c6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069bc:	f043 0220 	orr.w	r2, r3, #32
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069c4:	e009      	b.n	80069da <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0eb      	beq.n	80069b2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	2164      	movs	r1, #100	; 0x64
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7ff ff7a 	bl	80068d8 <SPI_EndRxTxTransaction>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ee:	f043 0220 	orr.w	r2, r3, #32
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d115      	bne.n	8006a48 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d107      	bne.n	8006a38 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff fd91 	bl	8006558 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006a36:	e00e      	b.n	8006a56 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7ff fd93 	bl	800656c <HAL_SPI_TxRxCpltCallback>
}
 8006a46:	e006      	b.n	8006a56 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff fd95 	bl	8006580 <HAL_SPI_ErrorCallback>
}
 8006a56:	bf00      	nop
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20000048 	.word	0x20000048
 8006a64:	057619f1 	.word	0x057619f1

08006a68 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006a70:	4b2c      	ldr	r3, [pc, #176]	; (8006b24 <SPI_CloseTx_ISR+0xbc>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a2c      	ldr	r2, [pc, #176]	; (8006b28 <SPI_CloseTx_ISR+0xc0>)
 8006a76:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7a:	0a5b      	lsrs	r3, r3, #9
 8006a7c:	2264      	movs	r2, #100	; 0x64
 8006a7e:	fb02 f303 	mul.w	r3, r2, r3
 8006a82:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a84:	f7fd ffce 	bl	8004a24 <HAL_GetTick>
 8006a88:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d106      	bne.n	8006a9e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a94:	f043 0220 	orr.w	r2, r3, #32
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a9c:	e009      	b.n	8006ab2 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0eb      	beq.n	8006a8a <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ac0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	2164      	movs	r1, #100	; 0x64
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff ff06 	bl	80068d8 <SPI_EndRxTxTransaction>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d005      	beq.n	8006ade <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad6:	f043 0220 	orr.w	r2, r3, #32
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10a      	bne.n	8006afc <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	60fb      	str	r3, [r7, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d003      	beq.n	8006b14 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff fd37 	bl	8006580 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006b12:	e002      	b.n	8006b1a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7ff fd15 	bl	8006544 <HAL_SPI_TxCpltCallback>
}
 8006b1a:	bf00      	nop
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20000048 	.word	0x20000048
 8006b28:	057619f1 	.word	0x057619f1

08006b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e041      	b.n	8006bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d106      	bne.n	8006b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7fd fbe8 	bl	8004328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	3304      	adds	r3, #4
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4610      	mov	r0, r2
 8006b6c:	f000 fa7e 	bl	800706c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d001      	beq.n	8006be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e04e      	b.n	8006c82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a23      	ldr	r2, [pc, #140]	; (8006c90 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d022      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x80>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0e:	d01d      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x80>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a1f      	ldr	r2, [pc, #124]	; (8006c94 <HAL_TIM_Base_Start_IT+0xc8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d018      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x80>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a1e      	ldr	r2, [pc, #120]	; (8006c98 <HAL_TIM_Base_Start_IT+0xcc>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d013      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x80>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a1c      	ldr	r2, [pc, #112]	; (8006c9c <HAL_TIM_Base_Start_IT+0xd0>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00e      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x80>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a1b      	ldr	r2, [pc, #108]	; (8006ca0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d009      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x80>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a19      	ldr	r2, [pc, #100]	; (8006ca4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d004      	beq.n	8006c4c <HAL_TIM_Base_Start_IT+0x80>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a18      	ldr	r2, [pc, #96]	; (8006ca8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d111      	bne.n	8006c70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b06      	cmp	r3, #6
 8006c5c:	d010      	beq.n	8006c80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f042 0201 	orr.w	r2, r2, #1
 8006c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c6e:	e007      	b.n	8006c80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0201 	orr.w	r2, r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	40010000 	.word	0x40010000
 8006c94:	40000400 	.word	0x40000400
 8006c98:	40000800 	.word	0x40000800
 8006c9c:	40000c00 	.word	0x40000c00
 8006ca0:	40010400 	.word	0x40010400
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	40001800 	.word	0x40001800

08006cac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d020      	beq.n	8006d10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d01b      	beq.n	8006d10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f06f 0202 	mvn.w	r2, #2
 8006ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f999 	bl	800702e <HAL_TIM_IC_CaptureCallback>
 8006cfc:	e005      	b.n	8006d0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f98b 	bl	800701a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f99c 	bl	8007042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f003 0304 	and.w	r3, r3, #4
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d020      	beq.n	8006d5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d01b      	beq.n	8006d5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f06f 0204 	mvn.w	r2, #4
 8006d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2202      	movs	r2, #2
 8006d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f973 	bl	800702e <HAL_TIM_IC_CaptureCallback>
 8006d48:	e005      	b.n	8006d56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f965 	bl	800701a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f976 	bl	8007042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f003 0308 	and.w	r3, r3, #8
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d020      	beq.n	8006da8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01b      	beq.n	8006da8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f06f 0208 	mvn.w	r2, #8
 8006d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2204      	movs	r2, #4
 8006d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	f003 0303 	and.w	r3, r3, #3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f94d 	bl	800702e <HAL_TIM_IC_CaptureCallback>
 8006d94:	e005      	b.n	8006da2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f93f 	bl	800701a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f950 	bl	8007042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f003 0310 	and.w	r3, r3, #16
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d020      	beq.n	8006df4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f003 0310 	and.w	r3, r3, #16
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01b      	beq.n	8006df4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0210 	mvn.w	r2, #16
 8006dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2208      	movs	r2, #8
 8006dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f927 	bl	800702e <HAL_TIM_IC_CaptureCallback>
 8006de0:	e005      	b.n	8006dee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f919 	bl	800701a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f92a 	bl	8007042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00c      	beq.n	8006e18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d007      	beq.n	8006e18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f06f 0201 	mvn.w	r2, #1
 8006e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7fa fc9e 	bl	8001754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00c      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d007      	beq.n	8006e3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fae4 	bl	8007404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00c      	beq.n	8006e60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d007      	beq.n	8006e60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f8fb 	bl	8007056 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00c      	beq.n	8006e84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f003 0320 	and.w	r3, r3, #32
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d007      	beq.n	8006e84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f06f 0220 	mvn.w	r2, #32
 8006e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fab6 	bl	80073f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e84:	bf00      	nop
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e0b4      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x186>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ece:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ee0:	d03e      	beq.n	8006f60 <HAL_TIM_ConfigClockSource+0xd4>
 8006ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ee6:	f200 8087 	bhi.w	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8006eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eee:	f000 8086 	beq.w	8006ffe <HAL_TIM_ConfigClockSource+0x172>
 8006ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef6:	d87f      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef8:	2b70      	cmp	r3, #112	; 0x70
 8006efa:	d01a      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0xa6>
 8006efc:	2b70      	cmp	r3, #112	; 0x70
 8006efe:	d87b      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8006f00:	2b60      	cmp	r3, #96	; 0x60
 8006f02:	d050      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x11a>
 8006f04:	2b60      	cmp	r3, #96	; 0x60
 8006f06:	d877      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8006f08:	2b50      	cmp	r3, #80	; 0x50
 8006f0a:	d03c      	beq.n	8006f86 <HAL_TIM_ConfigClockSource+0xfa>
 8006f0c:	2b50      	cmp	r3, #80	; 0x50
 8006f0e:	d873      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8006f10:	2b40      	cmp	r3, #64	; 0x40
 8006f12:	d058      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x13a>
 8006f14:	2b40      	cmp	r3, #64	; 0x40
 8006f16:	d86f      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8006f18:	2b30      	cmp	r3, #48	; 0x30
 8006f1a:	d064      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f1c:	2b30      	cmp	r3, #48	; 0x30
 8006f1e:	d86b      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	d060      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d867      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d05c      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f2c:	2b10      	cmp	r3, #16
 8006f2e:	d05a      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f30:	e062      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f42:	f000 f9b9 	bl	80072b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	609a      	str	r2, [r3, #8]
      break;
 8006f5e:	e04f      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f70:	f000 f9a2 	bl	80072b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f82:	609a      	str	r2, [r3, #8]
      break;
 8006f84:	e03c      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f92:	461a      	mov	r2, r3
 8006f94:	f000 f916 	bl	80071c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2150      	movs	r1, #80	; 0x50
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 f96f 	bl	8007282 <TIM_ITRx_SetConfig>
      break;
 8006fa4:	e02c      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f000 f935 	bl	8007222 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2160      	movs	r1, #96	; 0x60
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 f95f 	bl	8007282 <TIM_ITRx_SetConfig>
      break;
 8006fc4:	e01c      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f000 f8f6 	bl	80071c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2140      	movs	r1, #64	; 0x40
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 f94f 	bl	8007282 <TIM_ITRx_SetConfig>
      break;
 8006fe4:	e00c      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	f000 f946 	bl	8007282 <TIM_ITRx_SetConfig>
      break;
 8006ff6:	e003      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8006ffc:	e000      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ffe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007010:	7bfb      	ldrb	r3, [r7, #15]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007022:	bf00      	nop
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800702e:	b480      	push	{r7}
 8007030:	b083      	sub	sp, #12
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007036:	bf00      	nop
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
	...

0800706c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a46      	ldr	r2, [pc, #280]	; (8007198 <TIM_Base_SetConfig+0x12c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d013      	beq.n	80070ac <TIM_Base_SetConfig+0x40>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800708a:	d00f      	beq.n	80070ac <TIM_Base_SetConfig+0x40>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a43      	ldr	r2, [pc, #268]	; (800719c <TIM_Base_SetConfig+0x130>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d00b      	beq.n	80070ac <TIM_Base_SetConfig+0x40>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a42      	ldr	r2, [pc, #264]	; (80071a0 <TIM_Base_SetConfig+0x134>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d007      	beq.n	80070ac <TIM_Base_SetConfig+0x40>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a41      	ldr	r2, [pc, #260]	; (80071a4 <TIM_Base_SetConfig+0x138>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d003      	beq.n	80070ac <TIM_Base_SetConfig+0x40>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a40      	ldr	r2, [pc, #256]	; (80071a8 <TIM_Base_SetConfig+0x13c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d108      	bne.n	80070be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a35      	ldr	r2, [pc, #212]	; (8007198 <TIM_Base_SetConfig+0x12c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d02b      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070cc:	d027      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a32      	ldr	r2, [pc, #200]	; (800719c <TIM_Base_SetConfig+0x130>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d023      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a31      	ldr	r2, [pc, #196]	; (80071a0 <TIM_Base_SetConfig+0x134>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d01f      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a30      	ldr	r2, [pc, #192]	; (80071a4 <TIM_Base_SetConfig+0x138>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d01b      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a2f      	ldr	r2, [pc, #188]	; (80071a8 <TIM_Base_SetConfig+0x13c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d017      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a2e      	ldr	r2, [pc, #184]	; (80071ac <TIM_Base_SetConfig+0x140>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d013      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a2d      	ldr	r2, [pc, #180]	; (80071b0 <TIM_Base_SetConfig+0x144>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00f      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a2c      	ldr	r2, [pc, #176]	; (80071b4 <TIM_Base_SetConfig+0x148>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d00b      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a2b      	ldr	r2, [pc, #172]	; (80071b8 <TIM_Base_SetConfig+0x14c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d007      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a2a      	ldr	r2, [pc, #168]	; (80071bc <TIM_Base_SetConfig+0x150>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d003      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a29      	ldr	r2, [pc, #164]	; (80071c0 <TIM_Base_SetConfig+0x154>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d108      	bne.n	8007130 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a10      	ldr	r2, [pc, #64]	; (8007198 <TIM_Base_SetConfig+0x12c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d003      	beq.n	8007164 <TIM_Base_SetConfig+0xf8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a12      	ldr	r2, [pc, #72]	; (80071a8 <TIM_Base_SetConfig+0x13c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d103      	bne.n	800716c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	691a      	ldr	r2, [r3, #16]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b01      	cmp	r3, #1
 800717c:	d105      	bne.n	800718a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	f023 0201 	bic.w	r2, r3, #1
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	611a      	str	r2, [r3, #16]
  }
}
 800718a:	bf00      	nop
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	40010000 	.word	0x40010000
 800719c:	40000400 	.word	0x40000400
 80071a0:	40000800 	.word	0x40000800
 80071a4:	40000c00 	.word	0x40000c00
 80071a8:	40010400 	.word	0x40010400
 80071ac:	40014000 	.word	0x40014000
 80071b0:	40014400 	.word	0x40014400
 80071b4:	40014800 	.word	0x40014800
 80071b8:	40001800 	.word	0x40001800
 80071bc:	40001c00 	.word	0x40001c00
 80071c0:	40002000 	.word	0x40002000

080071c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	f023 0201 	bic.w	r2, r3, #1
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	011b      	lsls	r3, r3, #4
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f023 030a 	bic.w	r3, r3, #10
 8007200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	4313      	orrs	r3, r2
 8007208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007222:	b480      	push	{r7}
 8007224:	b087      	sub	sp, #28
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	f023 0210 	bic.w	r2, r3, #16
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800724c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	031b      	lsls	r3, r3, #12
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	4313      	orrs	r3, r2
 8007256:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800725e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	011b      	lsls	r3, r3, #4
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	4313      	orrs	r3, r2
 8007268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	621a      	str	r2, [r3, #32]
}
 8007276:	bf00      	nop
 8007278:	371c      	adds	r7, #28
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007282:	b480      	push	{r7}
 8007284:	b085      	sub	sp, #20
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	f043 0307 	orr.w	r3, r3, #7
 80072a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	609a      	str	r2, [r3, #8]
}
 80072ac:	bf00      	nop
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	021a      	lsls	r2, r3, #8
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	431a      	orrs	r2, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	4313      	orrs	r3, r2
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	609a      	str	r2, [r3, #8]
}
 80072ec:	bf00      	nop
 80072ee:	371c      	adds	r7, #28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800730c:	2302      	movs	r3, #2
 800730e:	e05a      	b.n	80073c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007336:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	4313      	orrs	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a21      	ldr	r2, [pc, #132]	; (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d022      	beq.n	800739a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800735c:	d01d      	beq.n	800739a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a1d      	ldr	r2, [pc, #116]	; (80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d018      	beq.n	800739a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a1b      	ldr	r2, [pc, #108]	; (80073dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d013      	beq.n	800739a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a1a      	ldr	r2, [pc, #104]	; (80073e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d00e      	beq.n	800739a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a18      	ldr	r2, [pc, #96]	; (80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d009      	beq.n	800739a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a17      	ldr	r2, [pc, #92]	; (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d004      	beq.n	800739a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a15      	ldr	r2, [pc, #84]	; (80073ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d10c      	bne.n	80073b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	40010000 	.word	0x40010000
 80073d8:	40000400 	.word	0x40000400
 80073dc:	40000800 	.word	0x40000800
 80073e0:	40000c00 	.word	0x40000c00
 80073e4:	40010400 	.word	0x40010400
 80073e8:	40014000 	.word	0x40014000
 80073ec:	40001800 	.word	0x40001800

080073f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e042      	b.n	80074b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d106      	bne.n	8007444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7fc ff9a 	bl	8004378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2224      	movs	r2, #36	; 0x24
 8007448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800745a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fcdb 	bl	8007e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	691a      	ldr	r2, [r3, #16]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	695a      	ldr	r2, [r3, #20]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68da      	ldr	r2, [r3, #12]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	4613      	mov	r3, r2
 80074c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	d112      	bne.n	80074f8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <HAL_UART_Receive_IT+0x26>
 80074d8:	88fb      	ldrh	r3, [r7, #6]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e00b      	b.n	80074fa <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074e8:	88fb      	ldrh	r3, [r7, #6]
 80074ea:	461a      	mov	r2, r3
 80074ec:	68b9      	ldr	r1, [r7, #8]
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 faba 	bl	8007a68 <UART_Start_Receive_IT>
 80074f4:	4603      	mov	r3, r0
 80074f6:	e000      	b.n	80074fa <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80074f8:	2302      	movs	r3, #2
  }
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b0ba      	sub	sp, #232	; 0xe8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800752a:	2300      	movs	r3, #0
 800752c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007530:	2300      	movs	r3, #0
 8007532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800753a:	f003 030f 	and.w	r3, r3, #15
 800753e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10f      	bne.n	800756a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800754a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b00      	cmp	r3, #0
 8007554:	d009      	beq.n	800756a <HAL_UART_IRQHandler+0x66>
 8007556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fb99 	bl	8007c9a <UART_Receive_IT>
      return;
 8007568:	e25b      	b.n	8007a22 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800756a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 80de 	beq.w	8007730 <HAL_UART_IRQHandler+0x22c>
 8007574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	d106      	bne.n	800758e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007584:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 80d1 	beq.w	8007730 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800758e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00b      	beq.n	80075b2 <HAL_UART_IRQHandler+0xae>
 800759a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800759e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d005      	beq.n	80075b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075aa:	f043 0201 	orr.w	r2, r3, #1
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b6:	f003 0304 	and.w	r3, r3, #4
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00b      	beq.n	80075d6 <HAL_UART_IRQHandler+0xd2>
 80075be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ce:	f043 0202 	orr.w	r2, r3, #2
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00b      	beq.n	80075fa <HAL_UART_IRQHandler+0xf6>
 80075e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d005      	beq.n	80075fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f2:	f043 0204 	orr.w	r2, r3, #4
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80075fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fe:	f003 0308 	and.w	r3, r3, #8
 8007602:	2b00      	cmp	r3, #0
 8007604:	d011      	beq.n	800762a <HAL_UART_IRQHandler+0x126>
 8007606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800760a:	f003 0320 	and.w	r3, r3, #32
 800760e:	2b00      	cmp	r3, #0
 8007610:	d105      	bne.n	800761e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d005      	beq.n	800762a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007622:	f043 0208 	orr.w	r2, r3, #8
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800762e:	2b00      	cmp	r3, #0
 8007630:	f000 81f2 	beq.w	8007a18 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007638:	f003 0320 	and.w	r3, r3, #32
 800763c:	2b00      	cmp	r3, #0
 800763e:	d008      	beq.n	8007652 <HAL_UART_IRQHandler+0x14e>
 8007640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007644:	f003 0320 	and.w	r3, r3, #32
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fb24 	bl	8007c9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800765c:	2b40      	cmp	r3, #64	; 0x40
 800765e:	bf0c      	ite	eq
 8007660:	2301      	moveq	r3, #1
 8007662:	2300      	movne	r3, #0
 8007664:	b2db      	uxtb	r3, r3
 8007666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766e:	f003 0308 	and.w	r3, r3, #8
 8007672:	2b00      	cmp	r3, #0
 8007674:	d103      	bne.n	800767e <HAL_UART_IRQHandler+0x17a>
 8007676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800767a:	2b00      	cmp	r3, #0
 800767c:	d04f      	beq.n	800771e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fa2c 	bl	8007adc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d141      	bne.n	8007716 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3314      	adds	r3, #20
 8007698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3314      	adds	r3, #20
 80076ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1d9      	bne.n	8007692 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d013      	beq.n	800770e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ea:	4a7e      	ldr	r2, [pc, #504]	; (80078e4 <HAL_UART_IRQHandler+0x3e0>)
 80076ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fd fb47 	bl	8004d86 <HAL_DMA_Abort_IT>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d016      	beq.n	800772c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007708:	4610      	mov	r0, r2
 800770a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800770c:	e00e      	b.n	800772c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f994 	bl	8007a3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007714:	e00a      	b.n	800772c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f990 	bl	8007a3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800771c:	e006      	b.n	800772c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f98c 	bl	8007a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800772a:	e175      	b.n	8007a18 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800772c:	bf00      	nop
    return;
 800772e:	e173      	b.n	8007a18 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	2b01      	cmp	r3, #1
 8007736:	f040 814f 	bne.w	80079d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800773a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800773e:	f003 0310 	and.w	r3, r3, #16
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 8148 	beq.w	80079d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800774c:	f003 0310 	and.w	r3, r3, #16
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 8141 	beq.w	80079d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007756:	2300      	movs	r3, #0
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	60bb      	str	r3, [r7, #8]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	60bb      	str	r3, [r7, #8]
 800776a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007776:	2b40      	cmp	r3, #64	; 0x40
 8007778:	f040 80b6 	bne.w	80078e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007788:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 8145 	beq.w	8007a1c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800779a:	429a      	cmp	r2, r3
 800779c:	f080 813e 	bcs.w	8007a1c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077b2:	f000 8088 	beq.w	80078c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	330c      	adds	r3, #12
 80077bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	330c      	adds	r3, #12
 80077de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80077e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1d9      	bne.n	80077b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3314      	adds	r3, #20
 8007808:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007814:	f023 0301 	bic.w	r3, r3, #1
 8007818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3314      	adds	r3, #20
 8007822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007826:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800782a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800782e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e1      	bne.n	8007802 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3314      	adds	r3, #20
 8007844:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800784e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007854:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3314      	adds	r3, #20
 800785e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007862:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007864:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007868:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e3      	bne.n	800783e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	330c      	adds	r3, #12
 800788a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007896:	f023 0310 	bic.w	r3, r3, #16
 800789a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	330c      	adds	r3, #12
 80078a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80078a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80078aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e3      	bne.n	8007884 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fd f9f0 	bl	8004ca6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2202      	movs	r2, #2
 80078ca:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	b29b      	uxth	r3, r3
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f8b7 	bl	8007a50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078e2:	e09b      	b.n	8007a1c <HAL_UART_IRQHandler+0x518>
 80078e4:	08007ba3 	.word	0x08007ba3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f000 808e 	beq.w	8007a20 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007904:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 8089 	beq.w	8007a20 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	330c      	adds	r3, #12
 8007914:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007918:	e853 3f00 	ldrex	r3, [r3]
 800791c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800791e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007920:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007924:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	330c      	adds	r3, #12
 800792e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007932:	647a      	str	r2, [r7, #68]	; 0x44
 8007934:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007936:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800793a:	e841 2300 	strex	r3, r2, [r1]
 800793e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1e3      	bne.n	800790e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3314      	adds	r3, #20
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	e853 3f00 	ldrex	r3, [r3]
 8007954:	623b      	str	r3, [r7, #32]
   return(result);
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	f023 0301 	bic.w	r3, r3, #1
 800795c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3314      	adds	r3, #20
 8007966:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800796a:	633a      	str	r2, [r7, #48]	; 0x30
 800796c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e3      	bne.n	8007946 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2220      	movs	r2, #32
 8007982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	330c      	adds	r3, #12
 8007992:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	e853 3f00 	ldrex	r3, [r3]
 800799a:	60fb      	str	r3, [r7, #12]
   return(result);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0310 	bic.w	r3, r3, #16
 80079a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	330c      	adds	r3, #12
 80079ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80079b0:	61fa      	str	r2, [r7, #28]
 80079b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	69b9      	ldr	r1, [r7, #24]
 80079b6:	69fa      	ldr	r2, [r7, #28]
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	617b      	str	r3, [r7, #20]
   return(result);
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e3      	bne.n	800798c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2202      	movs	r2, #2
 80079c8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f83d 	bl	8007a50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079d6:	e023      	b.n	8007a20 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d009      	beq.n	80079f8 <HAL_UART_IRQHandler+0x4f4>
 80079e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f8ea 	bl	8007bca <UART_Transmit_IT>
    return;
 80079f6:	e014      	b.n	8007a22 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00e      	beq.n	8007a22 <HAL_UART_IRQHandler+0x51e>
 8007a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d008      	beq.n	8007a22 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f92a 	bl	8007c6a <UART_EndTransmit_IT>
    return;
 8007a16:	e004      	b.n	8007a22 <HAL_UART_IRQHandler+0x51e>
    return;
 8007a18:	bf00      	nop
 8007a1a:	e002      	b.n	8007a22 <HAL_UART_IRQHandler+0x51e>
      return;
 8007a1c:	bf00      	nop
 8007a1e:	e000      	b.n	8007a22 <HAL_UART_IRQHandler+0x51e>
      return;
 8007a20:	bf00      	nop
  }
}
 8007a22:	37e8      	adds	r7, #232	; 0xe8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	4613      	mov	r3, r2
 8007a74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	88fa      	ldrh	r2, [r7, #6]
 8007a80:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	88fa      	ldrh	r2, [r7, #6]
 8007a86:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2222      	movs	r2, #34	; 0x22
 8007a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d007      	beq.n	8007aae <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	695a      	ldr	r2, [r3, #20]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f042 0201 	orr.w	r2, r2, #1
 8007abc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f042 0220 	orr.w	r2, r2, #32
 8007acc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b095      	sub	sp, #84	; 0x54
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	330c      	adds	r3, #12
 8007aea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aee:	e853 3f00 	ldrex	r3, [r3]
 8007af2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	330c      	adds	r3, #12
 8007b02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b04:	643a      	str	r2, [r7, #64]	; 0x40
 8007b06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b0c:	e841 2300 	strex	r3, r2, [r1]
 8007b10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e5      	bne.n	8007ae4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3314      	adds	r3, #20
 8007b1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	e853 3f00 	ldrex	r3, [r3]
 8007b26:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	f023 0301 	bic.w	r3, r3, #1
 8007b2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3314      	adds	r3, #20
 8007b36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b40:	e841 2300 	strex	r3, r2, [r1]
 8007b44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e5      	bne.n	8007b18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d119      	bne.n	8007b88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	330c      	adds	r3, #12
 8007b5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f023 0310 	bic.w	r3, r3, #16
 8007b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	330c      	adds	r3, #12
 8007b72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b74:	61ba      	str	r2, [r7, #24]
 8007b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6979      	ldr	r1, [r7, #20]
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	613b      	str	r3, [r7, #16]
   return(result);
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e5      	bne.n	8007b54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b96:	bf00      	nop
 8007b98:	3754      	adds	r7, #84	; 0x54
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f7ff ff3d 	bl	8007a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bc2:	bf00      	nop
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b085      	sub	sp, #20
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b21      	cmp	r3, #33	; 0x21
 8007bdc:	d13e      	bne.n	8007c5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be6:	d114      	bne.n	8007c12 <UART_Transmit_IT+0x48>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d110      	bne.n	8007c12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	1c9a      	adds	r2, r3, #2
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	621a      	str	r2, [r3, #32]
 8007c10:	e008      	b.n	8007c24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	1c59      	adds	r1, r3, #1
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	6211      	str	r1, [r2, #32]
 8007c1c:	781a      	ldrb	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	4619      	mov	r1, r3
 8007c32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10f      	bne.n	8007c58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68da      	ldr	r2, [r3, #12]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	e000      	b.n	8007c5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c5c:	2302      	movs	r3, #2
  }
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2220      	movs	r2, #32
 8007c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7ff fecc 	bl	8007a28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b08c      	sub	sp, #48	; 0x30
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b22      	cmp	r3, #34	; 0x22
 8007cac:	f040 80ae 	bne.w	8007e0c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cb8:	d117      	bne.n	8007cea <UART_Receive_IT+0x50>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d113      	bne.n	8007cea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce2:	1c9a      	adds	r2, r3, #2
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	629a      	str	r2, [r3, #40]	; 0x28
 8007ce8:	e026      	b.n	8007d38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cfc:	d007      	beq.n	8007d0e <UART_Receive_IT+0x74>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10a      	bne.n	8007d1c <UART_Receive_IT+0x82>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d106      	bne.n	8007d1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d18:	701a      	strb	r2, [r3, #0]
 8007d1a:	e008      	b.n	8007d2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d32:	1c5a      	adds	r2, r3, #1
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	4619      	mov	r1, r3
 8007d46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d15d      	bne.n	8007e08 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68da      	ldr	r2, [r3, #12]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f022 0220 	bic.w	r2, r2, #32
 8007d5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68da      	ldr	r2, [r3, #12]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695a      	ldr	r2, [r3, #20]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 0201 	bic.w	r2, r2, #1
 8007d7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d135      	bne.n	8007dfe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	330c      	adds	r3, #12
 8007d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	e853 3f00 	ldrex	r3, [r3]
 8007da6:	613b      	str	r3, [r7, #16]
   return(result);
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f023 0310 	bic.w	r3, r3, #16
 8007dae:	627b      	str	r3, [r7, #36]	; 0x24
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	330c      	adds	r3, #12
 8007db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007db8:	623a      	str	r2, [r7, #32]
 8007dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	69f9      	ldr	r1, [r7, #28]
 8007dbe:	6a3a      	ldr	r2, [r7, #32]
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e5      	bne.n	8007d98 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	2b10      	cmp	r3, #16
 8007dd8:	d10a      	bne.n	8007df0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60fb      	str	r3, [r7, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	60fb      	str	r3, [r7, #12]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	60fb      	str	r3, [r7, #12]
 8007dee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007df4:	4619      	mov	r1, r3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7ff fe2a 	bl	8007a50 <HAL_UARTEx_RxEventCallback>
 8007dfc:	e002      	b.n	8007e04 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7f9 fd8a 	bl	8001918 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	e002      	b.n	8007e0e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e000      	b.n	8007e0e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007e0c:	2302      	movs	r3, #2
  }
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3730      	adds	r7, #48	; 0x30
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e1c:	b0c0      	sub	sp, #256	; 0x100
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e34:	68d9      	ldr	r1, [r3, #12]
 8007e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	ea40 0301 	orr.w	r3, r0, r1
 8007e40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e46:	689a      	ldr	r2, [r3, #8]
 8007e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	431a      	orrs	r2, r3
 8007e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007e70:	f021 010c 	bic.w	r1, r1, #12
 8007e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e7e:	430b      	orrs	r3, r1
 8007e80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e92:	6999      	ldr	r1, [r3, #24]
 8007e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	ea40 0301 	orr.w	r3, r0, r1
 8007e9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	4b8f      	ldr	r3, [pc, #572]	; (80080e4 <UART_SetConfig+0x2cc>)
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d005      	beq.n	8007eb8 <UART_SetConfig+0xa0>
 8007eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	4b8d      	ldr	r3, [pc, #564]	; (80080e8 <UART_SetConfig+0x2d0>)
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d104      	bne.n	8007ec2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007eb8:	f7fd fe54 	bl	8005b64 <HAL_RCC_GetPCLK2Freq>
 8007ebc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ec0:	e003      	b.n	8007eca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ec2:	f7fd fe3b 	bl	8005b3c <HAL_RCC_GetPCLK1Freq>
 8007ec6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ed4:	f040 810c 	bne.w	80080f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007edc:	2200      	movs	r2, #0
 8007ede:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ee2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007ee6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007eea:	4622      	mov	r2, r4
 8007eec:	462b      	mov	r3, r5
 8007eee:	1891      	adds	r1, r2, r2
 8007ef0:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ef2:	415b      	adcs	r3, r3
 8007ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ef6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007efa:	4621      	mov	r1, r4
 8007efc:	eb12 0801 	adds.w	r8, r2, r1
 8007f00:	4629      	mov	r1, r5
 8007f02:	eb43 0901 	adc.w	r9, r3, r1
 8007f06:	f04f 0200 	mov.w	r2, #0
 8007f0a:	f04f 0300 	mov.w	r3, #0
 8007f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f1a:	4690      	mov	r8, r2
 8007f1c:	4699      	mov	r9, r3
 8007f1e:	4623      	mov	r3, r4
 8007f20:	eb18 0303 	adds.w	r3, r8, r3
 8007f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007f28:	462b      	mov	r3, r5
 8007f2a:	eb49 0303 	adc.w	r3, r9, r3
 8007f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007f42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007f46:	460b      	mov	r3, r1
 8007f48:	18db      	adds	r3, r3, r3
 8007f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	eb42 0303 	adc.w	r3, r2, r3
 8007f52:	657b      	str	r3, [r7, #84]	; 0x54
 8007f54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007f58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007f5c:	f7f8 fd34 	bl	80009c8 <__aeabi_uldivmod>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4b61      	ldr	r3, [pc, #388]	; (80080ec <UART_SetConfig+0x2d4>)
 8007f66:	fba3 2302 	umull	r2, r3, r3, r2
 8007f6a:	095b      	lsrs	r3, r3, #5
 8007f6c:	011c      	lsls	r4, r3, #4
 8007f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007f7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007f80:	4642      	mov	r2, r8
 8007f82:	464b      	mov	r3, r9
 8007f84:	1891      	adds	r1, r2, r2
 8007f86:	64b9      	str	r1, [r7, #72]	; 0x48
 8007f88:	415b      	adcs	r3, r3
 8007f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007f90:	4641      	mov	r1, r8
 8007f92:	eb12 0a01 	adds.w	sl, r2, r1
 8007f96:	4649      	mov	r1, r9
 8007f98:	eb43 0b01 	adc.w	fp, r3, r1
 8007f9c:	f04f 0200 	mov.w	r2, #0
 8007fa0:	f04f 0300 	mov.w	r3, #0
 8007fa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007fa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007fac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fb0:	4692      	mov	sl, r2
 8007fb2:	469b      	mov	fp, r3
 8007fb4:	4643      	mov	r3, r8
 8007fb6:	eb1a 0303 	adds.w	r3, sl, r3
 8007fba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	eb4b 0303 	adc.w	r3, fp, r3
 8007fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007fd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	18db      	adds	r3, r3, r3
 8007fe0:	643b      	str	r3, [r7, #64]	; 0x40
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	eb42 0303 	adc.w	r3, r2, r3
 8007fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8007fea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007fee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007ff2:	f7f8 fce9 	bl	80009c8 <__aeabi_uldivmod>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	4b3b      	ldr	r3, [pc, #236]	; (80080ec <UART_SetConfig+0x2d4>)
 8007ffe:	fba3 2301 	umull	r2, r3, r3, r1
 8008002:	095b      	lsrs	r3, r3, #5
 8008004:	2264      	movs	r2, #100	; 0x64
 8008006:	fb02 f303 	mul.w	r3, r2, r3
 800800a:	1acb      	subs	r3, r1, r3
 800800c:	00db      	lsls	r3, r3, #3
 800800e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008012:	4b36      	ldr	r3, [pc, #216]	; (80080ec <UART_SetConfig+0x2d4>)
 8008014:	fba3 2302 	umull	r2, r3, r3, r2
 8008018:	095b      	lsrs	r3, r3, #5
 800801a:	005b      	lsls	r3, r3, #1
 800801c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008020:	441c      	add	r4, r3
 8008022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008026:	2200      	movs	r2, #0
 8008028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800802c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008030:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008034:	4642      	mov	r2, r8
 8008036:	464b      	mov	r3, r9
 8008038:	1891      	adds	r1, r2, r2
 800803a:	63b9      	str	r1, [r7, #56]	; 0x38
 800803c:	415b      	adcs	r3, r3
 800803e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008040:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008044:	4641      	mov	r1, r8
 8008046:	1851      	adds	r1, r2, r1
 8008048:	6339      	str	r1, [r7, #48]	; 0x30
 800804a:	4649      	mov	r1, r9
 800804c:	414b      	adcs	r3, r1
 800804e:	637b      	str	r3, [r7, #52]	; 0x34
 8008050:	f04f 0200 	mov.w	r2, #0
 8008054:	f04f 0300 	mov.w	r3, #0
 8008058:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800805c:	4659      	mov	r1, fp
 800805e:	00cb      	lsls	r3, r1, #3
 8008060:	4651      	mov	r1, sl
 8008062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008066:	4651      	mov	r1, sl
 8008068:	00ca      	lsls	r2, r1, #3
 800806a:	4610      	mov	r0, r2
 800806c:	4619      	mov	r1, r3
 800806e:	4603      	mov	r3, r0
 8008070:	4642      	mov	r2, r8
 8008072:	189b      	adds	r3, r3, r2
 8008074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008078:	464b      	mov	r3, r9
 800807a:	460a      	mov	r2, r1
 800807c:	eb42 0303 	adc.w	r3, r2, r3
 8008080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008090:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008094:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008098:	460b      	mov	r3, r1
 800809a:	18db      	adds	r3, r3, r3
 800809c:	62bb      	str	r3, [r7, #40]	; 0x28
 800809e:	4613      	mov	r3, r2
 80080a0:	eb42 0303 	adc.w	r3, r2, r3
 80080a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80080ae:	f7f8 fc8b 	bl	80009c8 <__aeabi_uldivmod>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	4b0d      	ldr	r3, [pc, #52]	; (80080ec <UART_SetConfig+0x2d4>)
 80080b8:	fba3 1302 	umull	r1, r3, r3, r2
 80080bc:	095b      	lsrs	r3, r3, #5
 80080be:	2164      	movs	r1, #100	; 0x64
 80080c0:	fb01 f303 	mul.w	r3, r1, r3
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	3332      	adds	r3, #50	; 0x32
 80080ca:	4a08      	ldr	r2, [pc, #32]	; (80080ec <UART_SetConfig+0x2d4>)
 80080cc:	fba2 2303 	umull	r2, r3, r2, r3
 80080d0:	095b      	lsrs	r3, r3, #5
 80080d2:	f003 0207 	and.w	r2, r3, #7
 80080d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4422      	add	r2, r4
 80080de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80080e0:	e106      	b.n	80082f0 <UART_SetConfig+0x4d8>
 80080e2:	bf00      	nop
 80080e4:	40011000 	.word	0x40011000
 80080e8:	40011400 	.word	0x40011400
 80080ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080f4:	2200      	movs	r2, #0
 80080f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80080fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80080fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008102:	4642      	mov	r2, r8
 8008104:	464b      	mov	r3, r9
 8008106:	1891      	adds	r1, r2, r2
 8008108:	6239      	str	r1, [r7, #32]
 800810a:	415b      	adcs	r3, r3
 800810c:	627b      	str	r3, [r7, #36]	; 0x24
 800810e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008112:	4641      	mov	r1, r8
 8008114:	1854      	adds	r4, r2, r1
 8008116:	4649      	mov	r1, r9
 8008118:	eb43 0501 	adc.w	r5, r3, r1
 800811c:	f04f 0200 	mov.w	r2, #0
 8008120:	f04f 0300 	mov.w	r3, #0
 8008124:	00eb      	lsls	r3, r5, #3
 8008126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800812a:	00e2      	lsls	r2, r4, #3
 800812c:	4614      	mov	r4, r2
 800812e:	461d      	mov	r5, r3
 8008130:	4643      	mov	r3, r8
 8008132:	18e3      	adds	r3, r4, r3
 8008134:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008138:	464b      	mov	r3, r9
 800813a:	eb45 0303 	adc.w	r3, r5, r3
 800813e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800814e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008152:	f04f 0200 	mov.w	r2, #0
 8008156:	f04f 0300 	mov.w	r3, #0
 800815a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800815e:	4629      	mov	r1, r5
 8008160:	008b      	lsls	r3, r1, #2
 8008162:	4621      	mov	r1, r4
 8008164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008168:	4621      	mov	r1, r4
 800816a:	008a      	lsls	r2, r1, #2
 800816c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008170:	f7f8 fc2a 	bl	80009c8 <__aeabi_uldivmod>
 8008174:	4602      	mov	r2, r0
 8008176:	460b      	mov	r3, r1
 8008178:	4b60      	ldr	r3, [pc, #384]	; (80082fc <UART_SetConfig+0x4e4>)
 800817a:	fba3 2302 	umull	r2, r3, r3, r2
 800817e:	095b      	lsrs	r3, r3, #5
 8008180:	011c      	lsls	r4, r3, #4
 8008182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008186:	2200      	movs	r2, #0
 8008188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800818c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008190:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008194:	4642      	mov	r2, r8
 8008196:	464b      	mov	r3, r9
 8008198:	1891      	adds	r1, r2, r2
 800819a:	61b9      	str	r1, [r7, #24]
 800819c:	415b      	adcs	r3, r3
 800819e:	61fb      	str	r3, [r7, #28]
 80081a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081a4:	4641      	mov	r1, r8
 80081a6:	1851      	adds	r1, r2, r1
 80081a8:	6139      	str	r1, [r7, #16]
 80081aa:	4649      	mov	r1, r9
 80081ac:	414b      	adcs	r3, r1
 80081ae:	617b      	str	r3, [r7, #20]
 80081b0:	f04f 0200 	mov.w	r2, #0
 80081b4:	f04f 0300 	mov.w	r3, #0
 80081b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081bc:	4659      	mov	r1, fp
 80081be:	00cb      	lsls	r3, r1, #3
 80081c0:	4651      	mov	r1, sl
 80081c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081c6:	4651      	mov	r1, sl
 80081c8:	00ca      	lsls	r2, r1, #3
 80081ca:	4610      	mov	r0, r2
 80081cc:	4619      	mov	r1, r3
 80081ce:	4603      	mov	r3, r0
 80081d0:	4642      	mov	r2, r8
 80081d2:	189b      	adds	r3, r3, r2
 80081d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081d8:	464b      	mov	r3, r9
 80081da:	460a      	mov	r2, r1
 80081dc:	eb42 0303 	adc.w	r3, r2, r3
 80081e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80081ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80081f0:	f04f 0200 	mov.w	r2, #0
 80081f4:	f04f 0300 	mov.w	r3, #0
 80081f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80081fc:	4649      	mov	r1, r9
 80081fe:	008b      	lsls	r3, r1, #2
 8008200:	4641      	mov	r1, r8
 8008202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008206:	4641      	mov	r1, r8
 8008208:	008a      	lsls	r2, r1, #2
 800820a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800820e:	f7f8 fbdb 	bl	80009c8 <__aeabi_uldivmod>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	4611      	mov	r1, r2
 8008218:	4b38      	ldr	r3, [pc, #224]	; (80082fc <UART_SetConfig+0x4e4>)
 800821a:	fba3 2301 	umull	r2, r3, r3, r1
 800821e:	095b      	lsrs	r3, r3, #5
 8008220:	2264      	movs	r2, #100	; 0x64
 8008222:	fb02 f303 	mul.w	r3, r2, r3
 8008226:	1acb      	subs	r3, r1, r3
 8008228:	011b      	lsls	r3, r3, #4
 800822a:	3332      	adds	r3, #50	; 0x32
 800822c:	4a33      	ldr	r2, [pc, #204]	; (80082fc <UART_SetConfig+0x4e4>)
 800822e:	fba2 2303 	umull	r2, r3, r2, r3
 8008232:	095b      	lsrs	r3, r3, #5
 8008234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008238:	441c      	add	r4, r3
 800823a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800823e:	2200      	movs	r2, #0
 8008240:	673b      	str	r3, [r7, #112]	; 0x70
 8008242:	677a      	str	r2, [r7, #116]	; 0x74
 8008244:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008248:	4642      	mov	r2, r8
 800824a:	464b      	mov	r3, r9
 800824c:	1891      	adds	r1, r2, r2
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	415b      	adcs	r3, r3
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008258:	4641      	mov	r1, r8
 800825a:	1851      	adds	r1, r2, r1
 800825c:	6039      	str	r1, [r7, #0]
 800825e:	4649      	mov	r1, r9
 8008260:	414b      	adcs	r3, r1
 8008262:	607b      	str	r3, [r7, #4]
 8008264:	f04f 0200 	mov.w	r2, #0
 8008268:	f04f 0300 	mov.w	r3, #0
 800826c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008270:	4659      	mov	r1, fp
 8008272:	00cb      	lsls	r3, r1, #3
 8008274:	4651      	mov	r1, sl
 8008276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800827a:	4651      	mov	r1, sl
 800827c:	00ca      	lsls	r2, r1, #3
 800827e:	4610      	mov	r0, r2
 8008280:	4619      	mov	r1, r3
 8008282:	4603      	mov	r3, r0
 8008284:	4642      	mov	r2, r8
 8008286:	189b      	adds	r3, r3, r2
 8008288:	66bb      	str	r3, [r7, #104]	; 0x68
 800828a:	464b      	mov	r3, r9
 800828c:	460a      	mov	r2, r1
 800828e:	eb42 0303 	adc.w	r3, r2, r3
 8008292:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	663b      	str	r3, [r7, #96]	; 0x60
 800829e:	667a      	str	r2, [r7, #100]	; 0x64
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	f04f 0300 	mov.w	r3, #0
 80082a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80082ac:	4649      	mov	r1, r9
 80082ae:	008b      	lsls	r3, r1, #2
 80082b0:	4641      	mov	r1, r8
 80082b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082b6:	4641      	mov	r1, r8
 80082b8:	008a      	lsls	r2, r1, #2
 80082ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80082be:	f7f8 fb83 	bl	80009c8 <__aeabi_uldivmod>
 80082c2:	4602      	mov	r2, r0
 80082c4:	460b      	mov	r3, r1
 80082c6:	4b0d      	ldr	r3, [pc, #52]	; (80082fc <UART_SetConfig+0x4e4>)
 80082c8:	fba3 1302 	umull	r1, r3, r3, r2
 80082cc:	095b      	lsrs	r3, r3, #5
 80082ce:	2164      	movs	r1, #100	; 0x64
 80082d0:	fb01 f303 	mul.w	r3, r1, r3
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	011b      	lsls	r3, r3, #4
 80082d8:	3332      	adds	r3, #50	; 0x32
 80082da:	4a08      	ldr	r2, [pc, #32]	; (80082fc <UART_SetConfig+0x4e4>)
 80082dc:	fba2 2303 	umull	r2, r3, r2, r3
 80082e0:	095b      	lsrs	r3, r3, #5
 80082e2:	f003 020f 	and.w	r2, r3, #15
 80082e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4422      	add	r2, r4
 80082ee:	609a      	str	r2, [r3, #8]
}
 80082f0:	bf00      	nop
 80082f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80082f6:	46bd      	mov	sp, r7
 80082f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082fc:	51eb851f 	.word	0x51eb851f

08008300 <memset>:
 8008300:	4402      	add	r2, r0
 8008302:	4603      	mov	r3, r0
 8008304:	4293      	cmp	r3, r2
 8008306:	d100      	bne.n	800830a <memset+0xa>
 8008308:	4770      	bx	lr
 800830a:	f803 1b01 	strb.w	r1, [r3], #1
 800830e:	e7f9      	b.n	8008304 <memset+0x4>

08008310 <__libc_init_array>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	4d0d      	ldr	r5, [pc, #52]	; (8008348 <__libc_init_array+0x38>)
 8008314:	4c0d      	ldr	r4, [pc, #52]	; (800834c <__libc_init_array+0x3c>)
 8008316:	1b64      	subs	r4, r4, r5
 8008318:	10a4      	asrs	r4, r4, #2
 800831a:	2600      	movs	r6, #0
 800831c:	42a6      	cmp	r6, r4
 800831e:	d109      	bne.n	8008334 <__libc_init_array+0x24>
 8008320:	4d0b      	ldr	r5, [pc, #44]	; (8008350 <__libc_init_array+0x40>)
 8008322:	4c0c      	ldr	r4, [pc, #48]	; (8008354 <__libc_init_array+0x44>)
 8008324:	f000 f826 	bl	8008374 <_init>
 8008328:	1b64      	subs	r4, r4, r5
 800832a:	10a4      	asrs	r4, r4, #2
 800832c:	2600      	movs	r6, #0
 800832e:	42a6      	cmp	r6, r4
 8008330:	d105      	bne.n	800833e <__libc_init_array+0x2e>
 8008332:	bd70      	pop	{r4, r5, r6, pc}
 8008334:	f855 3b04 	ldr.w	r3, [r5], #4
 8008338:	4798      	blx	r3
 800833a:	3601      	adds	r6, #1
 800833c:	e7ee      	b.n	800831c <__libc_init_array+0xc>
 800833e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008342:	4798      	blx	r3
 8008344:	3601      	adds	r6, #1
 8008346:	e7f2      	b.n	800832e <__libc_init_array+0x1e>
 8008348:	080083ac 	.word	0x080083ac
 800834c:	080083ac 	.word	0x080083ac
 8008350:	080083ac 	.word	0x080083ac
 8008354:	080083b0 	.word	0x080083b0

08008358 <memcpy>:
 8008358:	440a      	add	r2, r1
 800835a:	4291      	cmp	r1, r2
 800835c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008360:	d100      	bne.n	8008364 <memcpy+0xc>
 8008362:	4770      	bx	lr
 8008364:	b510      	push	{r4, lr}
 8008366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800836a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800836e:	4291      	cmp	r1, r2
 8008370:	d1f9      	bne.n	8008366 <memcpy+0xe>
 8008372:	bd10      	pop	{r4, pc}

08008374 <_init>:
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008376:	bf00      	nop
 8008378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837a:	bc08      	pop	{r3}
 800837c:	469e      	mov	lr, r3
 800837e:	4770      	bx	lr

08008380 <_fini>:
 8008380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008382:	bf00      	nop
 8008384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008386:	bc08      	pop	{r3}
 8008388:	469e      	mov	lr, r3
 800838a:	4770      	bx	lr
